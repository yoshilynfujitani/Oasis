{
  "version": 3,
  "sources": ["../../es5-ext/global.js", "../../websocket/package.json", "../../websocket/lib/version.js", "../../websocket/lib/browser.js", "../../@supabase/functions-js/src/helper.ts", "../../@supabase/functions-js/src/types.ts", "../../@supabase/functions-js/src/FunctionsClient.ts", "../../@supabase/postgrest-js/src/PostgrestBuilder.ts", "../../@supabase/postgrest-js/src/PostgrestTransformBuilder.ts", "../../@supabase/postgrest-js/src/PostgrestFilterBuilder.ts", "../../@supabase/postgrest-js/src/PostgrestQueryBuilder.ts", "../../@supabase/postgrest-js/src/version.ts", "../../@supabase/postgrest-js/src/constants.ts", "../../@supabase/postgrest-js/src/PostgrestClient.ts", "../../@supabase/realtime-js/src/RealtimeClient.ts", "../../@supabase/realtime-js/src/lib/version.ts", "../../@supabase/realtime-js/src/lib/constants.ts", "../../@supabase/realtime-js/src/lib/timer.ts", "../../@supabase/realtime-js/src/lib/serializer.ts", "../../@supabase/realtime-js/src/lib/push.ts", "../../@supabase/realtime-js/src/RealtimePresence.ts", "../../@supabase/realtime-js/src/lib/transformers.ts", "../../@supabase/realtime-js/src/RealtimeChannel.ts", "../../@supabase/storage-js/src/lib/errors.ts", "../../@supabase/storage-js/src/lib/helpers.ts", "../../@supabase/storage-js/src/lib/fetch.ts", "../../@supabase/storage-js/src/packages/StorageFileApi.ts", "../../@supabase/storage-js/src/lib/version.ts", "../../@supabase/storage-js/src/lib/constants.ts", "../../@supabase/storage-js/src/packages/StorageBucketApi.ts", "../../@supabase/storage-js/src/StorageClient.ts", "../../@supabase/supabase-js/src/lib/version.ts", "../../@supabase/supabase-js/src/lib/constants.ts", "../../@supabase/supabase-js/src/lib/fetch.ts", "../../@supabase/supabase-js/src/lib/helpers.ts", "../../@supabase/gotrue-js/src/lib/helpers.ts", "../../@supabase/gotrue-js/src/lib/errors.ts", "../../@supabase/gotrue-js/src/lib/fetch.ts", "../../@supabase/gotrue-js/src/GoTrueAdminApi.ts", "../../@supabase/gotrue-js/src/lib/version.ts", "../../@supabase/gotrue-js/src/lib/constants.ts", "../../@supabase/gotrue-js/src/lib/local-storage.ts", "../../@supabase/gotrue-js/src/lib/polyfills.ts", "../../@supabase/gotrue-js/src/GoTrueClient.ts", "../../@supabase/supabase-js/src/lib/SupabaseAuthClient.ts", "../../@supabase/supabase-js/src/SupabaseClient.ts", "../../@supabase/supabase-js/src/index.ts"],
  "sourcesContent": ["var naiveFallback = function () {\r\n\tif (typeof self === \"object\" && self) return self;\r\n\tif (typeof window === \"object\" && window) return window;\r\n\tthrow new Error(\"Unable to resolve global `this`\");\r\n};\r\n\r\nmodule.exports = (function () {\r\n\tif (this) return this;\r\n\r\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\r\n\r\n\t// Fallback to standard globalThis if available\r\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\r\n\r\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\r\n\t// In all ES5+ engines global object inherits from Object.prototype\r\n\t// (if you approached one that doesn't please report)\r\n\ttry {\r\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\r\n\t\t\tget: function () { return this; },\r\n\t\t\tconfigurable: true\r\n\t\t});\r\n\t} catch (error) {\r\n\t\t// Unfortunate case of updates to Object.prototype being restricted\r\n\t\t// via preventExtensions, seal or freeze\r\n\t\treturn naiveFallback();\r\n\t}\r\n\ttry {\r\n\t\t// Safari case (window.__global__ works, but __global__ does not)\r\n\t\tif (!__global__) return naiveFallback();\r\n\t\treturn __global__;\r\n\t} finally {\r\n\t\tdelete Object.prototype.__global__;\r\n\t}\r\n})();\r\n", "{\r\n  \"name\": \"websocket\",\r\n  \"description\": \"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.\",\r\n  \"keywords\": [\r\n    \"websocket\",\r\n    \"websockets\",\r\n    \"socket\",\r\n    \"networking\",\r\n    \"comet\",\r\n    \"push\",\r\n    \"RFC-6455\",\r\n    \"realtime\",\r\n    \"server\",\r\n    \"client\"\r\n  ],\r\n  \"author\": \"Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)\",\r\n  \"contributors\": [\r\n    \"IÃ±aki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)\"\r\n  ],\r\n  \"version\": \"1.0.34\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/theturtle32/WebSocket-Node.git\"\r\n  },\r\n  \"homepage\": \"https://github.com/theturtle32/WebSocket-Node\",\r\n  \"engines\": {\r\n    \"node\": \">=4.0.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"bufferutil\": \"^4.0.1\",\r\n    \"debug\": \"^2.2.0\",\r\n    \"es5-ext\": \"^0.10.50\",\r\n    \"typedarray-to-buffer\": \"^3.1.5\",\r\n    \"utf-8-validate\": \"^5.0.2\",\r\n    \"yaeti\": \"^0.0.6\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"buffer-equal\": \"^1.0.0\",\r\n    \"gulp\": \"^4.0.2\",\r\n    \"gulp-jshint\": \"^2.0.4\",\r\n    \"jshint-stylish\": \"^2.2.1\",\r\n    \"jshint\": \"^2.0.0\",\r\n    \"tape\": \"^4.9.1\"\r\n  },\r\n  \"config\": {\r\n    \"verbose\": false\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"tape test/unit/*.js\",\r\n    \"gulp\": \"gulp\"\r\n  },\r\n  \"main\": \"index\",\r\n  \"directories\": {\r\n    \"lib\": \"./lib\"\r\n  },\r\n  \"browser\": \"lib/browser.js\",\r\n  \"license\": \"Apache-2.0\"\r\n}\r\n", "module.exports = require('../package.json').version;\r\n", "var _globalThis;\r\nif (typeof globalThis === 'object') {\r\n\t_globalThis = globalThis;\r\n} else {\r\n\ttry {\r\n\t\t_globalThis = require('es5-ext/global');\r\n\t} catch (error) {\r\n\t} finally {\r\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\r\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\r\n\t}\r\n}\r\n\r\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\r\nvar websocket_version = require('./version');\r\n\r\n\r\n/**\r\n * Expose a W3C WebSocket class with just one or two arguments.\r\n */\r\nfunction W3CWebSocket(uri, protocols) {\r\n\tvar native_instance;\r\n\r\n\tif (protocols) {\r\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\r\n\t}\r\n\telse {\r\n\t\tnative_instance = new NativeWebSocket(uri);\r\n\t}\r\n\r\n\t/**\r\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\r\n\t * class). Since it is an Object it will be returned as it is when creating an\r\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\r\n\t *\r\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\r\n\t */\r\n\treturn native_instance;\r\n}\r\nif (NativeWebSocket) {\r\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\r\n\t\tObject.defineProperty(W3CWebSocket, prop, {\r\n\t\t\tget: function() { return NativeWebSocket[prop]; }\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n * Module exports.\r\n */\r\nmodule.exports = {\r\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\r\n    'version'      : websocket_version\r\n};\r\n", "import { Fetch } from './types'\r\n\r\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\r\n  let _fetch: Fetch\r\n  if (customFetch) {\r\n    _fetch = customFetch\r\n  } else if (typeof fetch === 'undefined') {\r\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\r\n  } else {\r\n    _fetch = fetch\r\n  }\r\n  return (...args) => _fetch(...args)\r\n}\r\n", "export type Fetch = typeof fetch\r\n\r\n/**\r\n * Response format\r\n *\r\n */\r\nexport interface FunctionsResponseSuccess<T> {\r\n  data: T\r\n  error: null\r\n}\r\nexport interface FunctionsResponseFailure {\r\n  data: null\r\n  error: any\r\n}\r\nexport type FunctionsResponse<T> = FunctionsResponseSuccess<T> | FunctionsResponseFailure\r\n\r\nexport class FunctionsError extends Error {\r\n  context: any\r\n  constructor(message: string, name = 'FunctionsError', context?: any) {\r\n    super(message)\r\n    super.name = name\r\n    this.context = context\r\n  }\r\n}\r\n\r\nexport class FunctionsFetchError extends FunctionsError {\r\n  constructor(context: any) {\r\n    super('Failed to send a request to the Edge Function', 'FunctionsFetchError', context)\r\n  }\r\n}\r\n\r\nexport class FunctionsRelayError extends FunctionsError {\r\n  constructor(context: any) {\r\n    super('Relay Error invoking the Edge Function', 'FunctionsRelayError', context)\r\n  }\r\n}\r\n\r\nexport class FunctionsHttpError extends FunctionsError {\r\n  constructor(context: any) {\r\n    super('Edge Function returned a non-2xx status code', 'FunctionsHttpError', context)\r\n  }\r\n}\r\n\r\nexport type FunctionInvokeOptions = {\r\n  /**\r\n   * Object representing the headers to send with the request.\r\n   * */\r\n  headers?: { [key: string]: string }\r\n  /**\r\n   * The HTTP verb of the request\r\n   */\r\n  method?: 'POST' | 'GET' | 'PUT' | 'PATCH' | 'DELETE'\r\n  /**\r\n   * The body of the request.\r\n   */\r\n  body?:\r\n    | File\r\n    | Blob\r\n    | ArrayBuffer\r\n    | FormData\r\n    | ReadableStream<Uint8Array>\r\n    | Record<string, any>\r\n    | string\r\n}\r\n", "import { resolveFetch } from './helper'\r\nimport {\r\n  Fetch,\r\n  FunctionsFetchError,\r\n  FunctionsHttpError,\r\n  FunctionsRelayError,\r\n  FunctionsResponse,\r\n  FunctionInvokeOptions,\r\n} from './types'\r\n\r\nexport class FunctionsClient {\r\n  protected url: string\r\n  protected headers: Record<string, string>\r\n  protected fetch: Fetch\r\n\r\n  constructor(\r\n    url: string,\r\n    {\r\n      headers = {},\r\n      customFetch,\r\n    }: {\r\n      headers?: Record<string, string>\r\n      customFetch?: Fetch\r\n    } = {}\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.fetch = resolveFetch(customFetch)\r\n  }\r\n\r\n  /**\r\n   * Updates the authorization header\r\n   * @param token - the new jwt token sent in the authorisation header\r\n   */\r\n  setAuth(token: string) {\r\n    this.headers.Authorization = `Bearer ${token}`\r\n  }\r\n\r\n  /**\r\n   * Invokes a function\r\n   * @param functionName - The name of the Function to invoke.\r\n   * @param options - Options for invoking the Function.\r\n   */\r\n  async invoke<T = any>(\r\n    functionName: string,\r\n    options: FunctionInvokeOptions = {}\r\n  ): Promise<FunctionsResponse<T>> {\r\n    try {\r\n      const { headers, method, body: functionArgs } = options\r\n\r\n      let _headers: Record<string, string> = {}\r\n      let body: any\r\n      if (\r\n        functionArgs &&\r\n        ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)\r\n      ) {\r\n        if (\r\n          (typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\r\n          functionArgs instanceof ArrayBuffer\r\n        ) {\r\n          // will work for File as File inherits Blob\r\n          // also works for ArrayBuffer as it is the same underlying structure as a Blob\r\n          _headers['Content-Type'] = 'application/octet-stream'\r\n          body = functionArgs\r\n        } else if (typeof functionArgs === 'string') {\r\n          // plain string\r\n          _headers['Content-Type'] = 'text/plain'\r\n          body = functionArgs\r\n        } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\r\n          // don't set content-type headers\r\n          // Request will automatically add the right boundary value\r\n          body = functionArgs\r\n        } else {\r\n          // default, assume this is JSON\r\n          _headers['Content-Type'] = 'application/json'\r\n          body = JSON.stringify(functionArgs)\r\n        }\r\n      }\r\n\r\n      const response = await this.fetch(`${this.url}/${functionName}`, {\r\n        method: method || 'POST',\r\n        // headers priority is (high to low):\r\n        // 1. invoke-level headers\r\n        // 2. client-level headers\r\n        // 3. default Content-Type header\r\n        headers: { ..._headers, ...this.headers, ...headers },\r\n        body,\r\n      }).catch((fetchError) => {\r\n        throw new FunctionsFetchError(fetchError)\r\n      })\r\n\r\n      const isRelayError = response.headers.get('x-relay-error')\r\n      if (isRelayError && isRelayError === 'true') {\r\n        throw new FunctionsRelayError(response)\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new FunctionsHttpError(response)\r\n      }\r\n\r\n      let responseType = (response.headers.get('Content-Type') ?? 'text/plain').split(';')[0].trim()\r\n      let data: any\r\n      if (responseType === 'application/json') {\r\n        data = await response.json()\r\n      } else if (responseType === 'application/octet-stream') {\r\n        data = await response.blob()\r\n      } else if (responseType === 'multipart/form-data') {\r\n        data = await response.formData()\r\n      } else {\r\n        // default to text\r\n        data = await response.text()\r\n      }\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n}\r\n", "import crossFetch from 'cross-fetch'\r\n\r\nimport type { Fetch, PostgrestSingleResponse } from './types'\r\n\r\nexport default abstract class PostgrestBuilder<Result>\r\n  implements PromiseLike<PostgrestSingleResponse<Result>>\r\n{\r\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\r\n  protected url: URL\r\n  protected headers: Record<string, string>\r\n  protected schema?: string\r\n  protected body?: unknown\r\n  protected shouldThrowOnError = false\r\n  protected signal?: AbortSignal\r\n  protected fetch: Fetch\r\n  protected allowEmpty: boolean\r\n\r\n  constructor(builder: PostgrestBuilder<Result>) {\r\n    this.method = builder.method\r\n    this.url = builder.url\r\n    this.headers = builder.headers\r\n    this.schema = builder.schema\r\n    this.body = builder.body\r\n    this.shouldThrowOnError = builder.shouldThrowOnError\r\n    this.signal = builder.signal\r\n    this.allowEmpty = builder.allowEmpty\r\n\r\n    if (builder.fetch) {\r\n      this.fetch = builder.fetch\r\n    } else if (typeof fetch === 'undefined') {\r\n      this.fetch = crossFetch\r\n    } else {\r\n      this.fetch = fetch\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If there's an error with the query, throwOnError will reject the promise by\r\n   * throwing the error instead of returning it as part of a successful response.\r\n   *\r\n   * {@link https://github.com/supabase/supabase-js/issues/92}\r\n   */\r\n  throwOnError(): this {\r\n    this.shouldThrowOnError = true\r\n    return this\r\n  }\r\n\r\n  then<TResult1 = PostgrestSingleResponse<Result>, TResult2 = never>(\r\n    onfulfilled?:\r\n      | ((value: PostgrestSingleResponse<Result>) => TResult1 | PromiseLike<TResult1>)\r\n      | undefined\r\n      | null,\r\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\r\n  ): PromiseLike<TResult1 | TResult2> {\r\n    // https://postgrest.org/en/stable/api.html#switching-schemas\r\n    if (this.schema === undefined) {\r\n      // skip\r\n    } else if (['GET', 'HEAD'].includes(this.method)) {\r\n      this.headers['Accept-Profile'] = this.schema\r\n    } else {\r\n      this.headers['Content-Profile'] = this.schema\r\n    }\r\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\r\n      this.headers['Content-Type'] = 'application/json'\r\n    }\r\n\r\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\r\n    // https://github.com/supabase/postgrest-js/pull/247\r\n    const _fetch = this.fetch\r\n    let res = _fetch(this.url.toString(), {\r\n      method: this.method,\r\n      headers: this.headers,\r\n      body: JSON.stringify(this.body),\r\n      signal: this.signal,\r\n    }).then(async (res) => {\r\n      let error = null\r\n      let data = null\r\n      let count: number | null = null\r\n      let status = res.status\r\n      let statusText = res.statusText\r\n\r\n      if (res.ok) {\r\n        if (this.method !== 'HEAD') {\r\n          const body = await res.text()\r\n          if (body === '') {\r\n            // Prefer: return=minimal\r\n          } else if (this.headers['Accept'] === 'text/csv') {\r\n            data = body\r\n          } else if (\r\n            this.headers['Accept'] &&\r\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\r\n          ) {\r\n            data = body\r\n          } else {\r\n            data = JSON.parse(body)\r\n          }\r\n        }\r\n\r\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\r\n        const contentRange = res.headers.get('content-range')?.split('/')\r\n        if (countHeader && contentRange && contentRange.length > 1) {\r\n          count = parseInt(contentRange[1])\r\n        }\r\n      } else {\r\n        const body = await res.text()\r\n\r\n        try {\r\n          error = JSON.parse(body)\r\n\r\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\r\n          if (Array.isArray(error) && res.status === 404) {\r\n            data = []\r\n            error = null\r\n            status = 200\r\n            statusText = 'OK'\r\n          }\r\n        } catch {\r\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\r\n          if (res.status === 404 && body === '') {\r\n            status = 204\r\n            statusText = 'No Content'\r\n          } else {\r\n            error = {\r\n              message: body,\r\n            }\r\n          }\r\n        }\r\n\r\n        if (error && this.allowEmpty && error?.details?.includes('Results contain 0 rows')) {\r\n          error = null\r\n          status = 200\r\n          statusText = 'OK'\r\n        }\r\n\r\n        if (error && this.shouldThrowOnError) {\r\n          throw error\r\n        }\r\n      }\r\n\r\n      const postgrestResponse = {\r\n        error,\r\n        data,\r\n        count,\r\n        status,\r\n        statusText,\r\n      }\r\n\r\n      return postgrestResponse\r\n    })\r\n    if (!this.shouldThrowOnError) {\r\n      res = res.catch((fetchError) => ({\r\n        error: {\r\n          message: `${fetchError?.name ?? 'FetchError'}: ${fetchError?.message}`,\r\n          details: `${fetchError?.stack ?? ''}`,\r\n          hint: '',\r\n          code: `${fetchError?.code ?? ''}`,\r\n        },\r\n        data: null,\r\n        count: null,\r\n        status: 0,\r\n        statusText: '',\r\n      }))\r\n    }\r\n\r\n    return res.then(onfulfilled, onrejected)\r\n  }\r\n}\r\n", "import PostgrestBuilder from './PostgrestBuilder'\r\nimport { GetResult } from './select-query-parser'\r\nimport { GenericSchema } from './types'\r\n\r\nexport default class PostgrestTransformBuilder<\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Result\r\n> extends PostgrestBuilder<Result> {\r\n  /**\r\n   * Perform a SELECT on the query result.\r\n   *\r\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n   * return modified rows. By calling this method, modified rows are returned in\r\n   * `data`.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas\r\n   */\r\n  select<Query extends string = '*', NewResultOne = GetResult<Schema, Row, Query>>(\r\n    columns?: Query\r\n  ): PostgrestTransformBuilder<Schema, Row, NewResultOne[]> {\r\n    // Remove whitespaces except when quoted\r\n    let quoted = false\r\n    const cleanedColumns = (columns ?? '*')\r\n      .split('')\r\n      .map((c) => {\r\n        if (/\\s/.test(c) && !quoted) {\r\n          return ''\r\n        }\r\n        if (c === '\"') {\r\n          quoted = !quoted\r\n        }\r\n        return c\r\n      })\r\n      .join('')\r\n    this.url.searchParams.set('select', cleanedColumns)\r\n    if (this.headers['Prefer']) {\r\n      this.headers['Prefer'] += ','\r\n    }\r\n    this.headers['Prefer'] += 'return=representation'\r\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResultOne[]>\r\n  }\r\n\r\n  order<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\r\n  ): this\r\n  order(\r\n    column: string,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable: string }\r\n  ): this\r\n  /**\r\n   * Order the query result by `column`.\r\n   *\r\n   * You can call this method multiple times to order by multiple columns.\r\n   *\r\n   * You can order foreign tables, but it doesn't affect the ordering of the\r\n   * current table.\r\n   *\r\n   * @param column - The column to order by\r\n   * @param options - Named parameters\r\n   * @param options.ascending - If `true`, the result will be in ascending order\r\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n   * `null`s appear last.\r\n   * @param options.foreignTable - Set this to order a foreign table by foreign\r\n   * columns\r\n   */\r\n  order(\r\n    column: string,\r\n    {\r\n      ascending = true,\r\n      nullsFirst,\r\n      foreignTable,\r\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\r\n  ): this {\r\n    const key = foreignTable ? `${foreignTable}.order` : 'order'\r\n    const existingOrder = this.url.searchParams.get(key)\r\n\r\n    this.url.searchParams.set(\r\n      key,\r\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\r\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\r\n      }`\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by `count`.\r\n   *\r\n   * @param count - The maximum number of rows to return\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\r\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\r\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\r\n    this.url.searchParams.set(key, `${count}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by `from` and `to` inclusively.\r\n   *\r\n   * @param from - The starting index from which to limit the result\r\n   * @param to - The last index to which to limit the result\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\r\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\r\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\r\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\r\n    this.url.searchParams.set(keyOffset, `${from}`)\r\n    // Range is inclusive, so add 1\r\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set the AbortSignal for the fetch request.\r\n   *\r\n   * @param signal - The AbortSignal to use for the fetch request\r\n   */\r\n  abortSignal(signal: AbortSignal): this {\r\n    this.signal = signal\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n   * returns an error.\r\n   */\r\n  single<\r\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\r\n  >(): PostgrestBuilder<ResultOne> {\r\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\r\n    return this as PostgrestBuilder<ResultOne>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n   * this returns an error.\r\n   */\r\n  maybeSingle<\r\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\r\n  >(): PostgrestBuilder<ResultOne | null> {\r\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\r\n    this.allowEmpty = true\r\n    return this as PostgrestBuilder<ResultOne | null>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a string in CSV format.\r\n   */\r\n  csv(): PostgrestBuilder<string> {\r\n    this.headers['Accept'] = 'text/csv'\r\n    return this as PostgrestBuilder<string>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n   */\r\n  geojson(): PostgrestBuilder<Record<string, unknown>> {\r\n    this.headers['Accept'] = 'application/geo+json'\r\n    return this as PostgrestBuilder<Record<string, unknown>>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as the EXPLAIN plan for the query.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.analyze - If `true`, the query will be executed and the\r\n   * actual run time will be returned\r\n   *\r\n   * @param options.verbose - If `true`, the query identifier will be returned\r\n   * and `data` will include the output columns of the query\r\n   *\r\n   * @param options.settings - If `true`, include information on configuration\r\n   * parameters that affect query planning\r\n   *\r\n   * @param options.buffers - If `true`, include information on buffer usage\r\n   *\r\n   * @param options.wal - If `true`, include information on WAL record generation\r\n   *\r\n   * @param options.format - The format of the output, can be `\"text\"` (default)\r\n   * or `\"json\"`\r\n   */\r\n  explain({\r\n    analyze = false,\r\n    verbose = false,\r\n    settings = false,\r\n    buffers = false,\r\n    wal = false,\r\n    format = 'text',\r\n  }: {\r\n    analyze?: boolean\r\n    verbose?: boolean\r\n    settings?: boolean\r\n    buffers?: boolean\r\n    wal?: boolean\r\n    format?: 'json' | 'text'\r\n  } = {}): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string> {\r\n    const options = [\r\n      analyze ? 'analyze' : null,\r\n      verbose ? 'verbose' : null,\r\n      settings ? 'settings' : null,\r\n      buffers ? 'buffers' : null,\r\n      wal ? 'wal' : null,\r\n    ]\r\n      .filter(Boolean)\r\n      .join('|')\r\n    // An Accept header can carry multiple media types but postgrest-js always sends one\r\n    const forMediatype = this.headers['Accept']\r\n    this.headers[\r\n      'Accept'\r\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\r\n    if (format === 'json') return this as PostgrestBuilder<Record<string, unknown>[]>\r\n    else return this as PostgrestBuilder<string>\r\n  }\r\n\r\n  /**\r\n   * Rollback the query.\r\n   *\r\n   * `data` will still be returned, but the query is not committed.\r\n   */\r\n  rollback(): this {\r\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\r\n      this.headers['Prefer'] += ',tx=rollback'\r\n    } else {\r\n      this.headers['Prefer'] = 'tx=rollback'\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   */\r\n  returns<NewResult>(): PostgrestTransformBuilder<Schema, Row, NewResult> {\r\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult>\r\n  }\r\n}\r\n", "import PostgrestTransformBuilder from './PostgrestTransformBuilder'\r\nimport { GenericSchema } from './types'\r\n\r\ntype FilterOperator =\r\n  | 'eq'\r\n  | 'neq'\r\n  | 'gt'\r\n  | 'gte'\r\n  | 'lt'\r\n  | 'lte'\r\n  | 'like'\r\n  | 'ilike'\r\n  | 'is'\r\n  | 'in'\r\n  | 'cs'\r\n  | 'cd'\r\n  | 'sl'\r\n  | 'sr'\r\n  | 'nxl'\r\n  | 'nxr'\r\n  | 'adj'\r\n  | 'ov'\r\n  | 'fts'\r\n  | 'plfts'\r\n  | 'phfts'\r\n  | 'wfts'\r\n\r\nexport default class PostgrestFilterBuilder<\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Result\r\n> extends PostgrestTransformBuilder<Schema, Row, Result> {\r\n  eq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  eq(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is equal to `value`.\r\n   *\r\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  eq(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `eq.${value}`)\r\n    return this\r\n  }\r\n\r\n  neq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  neq(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is not equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  neq(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `neq.${value}`)\r\n    return this\r\n  }\r\n\r\n  gt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  gt(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is greater than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  gt(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `gt.${value}`)\r\n    return this\r\n  }\r\n\r\n  gte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  gte(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is greater than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  gte(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `gte.${value}`)\r\n    return this\r\n  }\r\n\r\n  lt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  lt(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is less than `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  lt(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `lt.${value}`)\r\n    return this\r\n  }\r\n\r\n  lte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\r\n  lte(column: string, value: unknown): this\r\n  /**\r\n   * Match only rows where `column` is less than or equal to `value`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  lte(column: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `lte.${value}`)\r\n    return this\r\n  }\r\n\r\n  like<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\r\n  like(column: string, pattern: string): this\r\n  /**\r\n   * Match only rows where `column` matches `pattern` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\r\n  like(column: string, pattern: string): this {\r\n    this.url.searchParams.append(column, `like.${pattern}`)\r\n    return this\r\n  }\r\n\r\n  likeAllOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\r\n  likeAllOf(column: string, patterns: string[]): this\r\n  /**\r\n   * Match only rows where `column` matches all of `patterns` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\r\n  likeAllOf(column: string, patterns: string[]): this {\r\n    this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`)\r\n    return this\r\n  }\r\n\r\n  likeAnyOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\r\n  likeAnyOf(column: string, patterns: string[]): this\r\n  /**\r\n   * Match only rows where `column` matches any of `patterns` case-sensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\r\n  likeAnyOf(column: string, patterns: string[]): this {\r\n    this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`)\r\n    return this\r\n  }\r\n\r\n  ilike<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\r\n  ilike(column: string, pattern: string): this\r\n  /**\r\n   * Match only rows where `column` matches `pattern` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param pattern - The pattern to match with\r\n   */\r\n  ilike(column: string, pattern: string): this {\r\n    this.url.searchParams.append(column, `ilike.${pattern}`)\r\n    return this\r\n  }\r\n\r\n  ilikeAllOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\r\n  ilikeAllOf(column: string, patterns: string[]): this\r\n  /**\r\n   * Match only rows where `column` matches all of `patterns` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\r\n  ilikeAllOf(column: string, patterns: string[]): this {\r\n    this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`)\r\n    return this\r\n  }\r\n\r\n  ilikeAnyOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\r\n  ilikeAnyOf(column: string, patterns: string[]): this\r\n  /**\r\n   * Match only rows where `column` matches any of `patterns` case-insensitively.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param patterns - The patterns to match with\r\n   */\r\n  ilikeAnyOf(column: string, patterns: string[]): this {\r\n    this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`)\r\n    return this\r\n  }\r\n\r\n  is<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: Row[ColumnName] & (boolean | null)\r\n  ): this\r\n  is(column: string, value: boolean | null): this\r\n  /**\r\n   * Match only rows where `column` IS `value`.\r\n   *\r\n   * For non-boolean columns, this is only relevant for checking if the value of\r\n   * `column` is NULL by setting `value` to `null`.\r\n   *\r\n   * For boolean columns, you can also set `value` to `true` or `false` and it\r\n   * will behave the same way as `.eq()`.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param value - The value to filter with\r\n   */\r\n  is(column: string, value: boolean | null): this {\r\n    this.url.searchParams.append(column, `is.${value}`)\r\n    return this\r\n  }\r\n\r\n  in<ColumnName extends string & keyof Row>(column: ColumnName, values: Row[ColumnName][]): this\r\n  in(column: string, values: unknown[]): this\r\n  /**\r\n   * Match only rows where `column` is included in the `values` array.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param values - The values array to filter with\r\n   */\r\n  in(column: string, values: unknown[]): this {\r\n    const cleanedValues = values\r\n      .map((s) => {\r\n        // handle postgrest reserved characters\r\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\r\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\r\n        else return `${s}`\r\n      })\r\n      .join(',')\r\n    this.url.searchParams.append(column, `in.(${cleanedValues})`)\r\n    return this\r\n  }\r\n\r\n  contains<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | Row[ColumnName][] | Record<string, unknown>\r\n  ): this\r\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this\r\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * `column` contains every element appearing in `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\r\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this {\r\n    if (typeof value === 'string') {\r\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\r\n      // keep it simple and accept a string\r\n      this.url.searchParams.append(column, `cs.${value}`)\r\n    } else if (Array.isArray(value)) {\r\n      // array\r\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`)\r\n    } else {\r\n      // json\r\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  containedBy<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | Row[ColumnName][] | Record<string, unknown>\r\n  ): this\r\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this\r\n  /**\r\n   * Only relevant for jsonb, array, and range columns. Match only rows where\r\n   * every element appearing in `column` is contained by `value`.\r\n   *\r\n   * @param column - The jsonb, array, or range column to filter on\r\n   * @param value - The jsonb, array, or range value to filter with\r\n   */\r\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this {\r\n    if (typeof value === 'string') {\r\n      // range\r\n      this.url.searchParams.append(column, `cd.${value}`)\r\n    } else if (Array.isArray(value)) {\r\n      // array\r\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`)\r\n    } else {\r\n      // json\r\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  rangeGt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeGt(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is greater than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeGt(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `sr.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeGte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeGte(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or greater than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeGte(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `nxl.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeLt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeLt(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is less than any element in `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeLt(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `sl.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeLte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeLte(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where every element in\r\n   * `column` is either contained in `range` or less than any element in\r\n   * `range`.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeLte(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `nxr.${range}`)\r\n    return this\r\n  }\r\n\r\n  rangeAdjacent<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\r\n  rangeAdjacent(column: string, range: string): this\r\n  /**\r\n   * Only relevant for range columns. Match only rows where `column` is\r\n   * mutually exclusive to `range` and there can be no element between the two\r\n   * ranges.\r\n   *\r\n   * @param column - The range column to filter on\r\n   * @param range - The range to filter with\r\n   */\r\n  rangeAdjacent(column: string, range: string): this {\r\n    this.url.searchParams.append(column, `adj.${range}`)\r\n    return this\r\n  }\r\n\r\n  overlaps<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    value: string | Row[ColumnName][]\r\n  ): this\r\n  overlaps(column: string, value: string | unknown[]): this\r\n  /**\r\n   * Only relevant for array and range columns. Match only rows where\r\n   * `column` and `value` have an element in common.\r\n   *\r\n   * @param column - The array or range column to filter on\r\n   * @param value - The array or range value to filter with\r\n   */\r\n  overlaps(column: string, value: string | unknown[]): this {\r\n    if (typeof value === 'string') {\r\n      // range\r\n      this.url.searchParams.append(column, `ov.${value}`)\r\n    } else {\r\n      // array\r\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`)\r\n    }\r\n    return this\r\n  }\r\n\r\n  textSearch<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    query: string,\r\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\r\n  ): this\r\n  textSearch(\r\n    column: string,\r\n    query: string,\r\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\r\n  ): this\r\n  /**\r\n   * Only relevant for text and tsvector columns. Match only rows where\r\n   * `column` matches the query string in `query`.\r\n   *\r\n   * @param column - The text or tsvector column to filter on\r\n   * @param query - The query text to match with\r\n   * @param options - Named parameters\r\n   * @param options.config - The text search configuration to use\r\n   * @param options.type - Change how the `query` text is interpreted\r\n   */\r\n  textSearch(\r\n    column: string,\r\n    query: string,\r\n    { config, type }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' } = {}\r\n  ): this {\r\n    let typePart = ''\r\n    if (type === 'plain') {\r\n      typePart = 'pl'\r\n    } else if (type === 'phrase') {\r\n      typePart = 'ph'\r\n    } else if (type === 'websearch') {\r\n      typePart = 'w'\r\n    }\r\n    const configPart = config === undefined ? '' : `(${config})`\r\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`)\r\n    return this\r\n  }\r\n\r\n  match<ColumnName extends string & keyof Row>(query: Record<ColumnName, Row[ColumnName]>): this\r\n  match(query: Record<string, unknown>): this\r\n  /**\r\n   * Match only rows where each column in `query` keys is equal to its\r\n   * associated value. Shorthand for multiple `.eq()`s.\r\n   *\r\n   * @param query - The object to filter with, with column names as keys mapped\r\n   * to their filter values\r\n   */\r\n  match(query: Record<string, unknown>): this {\r\n    Object.entries(query).forEach(([column, value]) => {\r\n      this.url.searchParams.append(column, `eq.${value}`)\r\n    })\r\n    return this\r\n  }\r\n\r\n  not<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    operator: FilterOperator,\r\n    value: Row[ColumnName]\r\n  ): this\r\n  not(column: string, operator: string, value: unknown): this\r\n  /**\r\n   * Match only rows which doesn't satisfy the filter.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to be negated to filter with, following\r\n   * PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\r\n  not(column: string, operator: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `not.${operator}.${value}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Match only rows which satisfy at least one of the filters.\r\n   *\r\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure it's properly sanitized.\r\n   *\r\n   * It's currently not possible to do an `.or()` filter across multiple tables.\r\n   *\r\n   * @param filters - The filters to use, following PostgREST syntax\r\n   * @param foreignTable - Set this to filter on foreign tables instead of the\r\n   * current table\r\n   */\r\n  or(filters: string, { foreignTable }: { foreignTable?: string } = {}): this {\r\n    const key = foreignTable ? `${foreignTable}.or` : 'or'\r\n    this.url.searchParams.append(key, `(${filters})`)\r\n    return this\r\n  }\r\n\r\n  filter<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    operator: `${'' | 'not.'}${FilterOperator}`,\r\n    value: unknown\r\n  ): this\r\n  filter(column: string, operator: string, value: unknown): this\r\n  /**\r\n   * Match only rows which satisfy the filter. This is an escape hatch - you\r\n   * should use the specific filter methods wherever possible.\r\n   *\r\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n   * follow [PostgREST\r\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n   * to make sure they are properly sanitized.\r\n   *\r\n   * @param column - The column to filter on\r\n   * @param operator - The operator to filter with, following PostgREST syntax\r\n   * @param value - The value to filter with, following PostgREST syntax\r\n   */\r\n  filter(column: string, operator: string, value: unknown): this {\r\n    this.url.searchParams.append(column, `${operator}.${value}`)\r\n    return this\r\n  }\r\n}\r\n", "import PostgrestBuilder from './PostgrestBuilder'\r\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\r\nimport { GetResult } from './select-query-parser'\r\nimport { Fetch, GenericSchema, GenericTable, GenericView } from './types'\r\n\r\nexport default class PostgrestQueryBuilder<\r\n  Schema extends GenericSchema,\r\n  Relation extends GenericTable | GenericView\r\n> {\r\n  url: URL\r\n  headers: Record<string, string>\r\n  schema?: string\r\n  signal?: AbortSignal\r\n  fetch?: Fetch\r\n\r\n  constructor(\r\n    url: URL,\r\n    {\r\n      headers = {},\r\n      schema,\r\n      fetch,\r\n    }: {\r\n      headers?: Record<string, string>\r\n      schema?: string\r\n      fetch?: Fetch\r\n    }\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.schema = schema\r\n    this.fetch = fetch\r\n  }\r\n\r\n  /**\r\n   * Perform a SELECT query on the table or view.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   *\r\n   * @param options.count - Count algorithm to use to count rows in the table or view.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  select<Query extends string = '*', ResultOne = GetResult<Schema, Relation['Row'], Query>>(\r\n    columns?: Query,\r\n    {\r\n      head = false,\r\n      count,\r\n    }: {\r\n      head?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    } = {}\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], ResultOne[]> {\r\n    const method = head ? 'HEAD' : 'GET'\r\n    // Remove whitespaces except when quoted\r\n    let quoted = false\r\n    const cleanedColumns = (columns ?? '*')\r\n      .split('')\r\n      .map((c) => {\r\n        if (/\\s/.test(c) && !quoted) {\r\n          return ''\r\n        }\r\n        if (c === '\"') {\r\n          quoted = !quoted\r\n        }\r\n        return c\r\n      })\r\n      .join('')\r\n    this.url.searchParams.set('select', cleanedColumns)\r\n    if (count) {\r\n      this.headers['Prefer'] = `count=${count}`\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<ResultOne[]>)\r\n  }\r\n\r\n  /**\r\n   * Perform an INSERT into the table or view.\r\n   *\r\n   * By default, inserted rows are not returned. To return it, chain the call\r\n   * with `.select()`.\r\n   *\r\n   * @param values - The values to insert. Pass an object to insert a single row\r\n   * or an array to insert multiple rows.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count inserted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   *\r\n   * @param options.defaultToNull - Make missing fields default to `null`.\r\n   * Otherwise, use the default value for the column.\r\n   */\r\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\r\n    values: Row | Row[],\r\n    {\r\n      count,\r\n      defaultToNull = true,\r\n    }: {\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n      defaultToNull?: boolean\r\n    } = {}\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null> {\r\n    const method = 'POST'\r\n\r\n    const prefersHeaders = []\r\n    if (this.headers['Prefer']) {\r\n      prefersHeaders.push(this.headers['Prefer'])\r\n    }\r\n    if (count) {\r\n      prefersHeaders.push(`count=${count}`)\r\n    }\r\n    if (!defaultToNull) {\r\n      prefersHeaders.push('missing=default')\r\n    }\r\n    this.headers['Prefer'] = prefersHeaders.join(',')\r\n\r\n    if (Array.isArray(values)) {\r\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\r\n      if (columns.length > 0) {\r\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\r\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\r\n      }\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      body: values,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<null>)\r\n  }\r\n\r\n  /**\r\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\r\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\r\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\r\n   * exist, or if it does exist, perform an alternative action depending on\r\n   * `ignoreDuplicates`.\r\n   *\r\n   * By default, upserted rows are not returned. To return it, chain the call\r\n   * with `.select()`.\r\n   *\r\n   * @param values - The values to upsert with. Pass an object to upsert a\r\n   * single row or an array to upsert multiple rows.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\r\n   * duplicate rows are determined. Two rows are duplicates if all the\r\n   * `onConflict` columns are equal.\r\n   *\r\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\r\n   * `false`, duplicate rows are merged with existing rows.\r\n   *\r\n   * @param options.count - Count algorithm to use to count upserted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   *\r\n   * @param options.defaultToNull - Make missing fields default to `null`.\r\n   * Otherwise, use the default value for the column. This only applies when\r\n   * inserting new rows, not when merging with existing rows under\r\n   * `ignoreDuplicates: false`.\r\n   */\r\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\r\n    values: Row | Row[],\r\n    {\r\n      onConflict,\r\n      ignoreDuplicates = false,\r\n      count,\r\n      defaultToNull = true,\r\n    }: {\r\n      onConflict?: string\r\n      ignoreDuplicates?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n      defaultToNull?: boolean\r\n    } = {}\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null> {\r\n    const method = 'POST'\r\n\r\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`]\r\n\r\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\r\n    if (this.headers['Prefer']) {\r\n      prefersHeaders.push(this.headers['Prefer'])\r\n    }\r\n    if (count) {\r\n      prefersHeaders.push(`count=${count}`)\r\n    }\r\n    if (!defaultToNull) {\r\n      prefersHeaders.push('missing=default')\r\n    }\r\n    this.headers['Prefer'] = prefersHeaders.join(',')\r\n\r\n    if (Array.isArray(values)) {\r\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\r\n      if (columns.length > 0) {\r\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\r\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\r\n      }\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      body: values,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<null>)\r\n  }\r\n\r\n  /**\r\n   * Perform an UPDATE on the table or view.\r\n   *\r\n   * By default, updated rows are not returned. To return it, chain the call\r\n   * with `.select()` after filters.\r\n   *\r\n   * @param values - The values to update with\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count updated rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  update<Row extends Relation extends { Update: unknown } ? Relation['Update'] : never>(\r\n    values: Row,\r\n    {\r\n      count,\r\n    }: {\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    } = {}\r\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null> {\r\n    const method = 'PATCH'\r\n    const prefersHeaders = []\r\n    if (this.headers['Prefer']) {\r\n      prefersHeaders.push(this.headers['Prefer'])\r\n    }\r\n    if (count) {\r\n      prefersHeaders.push(`count=${count}`)\r\n    }\r\n    this.headers['Prefer'] = prefersHeaders.join(',')\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      body: values,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<null>)\r\n  }\r\n\r\n  /**\r\n   * Perform a DELETE on the table or view.\r\n   *\r\n   * By default, deleted rows are not returned. To return it, chain the call\r\n   * with `.select()` after filters.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.count - Count algorithm to use to count deleted rows.\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  delete({\r\n    count,\r\n  }: {\r\n    count?: 'exact' | 'planned' | 'estimated'\r\n  } = {}): PostgrestFilterBuilder<Schema, Relation['Row'], null> {\r\n    const method = 'DELETE'\r\n    const prefersHeaders = []\r\n    if (count) {\r\n      prefersHeaders.push(`count=${count}`)\r\n    }\r\n    if (this.headers['Prefer']) {\r\n      prefersHeaders.unshift(this.headers['Prefer'])\r\n    }\r\n    this.headers['Prefer'] = prefersHeaders.join(',')\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url: this.url,\r\n      headers: this.headers,\r\n      schema: this.schema,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<null>)\r\n  }\r\n}\r\n", "export const version = '1.6.0'\r\n", "import { version } from './version'\r\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `postgrest-js/${version}` }\r\n", "import PostgrestQueryBuilder from './PostgrestQueryBuilder'\r\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\r\nimport PostgrestBuilder from './PostgrestBuilder'\r\nimport { DEFAULT_HEADERS } from './constants'\r\nimport { Fetch, GenericSchema } from './types'\r\n\r\n/**\r\n * PostgREST client.\r\n *\r\n * @typeParam Database - Types for the schema from the [type\r\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\r\n *\r\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\r\n * literal, the same one passed to the constructor. If the schema is not\r\n * `\"public\"`, this must be supplied manually.\r\n */\r\nexport default class PostgrestClient<\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n> {\r\n  url: string\r\n  headers: Record<string, string>\r\n  schema?: SchemaName\r\n  fetch?: Fetch\r\n\r\n  // TODO: Add back shouldThrowOnError once we figure out the typings\r\n  /**\r\n   * Creates a PostgREST client.\r\n   *\r\n   * @param url - URL of the PostgREST endpoint\r\n   * @param options - Named parameters\r\n   * @param options.headers - Custom headers\r\n   * @param options.schema - Postgres schema to switch to\r\n   * @param options.fetch - Custom fetch\r\n   */\r\n  constructor(\r\n    url: string,\r\n    {\r\n      headers = {},\r\n      schema,\r\n      fetch,\r\n    }: {\r\n      headers?: Record<string, string>\r\n      schema?: SchemaName\r\n      fetch?: Fetch\r\n    } = {}\r\n  ) {\r\n    this.url = url\r\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\r\n    this.schema = schema\r\n    this.fetch = fetch\r\n  }\r\n\r\n  from<\r\n    TableName extends string & keyof Schema['Tables'],\r\n    Table extends Schema['Tables'][TableName]\r\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\r\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\r\n    relation: ViewName\r\n  ): PostgrestQueryBuilder<Schema, View>\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\r\n  /**\r\n   * Perform a query on a table or a view.\r\n   *\r\n   * @param relation - The table or view name to query\r\n   */\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\r\n    const url = new URL(`${this.url}/${relation}`)\r\n    return new PostgrestQueryBuilder<Schema, any>(url, {\r\n      headers: { ...this.headers },\r\n      schema: this.schema,\r\n      fetch: this.fetch,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn - The function name to call\r\n   * @param args - The arguments to pass to the function call\r\n   * @param options - Named parameters\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   * @param options.count - Count algorithm to use to count rows returned by the\r\n   * function. Only applicable for [set-returning\r\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  rpc<\r\n    FunctionName extends string & keyof Schema['Functions'],\r\n    Function_ extends Schema['Functions'][FunctionName]\r\n  >(\r\n    fn: FunctionName,\r\n    args: Function_['Args'] = {},\r\n    {\r\n      head = false,\r\n      count,\r\n    }: {\r\n      head?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    } = {}\r\n  ): PostgrestFilterBuilder<\r\n    Schema,\r\n    Function_['Returns'] extends any[]\r\n      ? Function_['Returns'][number] extends Record<string, unknown>\r\n        ? Function_['Returns'][number]\r\n        : never\r\n      : never,\r\n    Function_['Returns']\r\n  > {\r\n    let method: 'HEAD' | 'POST'\r\n    const url = new URL(`${this.url}/rpc/${fn}`)\r\n    let body: unknown | undefined\r\n    if (head) {\r\n      method = 'HEAD'\r\n      Object.entries(args).forEach(([name, value]) => {\r\n        url.searchParams.append(name, `${value}`)\r\n      })\r\n    } else {\r\n      method = 'POST'\r\n      body = args\r\n    }\r\n\r\n    const headers = { ...this.headers }\r\n    if (count) {\r\n      headers['Prefer'] = `count=${count}`\r\n    }\r\n\r\n    return new PostgrestFilterBuilder({\r\n      method,\r\n      url,\r\n      headers,\r\n      schema: this.schema,\r\n      body,\r\n      fetch: this.fetch,\r\n      allowEmpty: false,\r\n    } as unknown as PostgrestBuilder<Function_['Returns']>)\r\n  }\r\n}\r\n", "import { w3cwebsocket } from 'websocket'\r\nimport {\r\n  VSN,\r\n  CHANNEL_EVENTS,\r\n  TRANSPORTS,\r\n  SOCKET_STATES,\r\n  DEFAULT_TIMEOUT,\r\n  WS_CLOSE_NORMAL,\r\n  DEFAULT_HEADERS,\r\n  CONNECTION_STATE,\r\n} from './lib/constants'\r\nimport Timer from './lib/timer'\r\nimport Serializer from './lib/serializer'\r\nimport RealtimeChannel from './RealtimeChannel'\r\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\r\n\r\nexport type RealtimeClientOptions = {\r\n  transport?: WebSocket\r\n  timeout?: number\r\n  heartbeatIntervalMs?: number\r\n  logger?: Function\r\n  encode?: Function\r\n  decode?: Function\r\n  reconnectAfterMs?: Function\r\n  headers?: { [key: string]: string }\r\n  params?: { [key: string]: any }\r\n}\r\n\r\nexport type RealtimeMessage = {\r\n  topic: string\r\n  event: string\r\n  payload: any\r\n  ref: string\r\n  join_ref?: string\r\n}\r\n\r\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\r\n\r\nconst noop = () => {}\r\n\r\nexport default class RealtimeClient {\r\n  accessToken: string | null = null\r\n  channels: RealtimeChannel[] = []\r\n  endPoint: string = ''\r\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\r\n  params?: { [key: string]: string } = {}\r\n  timeout: number = DEFAULT_TIMEOUT\r\n  transport: any = w3cwebsocket\r\n  heartbeatIntervalMs: number = 30000\r\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\r\n  pendingHeartbeatRef: string | null = null\r\n  ref: number = 0\r\n  reconnectTimer: Timer\r\n  logger: Function = noop\r\n  encode: Function\r\n  decode: Function\r\n  reconnectAfterMs: Function\r\n  conn: WebSocket | null = null\r\n  sendBuffer: Function[] = []\r\n  serializer: Serializer = new Serializer()\r\n  stateChangeCallbacks: {\r\n    open: Function[]\r\n    close: Function[]\r\n    error: Function[]\r\n    message: Function[]\r\n  } = {\r\n    open: [],\r\n    close: [],\r\n    error: [],\r\n    message: [],\r\n  }\r\n  eventsPerSecondLimitMs: number = 100\r\n  inThrottle: boolean = false\r\n\r\n  /**\r\n   * Initializes the Socket.\r\n   *\r\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n   * @param options.transport The Websocket Transport, for example WebSocket.\r\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n   * @param options.params The optional params to pass when connecting.\r\n   * @param options.headers The optional headers to pass when connecting.\r\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n   */\r\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\r\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\r\n\r\n    if (options?.params) this.params = options.params\r\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\r\n    if (options?.timeout) this.timeout = options.timeout\r\n    if (options?.logger) this.logger = options.logger\r\n    if (options?.transport) this.transport = options.transport\r\n    if (options?.heartbeatIntervalMs)\r\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\r\n\r\n    const eventsPerSecond = options?.params?.eventsPerSecond\r\n    if (eventsPerSecond)\r\n      this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond)\r\n\r\n    this.reconnectAfterMs = options?.reconnectAfterMs\r\n      ? options.reconnectAfterMs\r\n      : (tries: number) => {\r\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\r\n        }\r\n    this.encode = options?.encode\r\n      ? options.encode\r\n      : (payload: JSON, callback: Function) => {\r\n          return callback(JSON.stringify(payload))\r\n        }\r\n    this.decode = options?.decode\r\n      ? options.decode\r\n      : this.serializer.decode.bind(this.serializer)\r\n    this.reconnectTimer = new Timer(async () => {\r\n      this.disconnect()\r\n      this.connect()\r\n    }, this.reconnectAfterMs)\r\n  }\r\n\r\n  /**\r\n   * Connects the socket, unless already connected.\r\n   */\r\n  connect(): void {\r\n    if (this.conn) {\r\n      return\r\n    }\r\n\r\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers)\r\n\r\n    if (this.conn) {\r\n      this.conn.binaryType = 'arraybuffer'\r\n      this.conn.onopen = () => this._onConnOpen()\r\n      this.conn.onerror = (error) => this._onConnError(error as ErrorEvent)\r\n      this.conn.onmessage = (event) => this._onConnMessage(event)\r\n      this.conn.onclose = (event) => this._onConnClose(event)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnects the socket.\r\n   *\r\n   * @param code A numeric status code to send on disconnect.\r\n   * @param reason A custom reason for the disconnect.\r\n   */\r\n  disconnect(code?: number, reason?: string): void {\r\n    if (this.conn) {\r\n      this.conn.onclose = function () {} // noop\r\n      if (code) {\r\n        this.conn.close(code, reason ?? '')\r\n      } else {\r\n        this.conn.close()\r\n      }\r\n      this.conn = null\r\n      // remove open handles\r\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n      this.reconnectTimer.reset()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns all created channels\r\n   */\r\n  getChannels(): RealtimeChannel[] {\r\n    return this.channels\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes a single channel\r\n   * @param channel A RealtimeChannel instance\r\n   */\r\n  async removeChannel(\r\n    channel: RealtimeChannel\r\n  ): Promise<RealtimeRemoveChannelResponse> {\r\n    const status = await channel.unsubscribe()\r\n    if (this.channels.length === 0) {\r\n      this.disconnect()\r\n    }\r\n    return status\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes all channels\r\n   */\r\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\r\n    const values_1 = await Promise.all(\r\n      this.channels.map((channel) => channel.unsubscribe())\r\n    )\r\n    this.disconnect()\r\n    return values_1\r\n  }\r\n\r\n  /**\r\n   * Logs the message.\r\n   *\r\n   * For customized logging, `this.logger` can be overridden.\r\n   */\r\n  log(kind: string, msg: string, data?: any) {\r\n    this.logger(kind, msg, data)\r\n  }\r\n\r\n  /**\r\n   * Returns the current state of the socket.\r\n   */\r\n  connectionState(): CONNECTION_STATE {\r\n    switch (this.conn && this.conn.readyState) {\r\n      case SOCKET_STATES.connecting:\r\n        return CONNECTION_STATE.Connecting\r\n      case SOCKET_STATES.open:\r\n        return CONNECTION_STATE.Open\r\n      case SOCKET_STATES.closing:\r\n        return CONNECTION_STATE.Closing\r\n      default:\r\n        return CONNECTION_STATE.Closed\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns `true` is the connection is open.\r\n   */\r\n  isConnected(): boolean {\r\n    return this.connectionState() === CONNECTION_STATE.Open\r\n  }\r\n\r\n  channel(\r\n    topic: string,\r\n    params: RealtimeChannelOptions = { config: {} }\r\n  ): RealtimeChannel {\r\n    if (!this.isConnected()) {\r\n      this.connect()\r\n    }\r\n\r\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\r\n    this.channels.push(chan)\r\n    return chan\r\n  }\r\n\r\n  /**\r\n   * Push out a message if the socket is connected.\r\n   *\r\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n   */\r\n  push(data: RealtimeMessage): 'rate limited' | void {\r\n    const { topic, event, payload, ref } = data\r\n    let callback = () => {\r\n      this.encode(data, (result: any) => {\r\n        this.conn?.send(result)\r\n      })\r\n    }\r\n    this.log('push', `${topic} ${event} (${ref})`, payload)\r\n    if (this.isConnected()) {\r\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\r\n        const isThrottled = this._throttle(callback)()\r\n        if (isThrottled) {\r\n          return 'rate limited'\r\n        }\r\n      } else {\r\n        callback()\r\n      }\r\n    } else {\r\n      this.sendBuffer.push(callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n   *\r\n   * @param token A JWT string.\r\n   */\r\n  setAuth(token: string | null): void {\r\n    this.accessToken = token\r\n\r\n    this.channels.forEach((channel) => {\r\n      token && channel.updateJoinPayload({ access_token: token })\r\n\r\n      if (channel.joinedOnce && channel._isJoined()) {\r\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Return the next message ref, accounting for overflows\r\n   *\r\n   * @internal\r\n   */\r\n  _makeRef(): string {\r\n    let newRef = this.ref + 1\r\n    if (newRef === this.ref) {\r\n      this.ref = 0\r\n    } else {\r\n      this.ref = newRef\r\n    }\r\n\r\n    return this.ref.toString()\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from channels with the specified topic.\r\n   *\r\n   * @internal\r\n   */\r\n  _leaveOpenTopic(topic: string): void {\r\n    let dupChannel = this.channels.find(\r\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\r\n    )\r\n    if (dupChannel) {\r\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\r\n      dupChannel.unsubscribe()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a subscription from the socket.\r\n   *\r\n   * @param channel An open subscription.\r\n   *\r\n   * @internal\r\n   */\r\n  _remove(channel: RealtimeChannel) {\r\n    this.channels = this.channels.filter(\r\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns the URL of the websocket.\r\n   *\r\n   * @internal\r\n   */\r\n  private _endPointURL(): string {\r\n    return this._appendParams(\r\n      this.endPoint,\r\n      Object.assign({}, this.params, { vsn: VSN })\r\n    )\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnMessage(rawMessage: { data: any }) {\r\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\r\n      let { topic, event, payload, ref } = msg\r\n\r\n      if (\r\n        (ref && ref === this.pendingHeartbeatRef) ||\r\n        event === payload?.type\r\n      ) {\r\n        this.pendingHeartbeatRef = null\r\n      }\r\n\r\n      this.log(\r\n        'receive',\r\n        `${payload.status || ''} ${topic} ${event} ${\r\n          (ref && '(' + ref + ')') || ''\r\n        }`,\r\n        payload\r\n      )\r\n      this.channels\r\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\r\n        .forEach((channel: RealtimeChannel) =>\r\n          channel._trigger(event, payload, ref)\r\n        )\r\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\r\n    })\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnOpen() {\r\n    this.log('transport', `connected to ${this._endPointURL()}`)\r\n    this._flushSendBuffer()\r\n    this.reconnectTimer.reset()\r\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n    this.heartbeatTimer = setInterval(\r\n      () => this._sendHeartbeat(),\r\n      this.heartbeatIntervalMs\r\n    )\r\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnClose(event: any) {\r\n    this.log('transport', 'close', event)\r\n    this._triggerChanError()\r\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n    this.reconnectTimer.scheduleTimeout()\r\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnError(error: ErrorEvent) {\r\n    this.log('transport', error.message)\r\n    this._triggerChanError()\r\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChanError() {\r\n    this.channels.forEach((channel: RealtimeChannel) =>\r\n      channel._trigger(CHANNEL_EVENTS.error)\r\n    )\r\n  }\r\n\r\n  /** @internal */\r\n  private _appendParams(\r\n    url: string,\r\n    params: { [key: string]: string }\r\n  ): string {\r\n    if (Object.keys(params).length === 0) {\r\n      return url\r\n    }\r\n    const prefix = url.match(/\\?/) ? '&' : '?'\r\n    const query = new URLSearchParams(params)\r\n\r\n    return `${url}${prefix}${query}`\r\n  }\r\n\r\n  /** @internal */\r\n  private _flushSendBuffer() {\r\n    if (this.isConnected() && this.sendBuffer.length > 0) {\r\n      this.sendBuffer.forEach((callback) => callback())\r\n      this.sendBuffer = []\r\n    }\r\n  }\r\n  /** @internal */\r\n  private _sendHeartbeat() {\r\n    if (!this.isConnected()) {\r\n      return\r\n    }\r\n    if (this.pendingHeartbeatRef) {\r\n      this.pendingHeartbeatRef = null\r\n      this.log(\r\n        'transport',\r\n        'heartbeat timeout. Attempting to re-establish connection'\r\n      )\r\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\r\n      return\r\n    }\r\n    this.pendingHeartbeatRef = this._makeRef()\r\n    this.push({\r\n      topic: 'phoenix',\r\n      event: 'heartbeat',\r\n      payload: {},\r\n      ref: this.pendingHeartbeatRef,\r\n    })\r\n    this.setAuth(this.accessToken)\r\n  }\r\n\r\n  /** @internal */\r\n  private _throttle(\r\n    callback: Function,\r\n    eventsPerSecondLimitMs: number = this.eventsPerSecondLimitMs\r\n  ): () => boolean {\r\n    return () => {\r\n      if (this.inThrottle) return true\r\n\r\n      callback()\r\n\r\n      if (eventsPerSecondLimitMs > 0) {\r\n        this.inThrottle = true\r\n\r\n        setTimeout(() => {\r\n          this.inThrottle = false\r\n        }, eventsPerSecondLimitMs)\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n}\r\n", "export const version = '2.7.2'\r\n", "import { version } from './version'\r\n\r\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `realtime-js/${version}` }\r\n\r\nexport const VSN: string = '1.0.0'\r\n\r\nexport const DEFAULT_TIMEOUT = 10000\r\n\r\nexport const WS_CLOSE_NORMAL = 1000\r\n\r\nexport enum SOCKET_STATES {\r\n  connecting = 0,\r\n  open = 1,\r\n  closing = 2,\r\n  closed = 3,\r\n}\r\n\r\nexport enum CHANNEL_STATES {\r\n  closed = 'closed',\r\n  errored = 'errored',\r\n  joined = 'joined',\r\n  joining = 'joining',\r\n  leaving = 'leaving',\r\n}\r\n\r\nexport enum CHANNEL_EVENTS {\r\n  close = 'phx_close',\r\n  error = 'phx_error',\r\n  join = 'phx_join',\r\n  reply = 'phx_reply',\r\n  leave = 'phx_leave',\r\n  access_token = 'access_token',\r\n}\r\n\r\nexport enum TRANSPORTS {\r\n  websocket = 'websocket',\r\n}\r\n\r\nexport enum CONNECTION_STATE {\r\n  Connecting = 'connecting',\r\n  Open = 'open',\r\n  Closing = 'closing',\r\n  Closed = 'closed',\r\n}\r\n", "/**\r\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\r\n *\r\n * @example\r\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\r\n *      return [1000, 5000, 10000][tries - 1] || 10000\r\n *    })\r\n *    reconnectTimer.scheduleTimeout() // fires after 1000\r\n *    reconnectTimer.scheduleTimeout() // fires after 5000\r\n *    reconnectTimer.reset()\r\n *    reconnectTimer.scheduleTimeout() // fires after 1000\r\n */\r\nexport default class Timer {\r\n  timer: number | undefined = undefined\r\n  tries: number = 0\r\n\r\n  constructor(public callback: Function, public timerCalc: Function) {\r\n    this.callback = callback\r\n    this.timerCalc = timerCalc\r\n  }\r\n\r\n  reset() {\r\n    this.tries = 0\r\n    clearTimeout(this.timer)\r\n  }\r\n\r\n  // Cancels any previous scheduleTimeout and schedules callback\r\n  scheduleTimeout() {\r\n    clearTimeout(this.timer)\r\n\r\n    this.timer = <any>setTimeout(() => {\r\n      this.tries = this.tries + 1\r\n      this.callback()\r\n    }, this.timerCalc(this.tries + 1))\r\n  }\r\n}\r\n", "// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\r\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\r\n\r\nexport default class Serializer {\r\n  HEADER_LENGTH = 1\r\n\r\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\r\n    if (rawPayload.constructor === ArrayBuffer) {\r\n      return callback(this._binaryDecode(rawPayload))\r\n    }\r\n\r\n    if (typeof rawPayload === 'string') {\r\n      return callback(JSON.parse(rawPayload))\r\n    }\r\n\r\n    return callback({})\r\n  }\r\n\r\n  private _binaryDecode(buffer: ArrayBuffer) {\r\n    const view = new DataView(buffer)\r\n    const decoder = new TextDecoder()\r\n\r\n    return this._decodeBroadcast(buffer, view, decoder)\r\n  }\r\n\r\n  private _decodeBroadcast(\r\n    buffer: ArrayBuffer,\r\n    view: DataView,\r\n    decoder: TextDecoder\r\n  ): {\r\n    ref: null\r\n    topic: string\r\n    event: string\r\n    payload: { [key: string]: any }\r\n  } {\r\n    const topicSize = view.getUint8(1)\r\n    const eventSize = view.getUint8(2)\r\n    let offset = this.HEADER_LENGTH + 2\r\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\r\n    offset = offset + topicSize\r\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\r\n    offset = offset + eventSize\r\n    const data = JSON.parse(\r\n      decoder.decode(buffer.slice(offset, buffer.byteLength))\r\n    )\r\n\r\n    return { ref: null, topic: topic, event: event, payload: data }\r\n  }\r\n}\r\n", "import { DEFAULT_TIMEOUT } from '../lib/constants'\r\nimport type RealtimeChannel from '../RealtimeChannel'\r\n\r\nexport default class Push {\r\n  sent: boolean = false\r\n  timeoutTimer: number | undefined = undefined\r\n  ref: string = ''\r\n  receivedResp: {\r\n    status: string\r\n    response: { [key: string]: any }\r\n  } | null = null\r\n  recHooks: {\r\n    status: string\r\n    callback: Function\r\n  }[] = []\r\n  refEvent: string | null = null\r\n  rateLimited: boolean = false\r\n\r\n  /**\r\n   * Initializes the Push\r\n   *\r\n   * @param channel The Channel\r\n   * @param event The event, for example `\"phx_join\"`\r\n   * @param payload The payload, for example `{user_id: 123}`\r\n   * @param timeout The push timeout in milliseconds\r\n   */\r\n  constructor(\r\n    public channel: RealtimeChannel,\r\n    public event: string,\r\n    public payload: { [key: string]: any } = {},\r\n    public timeout: number = DEFAULT_TIMEOUT\r\n  ) {}\r\n\r\n  resend(timeout: number) {\r\n    this.timeout = timeout\r\n    this._cancelRefEvent()\r\n    this.ref = ''\r\n    this.refEvent = null\r\n    this.receivedResp = null\r\n    this.sent = false\r\n    this.send()\r\n  }\r\n\r\n  send() {\r\n    if (this._hasReceived('timeout')) {\r\n      return\r\n    }\r\n    this.startTimeout()\r\n    this.sent = true\r\n    const status = this.channel.socket.push({\r\n      topic: this.channel.topic,\r\n      event: this.event,\r\n      payload: this.payload,\r\n      ref: this.ref,\r\n      join_ref: this.channel._joinRef(),\r\n    })\r\n    if (status === 'rate limited') {\r\n      this.rateLimited = true\r\n    }\r\n  }\r\n\r\n  updatePayload(payload: { [key: string]: any }): void {\r\n    this.payload = { ...this.payload, ...payload }\r\n  }\r\n\r\n  receive(status: string, callback: Function) {\r\n    if (this._hasReceived(status)) {\r\n      callback(this.receivedResp?.response)\r\n    }\r\n\r\n    this.recHooks.push({ status, callback })\r\n    return this\r\n  }\r\n\r\n  startTimeout() {\r\n    if (this.timeoutTimer) {\r\n      return\r\n    }\r\n    this.ref = this.channel.socket._makeRef()\r\n    this.refEvent = this.channel._replyEventName(this.ref)\r\n\r\n    const callback = (payload: any) => {\r\n      this._cancelRefEvent()\r\n      this._cancelTimeout()\r\n      this.receivedResp = payload\r\n      this._matchReceive(payload)\r\n    }\r\n\r\n    this.channel._on(this.refEvent, {}, callback)\r\n\r\n    this.timeoutTimer = <any>setTimeout(() => {\r\n      this.trigger('timeout', {})\r\n    }, this.timeout)\r\n  }\r\n\r\n  trigger(status: string, response: any) {\r\n    if (this.refEvent)\r\n      this.channel._trigger(this.refEvent, { status, response })\r\n  }\r\n\r\n  destroy() {\r\n    this._cancelRefEvent()\r\n    this._cancelTimeout()\r\n  }\r\n\r\n  private _cancelRefEvent() {\r\n    if (!this.refEvent) {\r\n      return\r\n    }\r\n\r\n    this.channel._off(this.refEvent, {})\r\n  }\r\n\r\n  private _cancelTimeout() {\r\n    clearTimeout(this.timeoutTimer)\r\n    this.timeoutTimer = undefined\r\n  }\r\n\r\n  private _matchReceive({\r\n    status,\r\n    response,\r\n  }: {\r\n    status: string\r\n    response: Function\r\n  }) {\r\n    this.recHooks\r\n      .filter((h) => h.status === status)\r\n      .forEach((h) => h.callback(response))\r\n  }\r\n\r\n  private _hasReceived(status: string) {\r\n    return this.receivedResp && this.receivedResp.status === status\r\n  }\r\n}\r\n", "/*\r\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\r\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\r\n*/\r\n\r\nimport type {\r\n  PresenceOpts,\r\n  PresenceOnJoinCallback,\r\n  PresenceOnLeaveCallback,\r\n} from 'phoenix'\r\nimport type RealtimeChannel from './RealtimeChannel'\r\n\r\ntype Presence<T extends { [key: string]: any } = {}> = {\r\n  presence_ref: string\r\n} & T\r\n\r\nexport type RealtimePresenceState<T extends { [key: string]: any } = {}> = {\r\n  [key: string]: Presence<T>[]\r\n}\r\n\r\nexport type RealtimePresenceJoinPayload<T extends { [key: string]: any }> = {\r\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}`\r\n  key: string\r\n  currentPresences: Presence<T>[]\r\n  newPresences: Presence<T>[]\r\n}\r\n\r\nexport type RealtimePresenceLeavePayload<T extends { [key: string]: any }> = {\r\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}`\r\n  key: string\r\n  currentPresences: Presence<T>[]\r\n  leftPresences: Presence<T>[]\r\n}\r\n\r\nexport enum REALTIME_PRESENCE_LISTEN_EVENTS {\r\n  SYNC = 'sync',\r\n  JOIN = 'join',\r\n  LEAVE = 'leave',\r\n}\r\n\r\ntype PresenceDiff = {\r\n  joins: RealtimePresenceState\r\n  leaves: RealtimePresenceState\r\n}\r\n\r\ntype RawPresenceState = {\r\n  [key: string]: {\r\n    metas: {\r\n      phx_ref?: string\r\n      phx_ref_prev?: string\r\n      [key: string]: any\r\n    }[]\r\n  }\r\n}\r\n\r\ntype RawPresenceDiff = {\r\n  joins: RawPresenceState\r\n  leaves: RawPresenceState\r\n}\r\n\r\ntype PresenceChooser<T> = (key: string, presences: Presence[]) => T\r\n\r\nexport default class RealtimePresence {\r\n  state: RealtimePresenceState = {}\r\n  pendingDiffs: RawPresenceDiff[] = []\r\n  joinRef: string | null = null\r\n  caller: {\r\n    onJoin: PresenceOnJoinCallback\r\n    onLeave: PresenceOnLeaveCallback\r\n    onSync: () => void\r\n  } = {\r\n    onJoin: () => {},\r\n    onLeave: () => {},\r\n    onSync: () => {},\r\n  }\r\n\r\n  /**\r\n   * Initializes the Presence.\r\n   *\r\n   * @param channel - The RealtimeChannel\r\n   * @param opts - The options,\r\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\r\n   */\r\n  constructor(public channel: RealtimeChannel, opts?: PresenceOpts) {\r\n    const events = opts?.events || {\r\n      state: 'presence_state',\r\n      diff: 'presence_diff',\r\n    }\r\n\r\n    this.channel._on(events.state, {}, (newState: RawPresenceState) => {\r\n      const { onJoin, onLeave, onSync } = this.caller\r\n\r\n      this.joinRef = this.channel._joinRef()\r\n\r\n      this.state = RealtimePresence.syncState(\r\n        this.state,\r\n        newState,\r\n        onJoin,\r\n        onLeave\r\n      )\r\n\r\n      this.pendingDiffs.forEach((diff) => {\r\n        this.state = RealtimePresence.syncDiff(\r\n          this.state,\r\n          diff,\r\n          onJoin,\r\n          onLeave\r\n        )\r\n      })\r\n\r\n      this.pendingDiffs = []\r\n\r\n      onSync()\r\n    })\r\n\r\n    this.channel._on(events.diff, {}, (diff: RawPresenceDiff) => {\r\n      const { onJoin, onLeave, onSync } = this.caller\r\n\r\n      if (this.inPendingSyncState()) {\r\n        this.pendingDiffs.push(diff)\r\n      } else {\r\n        this.state = RealtimePresence.syncDiff(\r\n          this.state,\r\n          diff,\r\n          onJoin,\r\n          onLeave\r\n        )\r\n\r\n        onSync()\r\n      }\r\n    })\r\n\r\n    this.onJoin((key, currentPresences, newPresences) => {\r\n      this.channel._trigger('presence', {\r\n        event: 'join',\r\n        key,\r\n        currentPresences,\r\n        newPresences,\r\n      })\r\n    })\r\n\r\n    this.onLeave((key, currentPresences, leftPresences) => {\r\n      this.channel._trigger('presence', {\r\n        event: 'leave',\r\n        key,\r\n        currentPresences,\r\n        leftPresences,\r\n      })\r\n    })\r\n\r\n    this.onSync(() => {\r\n      this.channel._trigger('presence', { event: 'sync' })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Used to sync the list of presences on the server with the\r\n   * client's state.\r\n   *\r\n   * An optional `onJoin` and `onLeave` callback can be provided to\r\n   * react to changes in the client's local presences across\r\n   * disconnects and reconnects with the server.\r\n   *\r\n   * @internal\r\n   */\r\n  private static syncState(\r\n    currentState: RealtimePresenceState,\r\n    newState: RawPresenceState | RealtimePresenceState,\r\n    onJoin: PresenceOnJoinCallback,\r\n    onLeave: PresenceOnLeaveCallback\r\n  ): RealtimePresenceState {\r\n    const state = this.cloneDeep(currentState)\r\n    const transformedState = this.transformState(newState)\r\n    const joins: RealtimePresenceState = {}\r\n    const leaves: RealtimePresenceState = {}\r\n\r\n    this.map(state, (key: string, presences: Presence[]) => {\r\n      if (!transformedState[key]) {\r\n        leaves[key] = presences\r\n      }\r\n    })\r\n\r\n    this.map(transformedState, (key, newPresences: Presence[]) => {\r\n      const currentPresences: Presence[] = state[key]\r\n\r\n      if (currentPresences) {\r\n        const newPresenceRefs = newPresences.map(\r\n          (m: Presence) => m.presence_ref\r\n        )\r\n        const curPresenceRefs = currentPresences.map(\r\n          (m: Presence) => m.presence_ref\r\n        )\r\n        const joinedPresences: Presence[] = newPresences.filter(\r\n          (m: Presence) => curPresenceRefs.indexOf(m.presence_ref) < 0\r\n        )\r\n        const leftPresences: Presence[] = currentPresences.filter(\r\n          (m: Presence) => newPresenceRefs.indexOf(m.presence_ref) < 0\r\n        )\r\n\r\n        if (joinedPresences.length > 0) {\r\n          joins[key] = joinedPresences\r\n        }\r\n\r\n        if (leftPresences.length > 0) {\r\n          leaves[key] = leftPresences\r\n        }\r\n      } else {\r\n        joins[key] = newPresences\r\n      }\r\n    })\r\n\r\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\r\n  }\r\n\r\n  /**\r\n   * Used to sync a diff of presence join and leave events from the\r\n   * server, as they happen.\r\n   *\r\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\r\n   * `onLeave` callbacks to react to a user joining or leaving from a\r\n   * device.\r\n   *\r\n   * @internal\r\n   */\r\n  private static syncDiff(\r\n    state: RealtimePresenceState,\r\n    diff: RawPresenceDiff | PresenceDiff,\r\n    onJoin: PresenceOnJoinCallback,\r\n    onLeave: PresenceOnLeaveCallback\r\n  ): RealtimePresenceState {\r\n    const { joins, leaves } = {\r\n      joins: this.transformState(diff.joins),\r\n      leaves: this.transformState(diff.leaves),\r\n    }\r\n\r\n    if (!onJoin) {\r\n      onJoin = () => {}\r\n    }\r\n\r\n    if (!onLeave) {\r\n      onLeave = () => {}\r\n    }\r\n\r\n    this.map(joins, (key, newPresences: Presence[]) => {\r\n      const currentPresences: Presence[] = state[key] ?? []\r\n      state[key] = this.cloneDeep(newPresences)\r\n\r\n      if (currentPresences.length > 0) {\r\n        const joinedPresenceRefs = state[key].map(\r\n          (m: Presence) => m.presence_ref\r\n        )\r\n        const curPresences: Presence[] = currentPresences.filter(\r\n          (m: Presence) => joinedPresenceRefs.indexOf(m.presence_ref) < 0\r\n        )\r\n\r\n        state[key].unshift(...curPresences)\r\n      }\r\n\r\n      onJoin(key, currentPresences, newPresences)\r\n    })\r\n\r\n    this.map(leaves, (key, leftPresences: Presence[]) => {\r\n      let currentPresences: Presence[] = state[key]\r\n\r\n      if (!currentPresences) return\r\n\r\n      const presenceRefsToRemove = leftPresences.map(\r\n        (m: Presence) => m.presence_ref\r\n      )\r\n      currentPresences = currentPresences.filter(\r\n        (m: Presence) => presenceRefsToRemove.indexOf(m.presence_ref) < 0\r\n      )\r\n\r\n      state[key] = currentPresences\r\n\r\n      onLeave(key, currentPresences, leftPresences)\r\n\r\n      if (currentPresences.length === 0) delete state[key]\r\n    })\r\n\r\n    return state\r\n  }\r\n\r\n  /** @internal */\r\n  private static map<T = any>(\r\n    obj: RealtimePresenceState,\r\n    func: PresenceChooser<T>\r\n  ): T[] {\r\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\r\n  }\r\n\r\n  /**\r\n   * Remove 'metas' key\r\n   * Change 'phx_ref' to 'presence_ref'\r\n   * Remove 'phx_ref' and 'phx_ref_prev'\r\n   *\r\n   * @example\r\n   * // returns {\r\n   *  abc123: [\r\n   *    { presence_ref: '2', user_id: 1 },\r\n   *    { presence_ref: '3', user_id: 2 }\r\n   *  ]\r\n   * }\r\n   * RealtimePresence.transformState({\r\n   *  abc123: {\r\n   *    metas: [\r\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\r\n   *      { phx_ref: '3', user_id: 2 }\r\n   *    ]\r\n   *  }\r\n   * })\r\n   *\r\n   * @internal\r\n   */\r\n  private static transformState(\r\n    state: RawPresenceState | RealtimePresenceState\r\n  ): RealtimePresenceState {\r\n    state = this.cloneDeep(state)\r\n\r\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\r\n      const presences = state[key]\r\n\r\n      if ('metas' in presences) {\r\n        newState[key] = presences.metas.map((presence) => {\r\n          presence['presence_ref'] = presence['phx_ref']\r\n\r\n          delete presence['phx_ref']\r\n          delete presence['phx_ref_prev']\r\n\r\n          return presence\r\n        }) as Presence[]\r\n      } else {\r\n        newState[key] = presences\r\n      }\r\n\r\n      return newState\r\n    }, {} as RealtimePresenceState)\r\n  }\r\n\r\n  /** @internal */\r\n  private static cloneDeep(obj: { [key: string]: any }) {\r\n    return JSON.parse(JSON.stringify(obj))\r\n  }\r\n\r\n  /** @internal */\r\n  private onJoin(callback: PresenceOnJoinCallback): void {\r\n    this.caller.onJoin = callback\r\n  }\r\n\r\n  /** @internal */\r\n  private onLeave(callback: PresenceOnLeaveCallback): void {\r\n    this.caller.onLeave = callback\r\n  }\r\n\r\n  /** @internal */\r\n  private onSync(callback: () => void): void {\r\n    this.caller.onSync = callback\r\n  }\r\n\r\n  /** @internal */\r\n  private inPendingSyncState(): boolean {\r\n    return !this.joinRef || this.joinRef !== this.channel._joinRef()\r\n  }\r\n}\r\n", "/**\r\n * Helpers to convert the change Payload into native JS types.\r\n */\r\n\r\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\r\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\r\n\r\nexport enum PostgresTypes {\r\n  abstime = 'abstime',\r\n  bool = 'bool',\r\n  date = 'date',\r\n  daterange = 'daterange',\r\n  float4 = 'float4',\r\n  float8 = 'float8',\r\n  int2 = 'int2',\r\n  int4 = 'int4',\r\n  int4range = 'int4range',\r\n  int8 = 'int8',\r\n  int8range = 'int8range',\r\n  json = 'json',\r\n  jsonb = 'jsonb',\r\n  money = 'money',\r\n  numeric = 'numeric',\r\n  oid = 'oid',\r\n  reltime = 'reltime',\r\n  text = 'text',\r\n  time = 'time',\r\n  timestamp = 'timestamp',\r\n  timestamptz = 'timestamptz',\r\n  timetz = 'timetz',\r\n  tsrange = 'tsrange',\r\n  tstzrange = 'tstzrange',\r\n}\r\n\r\ntype Columns = {\r\n  name: string // the column name. eg: \"user_id\"\r\n  type: string // the column type. eg: \"uuid\"\r\n  flags?: string[] // any special flags for the column. eg: [\"key\"]\r\n  type_modifier?: number // the type modifier. eg: 4294967295\r\n}[]\r\n\r\ntype BaseValue = null | string | number | boolean\r\ntype RecordValue = BaseValue | BaseValue[]\r\n\r\ntype Record = {\r\n  [key: string]: RecordValue\r\n}\r\n\r\n/**\r\n * Takes an array of columns and an object of string values then converts each string value\r\n * to its mapped type.\r\n *\r\n * @param {{name: String, type: String}[]} columns\r\n * @param {Object} record\r\n * @param {Object} options The map of various options that can be applied to the mapper\r\n * @param {Array} options.skipTypes The array of types that should not be converted\r\n *\r\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\r\n * //=>{ first_name: 'Paul', age: 33 }\r\n */\r\nexport const convertChangeData = (\r\n  columns: Columns,\r\n  record: Record,\r\n  options: { skipTypes?: string[] } = {}\r\n): Record => {\r\n  const skipTypes = options.skipTypes ?? []\r\n\r\n  return Object.keys(record).reduce((acc, rec_key) => {\r\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes)\r\n    return acc\r\n  }, {} as Record)\r\n}\r\n\r\n/**\r\n * Converts the value of an individual column.\r\n *\r\n * @param {String} columnName The column that you want to convert\r\n * @param {{name: String, type: String}[]} columns All of the columns\r\n * @param {Object} record The map of string values\r\n * @param {Array} skipTypes An array of types that should not be converted\r\n * @return {object} Useless information\r\n *\r\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\r\n * //=> 33\r\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\r\n * //=> \"33\"\r\n */\r\nexport const convertColumn = (\r\n  columnName: string,\r\n  columns: Columns,\r\n  record: Record,\r\n  skipTypes: string[]\r\n): RecordValue => {\r\n  const column = columns.find((x) => x.name === columnName)\r\n  const colType = column?.type\r\n  const value = record[columnName]\r\n\r\n  if (colType && !skipTypes.includes(colType)) {\r\n    return convertCell(colType, value)\r\n  }\r\n\r\n  return noop(value)\r\n}\r\n\r\n/**\r\n * If the value of the cell is `null`, returns null.\r\n * Otherwise converts the string value to the correct type.\r\n * @param {String} type A postgres column type\r\n * @param {String} value The cell value\r\n *\r\n * @example convertCell('bool', 't')\r\n * //=> true\r\n * @example convertCell('int8', '10')\r\n * //=> 10\r\n * @example convertCell('_int4', '{1,2,3,4}')\r\n * //=> [1,2,3,4]\r\n */\r\nexport const convertCell = (type: string, value: RecordValue): RecordValue => {\r\n  // if data type is an array\r\n  if (type.charAt(0) === '_') {\r\n    const dataType = type.slice(1, type.length)\r\n    return toArray(value, dataType)\r\n  }\r\n\r\n  // If not null, convert to correct type.\r\n  switch (type) {\r\n    case PostgresTypes.bool:\r\n      return toBoolean(value)\r\n    case PostgresTypes.float4:\r\n    case PostgresTypes.float8:\r\n    case PostgresTypes.int2:\r\n    case PostgresTypes.int4:\r\n    case PostgresTypes.int8:\r\n    case PostgresTypes.numeric:\r\n    case PostgresTypes.oid:\r\n      return toNumber(value)\r\n    case PostgresTypes.json:\r\n    case PostgresTypes.jsonb:\r\n      return toJson(value)\r\n    case PostgresTypes.timestamp:\r\n      return toTimestampString(value) // Format to be consistent with PostgREST\r\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\r\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\r\n    case PostgresTypes.daterange:\r\n    case PostgresTypes.int4range:\r\n    case PostgresTypes.int8range:\r\n    case PostgresTypes.money:\r\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\r\n    case PostgresTypes.text:\r\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\r\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\r\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\r\n    case PostgresTypes.tsrange:\r\n    case PostgresTypes.tstzrange:\r\n      return noop(value)\r\n    default:\r\n      // Return the value for remaining types\r\n      return noop(value)\r\n  }\r\n}\r\n\r\nconst noop = (value: RecordValue): RecordValue => {\r\n  return value\r\n}\r\nexport const toBoolean = (value: RecordValue): RecordValue => {\r\n  switch (value) {\r\n    case 't':\r\n      return true\r\n    case 'f':\r\n      return false\r\n    default:\r\n      return value\r\n  }\r\n}\r\nexport const toNumber = (value: RecordValue): RecordValue => {\r\n  if (typeof value === 'string') {\r\n    const parsedValue = parseFloat(value)\r\n    if (!Number.isNaN(parsedValue)) {\r\n      return parsedValue\r\n    }\r\n  }\r\n  return value\r\n}\r\nexport const toJson = (value: RecordValue): RecordValue => {\r\n  if (typeof value === 'string') {\r\n    try {\r\n      return JSON.parse(value)\r\n    } catch (error) {\r\n      console.log(`JSON parse error: ${error}`)\r\n      return value\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\n/**\r\n * Converts a Postgres Array into a native JS array\r\n *\r\n * @example toArray('{}', 'int4')\r\n * //=> []\r\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\r\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\r\n * @example toArray([1,2,3,4], 'int4')\r\n * //=> [1,2,3,4]\r\n */\r\nexport const toArray = (value: RecordValue, type: string): RecordValue => {\r\n  if (typeof value !== 'string') {\r\n    return value\r\n  }\r\n\r\n  const lastIdx = value.length - 1\r\n  const closeBrace = value[lastIdx]\r\n  const openBrace = value[0]\r\n\r\n  // Confirm value is a Postgres array by checking curly brackets\r\n  if (openBrace === '{' && closeBrace === '}') {\r\n    let arr\r\n    const valTrim = value.slice(1, lastIdx)\r\n\r\n    // TODO: find a better solution to separate Postgres array data\r\n    try {\r\n      arr = JSON.parse('[' + valTrim + ']')\r\n    } catch (_) {\r\n      // WARNING: splitting on comma does not cover all edge cases\r\n      arr = valTrim ? valTrim.split(',') : []\r\n    }\r\n\r\n    return arr.map((val: BaseValue) => convertCell(type, val))\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\r\n * See https://github.com/supabase/supabase/issues/18\r\n *\r\n * @example toTimestampString('2019-09-10 00:00:00')\r\n * //=> '2019-09-10T00:00:00'\r\n */\r\nexport const toTimestampString = (value: RecordValue): RecordValue => {\r\n  if (typeof value === 'string') {\r\n    return value.replace(' ', 'T')\r\n  }\r\n\r\n  return value\r\n}\r\n", "import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\r\nimport Push from './lib/push'\r\nimport type RealtimeClient from './RealtimeClient'\r\nimport Timer from './lib/timer'\r\nimport RealtimePresence, {\r\n  REALTIME_PRESENCE_LISTEN_EVENTS,\r\n} from './RealtimePresence'\r\nimport type {\r\n  RealtimePresenceJoinPayload,\r\n  RealtimePresenceLeavePayload,\r\n  RealtimePresenceState,\r\n} from './RealtimePresence'\r\nimport * as Transformers from './lib/transformers'\r\n\r\nexport type RealtimeChannelOptions = {\r\n  config: {\r\n    /**\r\n     * self option enables client to receive message it broadcast\r\n     * ack option instructs server to acknowledge that broadcast message was received\r\n     */\r\n    broadcast?: { self?: boolean; ack?: boolean }\r\n    /**\r\n     * key option is used to track presence payload across clients\r\n     */\r\n    presence?: { key?: string }\r\n  }\r\n}\r\n\r\ntype RealtimePostgresChangesPayloadBase = {\r\n  schema: string\r\n  table: string\r\n  commit_timestamp: string\r\n  errors: string[]\r\n}\r\n\r\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\r\n  RealtimePostgresChangesPayloadBase & {\r\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\r\n    new: T\r\n    old: {}\r\n  }\r\n\r\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\r\n  RealtimePostgresChangesPayloadBase & {\r\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\r\n    new: T\r\n    old: Partial<T>\r\n  }\r\n\r\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\r\n  RealtimePostgresChangesPayloadBase & {\r\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\r\n    new: {}\r\n    old: Partial<T>\r\n  }\r\n\r\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\r\n  | RealtimePostgresInsertPayload<T>\r\n  | RealtimePostgresUpdatePayload<T>\r\n  | RealtimePostgresDeletePayload<T>\r\n\r\nexport type RealtimePostgresChangesFilter<\r\n  T extends `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT}`\r\n> = {\r\n  /**\r\n   * The type of database change to listen to.\r\n   */\r\n  event: T\r\n  /**\r\n   * The database schema to listen to.\r\n   */\r\n  schema: string\r\n  /**\r\n   * The database table to listen to.\r\n   */\r\n  table?: string\r\n  /**\r\n   * Receive database changes when filter is matched.\r\n   */\r\n  filter?: string\r\n}\r\n\r\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'rate limited'\r\n\r\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\r\n  ALL = '*',\r\n  INSERT = 'INSERT',\r\n  UPDATE = 'UPDATE',\r\n  DELETE = 'DELETE',\r\n}\r\n\r\nexport enum REALTIME_LISTEN_TYPES {\r\n  BROADCAST = 'broadcast',\r\n  PRESENCE = 'presence',\r\n  /**\r\n   * listen to Postgres changes.\r\n   */\r\n  POSTGRES_CHANGES = 'postgres_changes',\r\n}\r\n\r\nexport enum REALTIME_SUBSCRIBE_STATES {\r\n  SUBSCRIBED = 'SUBSCRIBED',\r\n  TIMED_OUT = 'TIMED_OUT',\r\n  CLOSED = 'CLOSED',\r\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\r\n}\r\n\r\n/** A channel is the basic building block of Realtime\r\n * and narrows the scope of data flow to subscribed clients.\r\n * You can think of a channel as a chatroom where participants are able to see who's online\r\n * and send and receive messages.\r\n **/\r\nexport default class RealtimeChannel {\r\n  bindings: {\r\n    [key: string]: {\r\n      type: string\r\n      filter: { [key: string]: any }\r\n      callback: Function\r\n      id?: string\r\n    }[]\r\n  } = {}\r\n  timeout: number\r\n  state = CHANNEL_STATES.closed\r\n  joinedOnce = false\r\n  joinPush: Push\r\n  rejoinTimer: Timer\r\n  pushBuffer: Push[] = []\r\n  presence: RealtimePresence\r\n\r\n  constructor(\r\n    /** Topic name can be any string. */\r\n    public topic: string,\r\n    public params: RealtimeChannelOptions = { config: {} },\r\n    public socket: RealtimeClient\r\n  ) {\r\n    this.params.config = {\r\n      ...{\r\n        broadcast: { ack: false, self: false },\r\n        presence: { key: '' },\r\n      },\r\n      ...params.config,\r\n    }\r\n    this.timeout = this.socket.timeout\r\n    this.joinPush = new Push(\r\n      this,\r\n      CHANNEL_EVENTS.join,\r\n      this.params,\r\n      this.timeout\r\n    )\r\n    this.rejoinTimer = new Timer(\r\n      () => this._rejoinUntilConnected(),\r\n      this.socket.reconnectAfterMs\r\n    )\r\n    this.joinPush.receive('ok', () => {\r\n      this.state = CHANNEL_STATES.joined\r\n      this.rejoinTimer.reset()\r\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\r\n      this.pushBuffer = []\r\n    })\r\n    this._onClose(() => {\r\n      this.rejoinTimer.reset()\r\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\r\n      this.state = CHANNEL_STATES.closed\r\n      this.socket._remove(this)\r\n    })\r\n    this._onError((reason: string) => {\r\n      if (this._isLeaving() || this._isClosed()) {\r\n        return\r\n      }\r\n      this.socket.log('channel', `error ${this.topic}`, reason)\r\n      this.state = CHANNEL_STATES.errored\r\n      this.rejoinTimer.scheduleTimeout()\r\n    })\r\n    this.joinPush.receive('timeout', () => {\r\n      if (!this._isJoining()) {\r\n        return\r\n      }\r\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\r\n      this.state = CHANNEL_STATES.errored\r\n      this.rejoinTimer.scheduleTimeout()\r\n    })\r\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\r\n      this._trigger(this._replyEventName(ref), payload)\r\n    })\r\n\r\n    this.presence = new RealtimePresence(this)\r\n  }\r\n\r\n  /** Subscribe registers your client with the server */\r\n  subscribe(\r\n    callback?: (status: `${REALTIME_SUBSCRIBE_STATES}`, err?: Error) => void,\r\n    timeout = this.timeout\r\n  ): RealtimeChannel {\r\n    if (this.joinedOnce) {\r\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\r\n    } else {\r\n      const {\r\n        config: { broadcast, presence },\r\n      } = this.params\r\n      this._onError((e: Error) => callback && callback('CHANNEL_ERROR', e))\r\n      this._onClose(() => callback && callback('CLOSED'))\r\n\r\n      const accessTokenPayload: { access_token?: string } = {}\r\n      const config = {\r\n        broadcast,\r\n        presence,\r\n        postgres_changes:\r\n          this.bindings.postgres_changes?.map((r) => r.filter) ?? [],\r\n      }\r\n\r\n      if (this.socket.accessToken) {\r\n        accessTokenPayload.access_token = this.socket.accessToken\r\n      }\r\n\r\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\r\n\r\n      this.joinedOnce = true\r\n      this._rejoin(timeout)\r\n\r\n      this.joinPush\r\n        .receive(\r\n          'ok',\r\n          ({\r\n            postgres_changes: serverPostgresFilters,\r\n          }: {\r\n            postgres_changes: {\r\n              id: string\r\n              event: string\r\n              schema?: string\r\n              table?: string\r\n              filter?: string\r\n            }[]\r\n          }) => {\r\n            this.socket.accessToken &&\r\n              this.socket.setAuth(this.socket.accessToken)\r\n\r\n            if (serverPostgresFilters === undefined) {\r\n              callback && callback('SUBSCRIBED')\r\n              return\r\n            } else {\r\n              const clientPostgresBindings = this.bindings.postgres_changes\r\n              const bindingsLen = clientPostgresBindings?.length ?? 0\r\n              const newPostgresBindings = []\r\n\r\n              for (let i = 0; i < bindingsLen; i++) {\r\n                const clientPostgresBinding = clientPostgresBindings[i]\r\n                const {\r\n                  filter: { event, schema, table, filter },\r\n                } = clientPostgresBinding\r\n                const serverPostgresFilter =\r\n                  serverPostgresFilters && serverPostgresFilters[i]\r\n\r\n                if (\r\n                  serverPostgresFilter &&\r\n                  serverPostgresFilter.event === event &&\r\n                  serverPostgresFilter.schema === schema &&\r\n                  serverPostgresFilter.table === table &&\r\n                  serverPostgresFilter.filter === filter\r\n                ) {\r\n                  newPostgresBindings.push({\r\n                    ...clientPostgresBinding,\r\n                    id: serverPostgresFilter.id,\r\n                  })\r\n                } else {\r\n                  this.unsubscribe()\r\n                  callback &&\r\n                    callback(\r\n                      'CHANNEL_ERROR',\r\n                      new Error(\r\n                        'mismatch between server and client bindings for postgres changes'\r\n                      )\r\n                    )\r\n                  return\r\n                }\r\n              }\r\n\r\n              this.bindings.postgres_changes = newPostgresBindings\r\n\r\n              callback && callback('SUBSCRIBED')\r\n              return\r\n            }\r\n          }\r\n        )\r\n        .receive('error', (error: { [key: string]: any }) => {\r\n          callback &&\r\n            callback(\r\n              'CHANNEL_ERROR',\r\n              new Error(\r\n                JSON.stringify(Object.values(error).join(', ') || 'error')\r\n              )\r\n            )\r\n          return\r\n        })\r\n        .receive('timeout', () => {\r\n          callback && callback('TIMED_OUT')\r\n          return\r\n        })\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  presenceState<\r\n    T extends { [key: string]: any } = {}\r\n  >(): RealtimePresenceState<T> {\r\n    return this.presence.state as RealtimePresenceState<T>\r\n  }\r\n\r\n  async track(\r\n    payload: { [key: string]: any },\r\n    opts: { [key: string]: any } = {}\r\n  ): Promise<RealtimeChannelSendResponse> {\r\n    return await this.send(\r\n      {\r\n        type: 'presence',\r\n        event: 'track',\r\n        payload,\r\n      },\r\n      opts.timeout || this.timeout\r\n    )\r\n  }\r\n\r\n  async untrack(\r\n    opts: { [key: string]: any } = {}\r\n  ): Promise<RealtimeChannelSendResponse> {\r\n    return await this.send(\r\n      {\r\n        type: 'presence',\r\n        event: 'untrack',\r\n      },\r\n      opts\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Creates an event handler that listens to changes.\r\n   */\r\n  on(\r\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\r\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\r\n    callback: () => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\r\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\r\n    callback: (payload: RealtimePresenceJoinPayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\r\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\r\n    callback: (payload: RealtimePresenceLeavePayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\r\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\r\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\r\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\r\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\r\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\r\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\r\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\r\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\r\n  ): RealtimeChannel\r\n  /**\r\n   * The following is placed here to display on supabase.com/docs/reference/javascript/subscribe.\r\n   * @param type One of \"broadcast\", \"presence\", or \"postgres_changes\".\r\n   * @param filter Custom object specific to the Realtime feature detailing which payloads to receive.\r\n   * @param callback Function to be invoked when event handler is triggered.\r\n   */\r\n  on(\r\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\r\n    filter: { event: string },\r\n    callback: (payload: {\r\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\r\n      event: string\r\n      [key: string]: any\r\n    }) => void\r\n  ): RealtimeChannel\r\n  on(\r\n    type: `${REALTIME_LISTEN_TYPES}`,\r\n    filter: { event: string; [key: string]: string },\r\n    callback: (payload: any) => void\r\n  ): RealtimeChannel {\r\n    return this._on(type, filter, callback)\r\n  }\r\n\r\n  send(\r\n    payload: { type: string; [key: string]: any },\r\n    opts: { [key: string]: any } = {}\r\n  ): Promise<RealtimeChannelSendResponse> {\r\n    return new Promise((resolve) => {\r\n      const push = this._push(\r\n        payload.type,\r\n        payload,\r\n        opts.timeout || this.timeout\r\n      )\r\n\r\n      if (push.rateLimited) {\r\n        resolve('rate limited')\r\n      }\r\n\r\n      if (\r\n        payload.type === 'broadcast' &&\r\n        !this.params?.config?.broadcast?.ack\r\n      ) {\r\n        resolve('ok')\r\n      }\r\n\r\n      push.receive('ok', () => resolve('ok'))\r\n      push.receive('timeout', () => resolve('timed out'))\r\n    })\r\n  }\r\n\r\n  updateJoinPayload(payload: { [key: string]: any }): void {\r\n    this.joinPush.updatePayload(payload)\r\n  }\r\n\r\n  /**\r\n   * Leaves the channel.\r\n   *\r\n   * Unsubscribes from server events, and instructs channel to terminate on server.\r\n   * Triggers onClose() hooks.\r\n   *\r\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\r\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\r\n   */\r\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\r\n    this.state = CHANNEL_STATES.leaving\r\n    const onClose = () => {\r\n      this.socket.log('channel', `leave ${this.topic}`)\r\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\r\n    }\r\n\r\n    this.rejoinTimer.reset()\r\n    // Destroy joinPush to avoid connection timeouts during unscription phase\r\n    this.joinPush.destroy()\r\n\r\n    return new Promise((resolve) => {\r\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\r\n\r\n      leavePush\r\n        .receive('ok', () => {\r\n          onClose()\r\n          resolve('ok')\r\n        })\r\n        .receive('timeout', () => {\r\n          onClose()\r\n          resolve('timed out')\r\n        })\r\n        .receive('error', () => {\r\n          resolve('error')\r\n        })\r\n\r\n      leavePush.send()\r\n\r\n      if (!this._canPush()) {\r\n        leavePush.trigger('ok', {})\r\n      }\r\n    })\r\n  }\r\n\r\n  /** @internal */\r\n  _push(\r\n    event: string,\r\n    payload: { [key: string]: any },\r\n    timeout = this.timeout\r\n  ) {\r\n    if (!this.joinedOnce) {\r\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\r\n    }\r\n    let pushEvent = new Push(this, event, payload, timeout)\r\n    if (this._canPush()) {\r\n      pushEvent.send()\r\n    } else {\r\n      pushEvent.startTimeout()\r\n      this.pushBuffer.push(pushEvent)\r\n    }\r\n\r\n    return pushEvent\r\n  }\r\n\r\n  /**\r\n   * Overridable message hook\r\n   *\r\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\r\n   * Must return the payload, modified or unmodified.\r\n   *\r\n   * @internal\r\n   */\r\n  _onMessage(_event: string, payload: any, _ref?: string) {\r\n    return payload\r\n  }\r\n\r\n  /** @internal */\r\n  _isMember(topic: string): boolean {\r\n    return this.topic === topic\r\n  }\r\n\r\n  /** @internal */\r\n  _joinRef(): string {\r\n    return this.joinPush.ref\r\n  }\r\n\r\n  /** @internal */\r\n  _trigger(type: string, payload?: any, ref?: string) {\r\n    const typeLower = type.toLocaleLowerCase()\r\n    const { close, error, leave, join } = CHANNEL_EVENTS\r\n    const events: string[] = [close, error, leave, join]\r\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\r\n      return\r\n    }\r\n    let handledPayload = this._onMessage(typeLower, payload, ref)\r\n    if (payload && !handledPayload) {\r\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\r\n    }\r\n\r\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\r\n      this.bindings.postgres_changes\r\n        ?.filter((bind) => {\r\n          return (\r\n            bind.filter?.event === '*' ||\r\n            bind.filter?.event?.toLocaleLowerCase() === typeLower\r\n          )\r\n        })\r\n        .map((bind) => bind.callback(handledPayload, ref))\r\n    } else {\r\n      this.bindings[typeLower]\r\n        ?.filter((bind) => {\r\n          if (\r\n            ['broadcast', 'presence', 'postgres_changes'].includes(typeLower)\r\n          ) {\r\n            if ('id' in bind) {\r\n              const bindId = bind.id\r\n              const bindEvent = bind.filter?.event\r\n              return (\r\n                bindId &&\r\n                payload.ids?.includes(bindId) &&\r\n                (bindEvent === '*' ||\r\n                  bindEvent?.toLocaleLowerCase() ===\r\n                    payload.data?.type.toLocaleLowerCase())\r\n              )\r\n            } else {\r\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\r\n              return (\r\n                bindEvent === '*' ||\r\n                bindEvent === payload?.event?.toLocaleLowerCase()\r\n              )\r\n            }\r\n          } else {\r\n            return bind.type.toLocaleLowerCase() === typeLower\r\n          }\r\n        })\r\n        .map((bind) => {\r\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\r\n            const postgresChanges = handledPayload.data\r\n            const { schema, table, commit_timestamp, type, errors } =\r\n              postgresChanges\r\n            const enrichedPayload = {\r\n              schema: schema,\r\n              table: table,\r\n              commit_timestamp: commit_timestamp,\r\n              eventType: type,\r\n              new: {},\r\n              old: {},\r\n              errors: errors,\r\n            }\r\n            handledPayload = {\r\n              ...enrichedPayload,\r\n              ...this._getPayloadRecords(postgresChanges),\r\n            }\r\n          }\r\n          bind.callback(handledPayload, ref)\r\n        })\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  _isClosed(): boolean {\r\n    return this.state === CHANNEL_STATES.closed\r\n  }\r\n\r\n  /** @internal */\r\n  _isJoined(): boolean {\r\n    return this.state === CHANNEL_STATES.joined\r\n  }\r\n\r\n  /** @internal */\r\n  _isJoining(): boolean {\r\n    return this.state === CHANNEL_STATES.joining\r\n  }\r\n\r\n  /** @internal */\r\n  _isLeaving(): boolean {\r\n    return this.state === CHANNEL_STATES.leaving\r\n  }\r\n\r\n  /** @internal */\r\n  _replyEventName(ref: string): string {\r\n    return `chan_reply_${ref}`\r\n  }\r\n\r\n  /** @internal */\r\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\r\n    const typeLower = type.toLocaleLowerCase()\r\n\r\n    const binding = {\r\n      type: typeLower,\r\n      filter: filter,\r\n      callback: callback,\r\n    }\r\n\r\n    if (this.bindings[typeLower]) {\r\n      this.bindings[typeLower].push(binding)\r\n    } else {\r\n      this.bindings[typeLower] = [binding]\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /** @internal */\r\n  _off(type: string, filter: { [key: string]: any }) {\r\n    const typeLower = type.toLocaleLowerCase()\r\n\r\n    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\r\n      return !(\r\n        bind.type?.toLocaleLowerCase() === typeLower &&\r\n        RealtimeChannel.isEqual(bind.filter, filter)\r\n      )\r\n    })\r\n    return this\r\n  }\r\n\r\n  /** @internal */\r\n  private static isEqual(\r\n    obj1: { [key: string]: string },\r\n    obj2: { [key: string]: string }\r\n  ) {\r\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\r\n      return false\r\n    }\r\n\r\n    for (const k in obj1) {\r\n      if (obj1[k] !== obj2[k]) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  /** @internal */\r\n  private _rejoinUntilConnected() {\r\n    this.rejoinTimer.scheduleTimeout()\r\n    if (this.socket.isConnected()) {\r\n      this._rejoin()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a callback that will be executed when the channel closes.\r\n   *\r\n   * @internal\r\n   */\r\n  private _onClose(callback: Function) {\r\n    this._on(CHANNEL_EVENTS.close, {}, callback)\r\n  }\r\n\r\n  /**\r\n   * Registers a callback that will be executed when the channel encounteres an error.\r\n   *\r\n   * @internal\r\n   */\r\n  private _onError(callback: Function) {\r\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the socket is connected and the channel has been joined.\r\n   *\r\n   * @internal\r\n   */\r\n  private _canPush(): boolean {\r\n    return this.socket.isConnected() && this._isJoined()\r\n  }\r\n\r\n  /** @internal */\r\n  private _rejoin(timeout = this.timeout): void {\r\n    if (this._isLeaving()) {\r\n      return\r\n    }\r\n    this.socket._leaveOpenTopic(this.topic)\r\n    this.state = CHANNEL_STATES.joining\r\n    this.joinPush.resend(timeout)\r\n  }\r\n\r\n  /** @internal */\r\n  private _getPayloadRecords(payload: any) {\r\n    const records = {\r\n      new: {},\r\n      old: {},\r\n    }\r\n\r\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\r\n      records.new = Transformers.convertChangeData(\r\n        payload.columns,\r\n        payload.record\r\n      )\r\n    }\r\n\r\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\r\n      records.old = Transformers.convertChangeData(\r\n        payload.columns,\r\n        payload.old_record\r\n      )\r\n    }\r\n\r\n    return records\r\n  }\r\n}\r\n", "export class StorageError extends Error {\r\n  protected __isStorageError = true\r\n\r\n  constructor(message: string) {\r\n    super(message)\r\n    this.name = 'StorageError'\r\n  }\r\n}\r\n\r\nexport function isStorageError(error: unknown): error is StorageError {\r\n  return typeof error === 'object' && error !== null && '__isStorageError' in error\r\n}\r\n\r\nexport class StorageApiError extends StorageError {\r\n  status: number\r\n\r\n  constructor(message: string, status: number) {\r\n    super(message)\r\n    this.name = 'StorageApiError'\r\n    this.status = status\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: this.name,\r\n      message: this.message,\r\n      status: this.status,\r\n    }\r\n  }\r\n}\r\n\r\nexport class StorageUnknownError extends StorageError {\r\n  originalError: unknown\r\n\r\n  constructor(message: string, originalError: unknown) {\r\n    super(message)\r\n    this.name = 'StorageUnknownError'\r\n    this.originalError = originalError\r\n  }\r\n}\r\n", "type Fetch = typeof fetch\r\n\r\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\r\n  let _fetch: Fetch\r\n  if (customFetch) {\r\n    _fetch = customFetch\r\n  } else if (typeof fetch === 'undefined') {\r\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\r\n  } else {\r\n    _fetch = fetch\r\n  }\r\n  return (...args) => _fetch(...args)\r\n}\r\n\r\nexport const resolveResponse = async () => {\r\n  if (typeof Response === 'undefined') {\r\n    return (await import('cross-fetch')).Response\r\n  }\r\n\r\n  return Response\r\n}\r\n", "import { StorageApiError, StorageUnknownError } from './errors'\r\nimport { resolveResponse } from './helpers'\r\nimport { FetchParameters } from './types'\r\n\r\nexport type Fetch = typeof fetch\r\n\r\nexport interface FetchOptions {\r\n  headers?: {\r\n    [key: string]: string\r\n  }\r\n  noResolveJson?: boolean\r\n}\r\n\r\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\r\n\r\nconst _getErrorMessage = (err: any): string =>\r\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\r\n\r\nconst handleError = async (error: unknown, reject: (reason?: any) => void) => {\r\n  const Res = await resolveResponse()\r\n\r\n  if (error instanceof Res) {\r\n    error\r\n      .json()\r\n      .then((err) => {\r\n        reject(new StorageApiError(_getErrorMessage(err), error.status || 500))\r\n      })\r\n      .catch((err) => {\r\n        reject(new StorageUnknownError(_getErrorMessage(err), err))\r\n      })\r\n  } else {\r\n    reject(new StorageUnknownError(_getErrorMessage(error), error))\r\n  }\r\n}\r\n\r\nconst _getRequestParams = (\r\n  method: RequestMethodType,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters,\r\n  body?: object\r\n) => {\r\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\r\n\r\n  if (method === 'GET') {\r\n    return params\r\n  }\r\n\r\n  params.headers = { 'Content-Type': 'application/json', ...options?.headers }\r\n  params.body = JSON.stringify(body)\r\n  return { ...params, ...parameters }\r\n}\r\n\r\nasync function _handleRequest(\r\n  fetcher: Fetch,\r\n  method: RequestMethodType,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters,\r\n  body?: object\r\n): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    fetcher(url, _getRequestParams(method, options, parameters, body))\r\n      .then((result) => {\r\n        if (!result.ok) throw result\r\n        if (options?.noResolveJson) return result\r\n        return result.json()\r\n      })\r\n      .then((data) => resolve(data))\r\n      .catch((error) => handleError(error, reject))\r\n  })\r\n}\r\n\r\nexport async function get(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\r\n}\r\n\r\nexport async function post(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\r\n}\r\n\r\nexport async function put(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\r\n}\r\n\r\nexport async function remove(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\r\n}\r\n", "import { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport {\r\n  FileObject,\r\n  FileOptions,\r\n  SearchOptions,\r\n  FetchParameters,\r\n  TransformOptions,\r\n} from '../lib/types'\r\n\r\nconst DEFAULT_SEARCH_OPTIONS = {\r\n  limit: 100,\r\n  offset: 0,\r\n  sortBy: {\r\n    column: 'name',\r\n    order: 'asc',\r\n  },\r\n}\r\n\r\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\r\n  cacheControl: '3600',\r\n  contentType: 'text/plain;charset=UTF-8',\r\n  upsert: false,\r\n}\r\n\r\ntype FileBody =\r\n  | ArrayBuffer\r\n  | ArrayBufferView\r\n  | Blob\r\n  | Buffer\r\n  | File\r\n  | FormData\r\n  | NodeJS.ReadableStream\r\n  | ReadableStream<Uint8Array>\r\n  | URLSearchParams\r\n  | string\r\n\r\nexport default class StorageFileApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected bucketId?: string\r\n  protected fetch: Fetch\r\n\r\n  constructor(\r\n    url: string,\r\n    headers: { [key: string]: string } = {},\r\n    bucketId?: string,\r\n    fetch?: Fetch\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.bucketId = bucketId\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  private async uploadOrUpdate(\r\n    method: 'POST' | 'PUT',\r\n    path: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let body\r\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\r\n      const headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\r\n      }\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n      }\r\n\r\n      const cleanPath = this._removeEmptyFolders(path)\r\n      const _path = this._getFinalPath(cleanPath)\r\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\r\n        method,\r\n        body: body as BodyInit,\r\n        headers,\r\n        ...(options?.duplex ? { duplex: options.duplex } : {}),\r\n      })\r\n\r\n      if (res.ok) {\r\n        return {\r\n          data: { path: cleanPath },\r\n          error: null,\r\n        }\r\n      } else {\r\n        const error = await res.json()\r\n        return { data: null, error }\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket.\r\n   *\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async upload(\r\n    path: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Upload a file with a token generated from `createSignedUploadUrl`.\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param token The token generated from `createSignedUploadUrl`\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async uploadToSignedUrl(\r\n    path: string,\r\n    token: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ) {\r\n    const cleanPath = this._removeEmptyFolders(path)\r\n    const _path = this._getFinalPath(cleanPath)\r\n\r\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\r\n    url.searchParams.set('token', token)\r\n\r\n    try {\r\n      let body\r\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\r\n      const headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...{ 'x-upsert': String(options.upsert as boolean) },\r\n      }\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n      }\r\n\r\n      const res = await this.fetch(url.toString(), {\r\n        method: 'PUT',\r\n        body: body as BodyInit,\r\n        headers,\r\n      })\r\n\r\n      if (res.ok) {\r\n        return {\r\n          data: { path: cleanPath },\r\n          error: null,\r\n        }\r\n      } else {\r\n        const error = await res.json()\r\n        return { data: null, error }\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed upload URL.\r\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\r\n   * They are valid for one minute.\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   */\r\n  async createSignedUploadUrl(\r\n    path: string\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string; token: string; path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/upload/sign/${_path}`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n\r\n      const url = new URL(this.url + data.url)\r\n\r\n      const token = url.searchParams.get('token')\r\n\r\n      if (!token) {\r\n        throw new StorageError('No token returned by API')\r\n      }\r\n\r\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async update(\r\n    path: string,\r\n    fileBody:\r\n      | ArrayBuffer\r\n      | ArrayBufferView\r\n      | Blob\r\n      | Buffer\r\n      | File\r\n      | FormData\r\n      | NodeJS.ReadableStream\r\n      | ReadableStream<Uint8Array>\r\n      | URLSearchParams\r\n      | string,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Moves an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n   */\r\n  async move(\r\n    fromPath: string,\r\n    toPath: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/move`,\r\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copies an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n   */\r\n  async copy(\r\n    fromPath: string,\r\n    toPath: string\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/copy`,\r\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\r\n        { headers: this.headers }\r\n      )\r\n      return { data: { path: data.Key }, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async createSignedUrl(\r\n    path: string,\r\n    expiresIn: number,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      let data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${_path}`,\r\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\r\n        { headers: this.headers }\r\n      )\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\r\n      data = { signedUrl }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   */\r\n  async createSignedUrls(\r\n    paths: string[],\r\n    expiresIn: number,\r\n    options?: { download: string | boolean }\r\n  ): Promise<\r\n    | {\r\n        data: { error: string | null; path: string | null; signedUrl: string }[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${this.bucketId}`,\r\n        { expiresIn, paths },\r\n        { headers: this.headers }\r\n      )\r\n\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      return {\r\n        data: data.map((datum: { signedURL: string }) => ({\r\n          ...datum,\r\n          signedUrl: datum.signedURL\r\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\r\n            : null,\r\n        })),\r\n        error: null,\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n   *\r\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async download(\r\n    path: string,\r\n    options?: { transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: Blob\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\r\n\r\n    try {\r\n      const _path = this._getFinalPath(path)\r\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\r\n        headers: this.headers,\r\n        noResolveJson: true,\r\n      })\r\n      const data = await res.blob()\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n   *\r\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  getPublicUrl(\r\n    path: string,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): { data: { publicUrl: string } } {\r\n    const _path = this._getFinalPath(path)\r\n    const _queryString = []\r\n\r\n    const downloadQueryParam = options?.download\r\n      ? `download=${options.download === true ? '' : options.download}`\r\n      : ''\r\n\r\n    if (downloadQueryParam !== '') {\r\n      _queryString.push(downloadQueryParam)\r\n    }\r\n\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n\r\n    if (transformationQuery !== '') {\r\n      _queryString.push(transformationQuery)\r\n    }\r\n\r\n    let queryString = _queryString.join('&')\r\n    if (queryString !== '') {\r\n      queryString = `?${queryString}`\r\n    }\r\n\r\n    return {\r\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes files within the same bucket\r\n   *\r\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n   */\r\n  async remove(\r\n    paths: string[]\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/object/${this.bucketId}`,\r\n        { prefixes: paths },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file metadata\r\n   * @param id the file id to retrieve metadata\r\n   */\r\n  // async getMetadata(\r\n  //   id: string\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Update file metadata\r\n   * @param id the file id to update metadata\r\n   * @param meta the new file metadata\r\n   */\r\n  // async updateMetadata(\r\n  //   id: string,\r\n  //   meta: Metadata\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await post(\r\n  //       this.fetch,\r\n  //       `${this.url}/metadata/${id}`,\r\n  //       { ...meta },\r\n  //       { headers: this.headers }\r\n  //     )\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Lists all the files within a bucket.\r\n   * @param path The folder path.\r\n   */\r\n  async list(\r\n    path?: string,\r\n    options?: SearchOptions,\r\n    parameters?: FetchParameters\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/list/${this.bucketId}`,\r\n        body,\r\n        { headers: this.headers },\r\n        parameters\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private _getFinalPath(path: string) {\r\n    return `${this.bucketId}/${path}`\r\n  }\r\n\r\n  private _removeEmptyFolders(path: string) {\r\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\r\n  }\r\n\r\n  private transformOptsToQueryString(transform: TransformOptions) {\r\n    const params = []\r\n    if (transform.width) {\r\n      params.push(`width=${transform.width}`)\r\n    }\r\n\r\n    if (transform.height) {\r\n      params.push(`height=${transform.height}`)\r\n    }\r\n\r\n    if (transform.resize) {\r\n      params.push(`resize=${transform.resize}`)\r\n    }\r\n\r\n    if (transform.format) {\r\n      params.push(`format=${transform.format}`)\r\n    }\r\n\r\n    if (transform.quality) {\r\n      params.push(`quality=${transform.quality}`)\r\n    }\r\n\r\n    return params.join('&')\r\n  }\r\n}\r\n", "// generated by genversion\r\nexport const version = '2.5.1'\r\n", "import { version } from './version'\r\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` }\r\n", "import { DEFAULT_HEADERS } from '../lib/constants'\r\nimport { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport { Bucket } from '../lib/types'\r\n\r\nexport default class StorageBucketApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected fetch: Fetch\r\n\r\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\r\n    this.url = url\r\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of all Storage buckets within an existing project.\r\n   */\r\n  async listBuckets(): Promise<\r\n    | {\r\n        data: Bucket[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of an existing Storage bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to retrieve.\r\n   */\r\n  async getBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: Bucket\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are creating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n   * The global file size limit takes precedence over this value.\r\n   * The default value is null, which doesn't set a per bucket file size limit.\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n   * The default value is null, which allows files with all mime types to be uploaded.\r\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n   * @returns newly created bucket id\r\n   */\r\n  async createBucket(\r\n    id: string,\r\n    options: {\r\n      public: boolean\r\n      fileSizeLimit?: number | string | null\r\n      allowedMimeTypes?: string[] | null\r\n    } = {\r\n      public: false,\r\n    }\r\n  ): Promise<\r\n    | {\r\n        data: Pick<Bucket, 'name'>\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket`,\r\n        {\r\n          id,\r\n          name: id,\r\n          public: options.public,\r\n          file_size_limit: options.fileSizeLimit,\r\n          allowed_mime_types: options.allowedMimeTypes,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are updating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n   * The global file size limit takes precedence over this value.\r\n   * The default value is null, which doesn't set a per bucket file size limit.\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n   * The default value is null, which allows files with all mime types to be uploaded.\r\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n   */\r\n  async updateBucket(\r\n    id: string,\r\n    options: {\r\n      public: boolean\r\n      fileSizeLimit?: number | string | null\r\n      allowedMimeTypes?: string[] | null\r\n    }\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await put(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {\r\n          id,\r\n          name: id,\r\n          public: options.public,\r\n          file_size_limit: options.fileSizeLimit,\r\n          allowed_mime_types: options.allowedMimeTypes,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all objects inside a single bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to empty.\r\n   */\r\n  async emptyBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}/empty`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n   * You must first `empty()` the bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to delete.\r\n   */\r\n  async deleteBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n}\r\n", "import StorageFileApi from './packages/StorageFileApi'\r\nimport StorageBucketApi from './packages/StorageBucketApi'\r\nimport { Fetch } from './lib/fetch'\r\n\r\nexport class StorageClient extends StorageBucketApi {\r\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\r\n    super(url, headers, fetch)\r\n  }\r\n\r\n  /**\r\n   * Perform file operation in a bucket.\r\n   *\r\n   * @param id The bucket id to operate on.\r\n   */\r\n  from(id: string): StorageFileApi {\r\n    return new StorageFileApi(this.url, this.headers, id, this.fetch)\r\n  }\r\n}\r\n", "export const version = '2.21.0'\r\n", "// constants.ts\r\nimport { version } from './version'\r\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js/${version}` }\r\n", "import crossFetch, { Headers as CrossFetchHeaders } from 'cross-fetch'\r\n\r\ntype Fetch = typeof fetch\r\n\r\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\r\n  let _fetch: Fetch\r\n  if (customFetch) {\r\n    _fetch = customFetch\r\n  } else if (typeof fetch === 'undefined') {\r\n    _fetch = crossFetch as unknown as Fetch\r\n  } else {\r\n    _fetch = fetch\r\n  }\r\n  return (...args) => _fetch(...args)\r\n}\r\n\r\nexport const resolveHeadersConstructor = () => {\r\n  if (typeof Headers === 'undefined') {\r\n    return CrossFetchHeaders\r\n  }\r\n\r\n  return Headers\r\n}\r\n\r\nexport const fetchWithAuth = (\r\n  supabaseKey: string,\r\n  getAccessToken: () => Promise<string | null>,\r\n  customFetch?: Fetch\r\n): Fetch => {\r\n  const fetch = resolveFetch(customFetch)\r\n  const HeadersConstructor = resolveHeadersConstructor()\r\n\r\n  return async (input, init) => {\r\n    const accessToken = (await getAccessToken()) ?? supabaseKey\r\n    let headers = new HeadersConstructor(init?.headers)\r\n\r\n    if (!headers.has('apikey')) {\r\n      headers.set('apikey', supabaseKey)\r\n    }\r\n\r\n    if (!headers.has('Authorization')) {\r\n      headers.set('Authorization', `Bearer ${accessToken}`)\r\n    }\r\n\r\n    return fetch(input, { ...init, headers })\r\n  }\r\n}\r\n", "// helpers.ts\r\nimport { SupabaseClientOptions } from './types'\r\n\r\nexport function uuid() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c == 'x' ? r : (r & 0x3) | 0x8\r\n    return v.toString(16)\r\n  })\r\n}\r\n\r\nexport function stripTrailingSlash(url: string): string {\r\n  return url.replace(/\\/$/, '')\r\n}\r\n\r\nexport const isBrowser = () => typeof window !== 'undefined'\r\n\r\nexport function applySettingDefaults<\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database\r\n>(\r\n  options: SupabaseClientOptions<SchemaName>,\r\n  defaults: SupabaseClientOptions<any>\r\n): SupabaseClientOptions<SchemaName> {\r\n  const {\r\n    db: dbOptions,\r\n    auth: authOptions,\r\n    realtime: realtimeOptions,\r\n    global: globalOptions,\r\n  } = options\r\n  const {\r\n    db: DEFAULT_DB_OPTIONS,\r\n    auth: DEFAULT_AUTH_OPTIONS,\r\n    realtime: DEFAULT_REALTIME_OPTIONS,\r\n    global: DEFAULT_GLOBAL_OPTIONS,\r\n  } = defaults\r\n\r\n  return {\r\n    db: {\r\n      ...DEFAULT_DB_OPTIONS,\r\n      ...dbOptions,\r\n    },\r\n    auth: {\r\n      ...DEFAULT_AUTH_OPTIONS,\r\n      ...authOptions,\r\n    },\r\n    realtime: {\r\n      ...DEFAULT_REALTIME_OPTIONS,\r\n      ...realtimeOptions,\r\n    },\r\n    global: {\r\n      ...DEFAULT_GLOBAL_OPTIONS,\r\n      ...globalOptions,\r\n    },\r\n  }\r\n}\r\n", "import { SupportedStorage } from './types'\r\nexport function expiresAt(expiresIn: number) {\r\n  const timeNow = Math.round(Date.now() / 1000)\r\n  return timeNow + expiresIn\r\n}\r\n\r\nexport function uuid() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    const r = (Math.random() * 16) | 0,\r\n      v = c == 'x' ? r : (r & 0x3) | 0x8\r\n    return v.toString(16)\r\n  })\r\n}\r\n\r\nexport const isBrowser = () => typeof document !== 'undefined'\r\n\r\nconst localStorageWriteTests = {\r\n  tested: false,\r\n  writable: false,\r\n}\r\n\r\n/**\r\n * Checks whether localStorage is supported on this browser.\r\n */\r\nexport const supportsLocalStorage = () => {\r\n  if (!isBrowser()) {\r\n    return false\r\n  }\r\n\r\n  try {\r\n    if (typeof globalThis.localStorage !== 'object') {\r\n      return false\r\n    }\r\n  } catch (e) {\r\n    // DOM exception when accessing `localStorage`\r\n    return false\r\n  }\r\n\r\n  if (localStorageWriteTests.tested) {\r\n    return localStorageWriteTests.writable\r\n  }\r\n\r\n  const randomKey = `lswt-${Math.random()}${Math.random()}`\r\n\r\n  try {\r\n    globalThis.localStorage.setItem(randomKey, randomKey)\r\n    globalThis.localStorage.removeItem(randomKey)\r\n\r\n    localStorageWriteTests.tested = true\r\n    localStorageWriteTests.writable = true\r\n  } catch (e) {\r\n    // localStorage can't be written to\r\n    // https://www.chromium.org/for-testers/bug-reporting-guidelines/uncaught-securityerror-failed-to-read-the-localstorage-property-from-window-access-is-denied-for-this-document\r\n\r\n    localStorageWriteTests.tested = true\r\n    localStorageWriteTests.writable = false\r\n  }\r\n\r\n  return localStorageWriteTests.writable\r\n}\r\n\r\nexport function getParameterByName(name: string, url?: string) {\r\n  if (!url) url = window?.location?.href || ''\r\n  // eslint-disable-next-line no-useless-escape\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&')\r\n  const regex = new RegExp('[?&#]' + name + '(=([^&#]*)|&|#|$)'),\r\n    results = regex.exec(url)\r\n  if (!results) return null\r\n  if (!results[2]) return ''\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\r\n}\r\n\r\ntype Fetch = typeof fetch\r\n\r\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\r\n  let _fetch: Fetch\r\n  if (customFetch) {\r\n    _fetch = customFetch\r\n  } else if (typeof fetch === 'undefined') {\r\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\r\n  } else {\r\n    _fetch = fetch\r\n  }\r\n  return (...args) => _fetch(...args)\r\n}\r\n\r\nexport const looksLikeFetchResponse = (maybeResponse: unknown): maybeResponse is Response => {\r\n  return (\r\n    typeof maybeResponse === 'object' &&\r\n    maybeResponse !== null &&\r\n    'status' in maybeResponse &&\r\n    'ok' in maybeResponse &&\r\n    'json' in maybeResponse &&\r\n    typeof (maybeResponse as any).json === 'function'\r\n  )\r\n}\r\n\r\n// Storage helpers\r\nexport const setItemAsync = async (\r\n  storage: SupportedStorage,\r\n  key: string,\r\n  data: any\r\n): Promise<void> => {\r\n  await storage.setItem(key, JSON.stringify(data))\r\n}\r\n\r\nexport const getItemAsync = async (storage: SupportedStorage, key: string): Promise<unknown> => {\r\n  const value = await storage.getItem(key)\r\n\r\n  if (!value) {\r\n    return null\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(value)\r\n  } catch {\r\n    return value\r\n  }\r\n}\r\n\r\nexport const removeItemAsync = async (storage: SupportedStorage, key: string): Promise<void> => {\r\n  await storage.removeItem(key)\r\n}\r\n\r\nexport function decodeBase64URL(value: string): string {\r\n  const key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\r\n  let base64 = ''\r\n  let chr1, chr2, chr3\r\n  let enc1, enc2, enc3, enc4\r\n  let i = 0\r\n  value = value.replace('-', '+').replace('_', '/')\r\n\r\n  while (i < value.length) {\r\n    enc1 = key.indexOf(value.charAt(i++))\r\n    enc2 = key.indexOf(value.charAt(i++))\r\n    enc3 = key.indexOf(value.charAt(i++))\r\n    enc4 = key.indexOf(value.charAt(i++))\r\n    chr1 = (enc1 << 2) | (enc2 >> 4)\r\n    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2)\r\n    chr3 = ((enc3 & 3) << 6) | enc4\r\n    base64 = base64 + String.fromCharCode(chr1)\r\n\r\n    if (enc3 != 64 && chr2 != 0) {\r\n      base64 = base64 + String.fromCharCode(chr2)\r\n    }\r\n    if (enc4 != 64 && chr3 != 0) {\r\n      base64 = base64 + String.fromCharCode(chr3)\r\n    }\r\n  }\r\n  return base64\r\n}\r\n\r\n/**\r\n * A deferred represents some asynchronous work that is not yet finished, which\r\n * may or may not culminate in a value.\r\n * Taken from: https://github.com/mike-north/types/blob/master/src/async.ts\r\n */\r\nexport class Deferred<T = any> {\r\n  public static promiseConstructor: PromiseConstructor = Promise\r\n\r\n  public readonly promise!: PromiseLike<T>\r\n\r\n  public readonly resolve!: (value?: T | PromiseLike<T>) => void\r\n\r\n  public readonly reject!: (reason?: any) => any\r\n\r\n  public constructor() {\r\n    // eslint-disable-next-line @typescript-eslint/no-extra-semi\r\n    ;(this as any).promise = new Deferred.promiseConstructor((res, rej) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\r\n      ;(this as any).resolve = res\r\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\r\n      ;(this as any).reject = rej\r\n    })\r\n  }\r\n}\r\n\r\n// Taken from: https://stackoverflow.com/questions/38552003/how-to-decode-jwt-token-in-javascript-without-using-a-library\r\nexport function decodeJWTPayload(token: string) {\r\n  // Regex checks for base64url format\r\n  const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i\r\n\r\n  const parts = token.split('.')\r\n\r\n  if (parts.length !== 3) {\r\n    throw new Error('JWT is not valid: not a JWT structure')\r\n  }\r\n\r\n  if (!base64UrlRegex.test(parts[1])) {\r\n    throw new Error('JWT is not valid: payload is not in base64url format')\r\n  }\r\n\r\n  const base64Url = parts[1]\r\n  return JSON.parse(decodeBase64URL(base64Url))\r\n}\r\n\r\n/**\r\n * Creates a promise that resolves to null after some time.\r\n */\r\nexport function sleep(time: number): Promise<null> {\r\n  return new Promise((accept) => {\r\n    setTimeout(() => accept(null), time)\r\n  })\r\n}\r\n\r\n/**\r\n * Converts the provided async function into a retryable function. Each result\r\n * or thrown error is sent to the isRetryable function which should return true\r\n * if the function should run again.\r\n */\r\nexport function retryable<T>(\r\n  fn: (attempt: number) => Promise<T>,\r\n  isRetryable: (attempt: number, error: any | null, result?: T) => boolean\r\n): Promise<T> {\r\n  const promise = new Promise<T>((accept, reject) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-extra-semi\r\n    ;(async () => {\r\n      for (let attempt = 0; attempt < Infinity; attempt++) {\r\n        try {\r\n          const result = await fn(attempt)\r\n\r\n          if (!isRetryable(attempt, null, result)) {\r\n            accept(result)\r\n            return\r\n          }\r\n        } catch (e: any) {\r\n          if (!isRetryable(attempt, e)) {\r\n            reject(e)\r\n            return\r\n          }\r\n        }\r\n      }\r\n    })()\r\n  })\r\n\r\n  return promise\r\n}\r\n\r\nfunction dec2hex(dec: number) {\r\n  return ('0' + dec.toString(16)).substr(-2)\r\n}\r\n\r\n// Functions below taken from: https://stackoverflow.com/questions/63309409/creating-a-code-verifier-and-challenge-for-pkce-auth-on-spotify-api-in-reactjs\r\nexport function generatePKCEVerifier() {\r\n  const verifierLength = 56\r\n  const array = new Uint32Array(verifierLength)\r\n  if (typeof crypto === 'undefined') {\r\n    const charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~'\r\n    const charSetLen = charSet.length\r\n    let verifier = ''\r\n    for (let i = 0; i < verifierLength; i++) {\r\n      verifier += charSet.charAt(Math.floor(Math.random() * charSetLen))\r\n    }\r\n    return verifier\r\n  }\r\n  crypto.getRandomValues(array)\r\n  return Array.from(array, dec2hex).join('')\r\n}\r\n\r\nasync function sha256(randomString: string) {\r\n  const encoder = new TextEncoder()\r\n  const encodedData = encoder.encode(randomString)\r\n  const hash = await crypto.subtle.digest('SHA-256', encodedData)\r\n  const bytes = new Uint8Array(hash)\r\n\r\n  return Array.from(bytes)\r\n    .map((c) => String.fromCharCode(c))\r\n    .join('')\r\n}\r\n\r\nfunction base64urlencode(str: string) {\r\n  return btoa(str).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '')\r\n}\r\n\r\nexport async function generatePKCEChallenge(verifier: string) {\r\n  if (typeof crypto === 'undefined') {\r\n    console.warn(\r\n      'WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.'\r\n    )\r\n    return verifier\r\n  }\r\n  const hashed = await sha256(verifier)\r\n  return base64urlencode(hashed)\r\n}\r\n", "export class AuthError extends Error {\r\n  status: number | undefined\r\n  protected __isAuthError = true\r\n\r\n  constructor(message: string, status?: number) {\r\n    super(message)\r\n    this.name = 'AuthError'\r\n    this.status = status\r\n  }\r\n}\r\n\r\nexport function isAuthError(error: unknown): error is AuthError {\r\n  return typeof error === 'object' && error !== null && '__isAuthError' in error\r\n}\r\n\r\nexport class AuthApiError extends AuthError {\r\n  status: number\r\n\r\n  constructor(message: string, status: number) {\r\n    super(message, status)\r\n    this.name = 'AuthApiError'\r\n    this.status = status\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: this.name,\r\n      message: this.message,\r\n      status: this.status,\r\n    }\r\n  }\r\n}\r\n\r\nexport function isAuthApiError(error: unknown): error is AuthApiError {\r\n  return isAuthError(error) && error.name === 'AuthApiError'\r\n}\r\n\r\nexport class AuthUnknownError extends AuthError {\r\n  originalError: unknown\r\n\r\n  constructor(message: string, originalError: unknown) {\r\n    super(message)\r\n    this.name = 'AuthUnknownError'\r\n    this.originalError = originalError\r\n  }\r\n}\r\n\r\nexport class CustomAuthError extends AuthError {\r\n  name: string\r\n  status: number\r\n  constructor(message: string, name: string, status: number) {\r\n    super(message)\r\n    this.name = name\r\n    this.status = status\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: this.name,\r\n      message: this.message,\r\n      status: this.status,\r\n    }\r\n  }\r\n}\r\n\r\nexport class AuthSessionMissingError extends CustomAuthError {\r\n  constructor() {\r\n    super('Auth session missing!', 'AuthSessionMissingError', 400)\r\n  }\r\n}\r\n\r\nexport class AuthInvalidCredentialsError extends CustomAuthError {\r\n  constructor(message: string) {\r\n    super(message, 'AuthInvalidCredentialsError', 400)\r\n  }\r\n}\r\n\r\nexport class AuthImplicitGrantRedirectError extends CustomAuthError {\r\n  details: { error: string; code: string } | null = null\r\n  constructor(message: string, details: { error: string; code: string } | null = null) {\r\n    super(message, 'AuthImplicitGrantRedirectError', 500)\r\n    this.details = details\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: this.name,\r\n      message: this.message,\r\n      status: this.status,\r\n      details: this.details,\r\n    }\r\n  }\r\n}\r\n\r\nexport class AuthPKCEGrantCodeExchangeError extends CustomAuthError {\r\n  details: { error: string; code: string } | null = null\r\n  constructor(message: string, details: { error: string; code: string } | null = null) {\r\n    super(message, 'AuthPKCEGrantCodeExchangeError', 500)\r\n    this.details = details\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: this.name,\r\n      message: this.message,\r\n      status: this.status,\r\n      details: this.details,\r\n    }\r\n  }\r\n}\r\n\r\nexport class AuthRetryableFetchError extends CustomAuthError {\r\n  constructor(message: string, status: number) {\r\n    super(message, 'AuthRetryableFetchError', status)\r\n  }\r\n}\r\n", "import { expiresAt, looksLikeFetchResponse } from './helpers'\r\nimport {\r\n  AuthResponse,\r\n  SSOResponse,\r\n  GenerateLinkProperties,\r\n  GenerateLinkResponse,\r\n  User,\r\n  UserResponse,\r\n} from './types'\r\nimport { AuthApiError, AuthRetryableFetchError, AuthUnknownError } from './errors'\r\n\r\nexport type Fetch = typeof fetch\r\n\r\nexport interface FetchOptions {\r\n  headers?: {\r\n    [key: string]: string\r\n  }\r\n  noResolveJson?: boolean\r\n}\r\n\r\nexport interface FetchParameters {\r\n  signal?: AbortSignal\r\n}\r\n\r\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\r\n\r\nconst _getErrorMessage = (err: any): string =>\r\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\r\n\r\nconst handleError = async (error: unknown, reject: (reason?: any) => void) => {\r\n  const NETWORK_ERROR_CODES = [502, 503, 504]\r\n  if (!looksLikeFetchResponse(error)) {\r\n    reject(new AuthRetryableFetchError(_getErrorMessage(error), 0))\r\n  } else if (NETWORK_ERROR_CODES.includes(error.status)) {\r\n    // status in 500...599 range - server had an error, request might be retryed.\r\n    reject(new AuthRetryableFetchError(_getErrorMessage(error), error.status))\r\n  } else {\r\n    // got a response from server that is not in the 500...599 range - should not retry\r\n    error\r\n      .json()\r\n      .then((err) => {\r\n        reject(new AuthApiError(_getErrorMessage(err), error.status || 500))\r\n      })\r\n      .catch((e) => {\r\n        // not a valid json response\r\n        reject(new AuthUnknownError(_getErrorMessage(e), e))\r\n      })\r\n  }\r\n}\r\n\r\nconst _getRequestParams = (\r\n  method: RequestMethodType,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters,\r\n  body?: object\r\n) => {\r\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\r\n\r\n  if (method === 'GET') {\r\n    return params\r\n  }\r\n\r\n  params.headers = { 'Content-Type': 'application/json;charset=UTF-8', ...options?.headers }\r\n  params.body = JSON.stringify(body)\r\n  return { ...params, ...parameters }\r\n}\r\n\r\ninterface GotrueRequestOptions extends FetchOptions {\r\n  jwt?: string\r\n  redirectTo?: string\r\n  body?: object\r\n  query?: { [key: string]: string }\r\n  /**\r\n   * Function that transforms api response from gotrue into a desirable / standardised format\r\n   */\r\n  xform?: (data: any) => any\r\n}\r\n\r\nexport async function _request(\r\n  fetcher: Fetch,\r\n  method: RequestMethodType,\r\n  url: string,\r\n  options?: GotrueRequestOptions\r\n) {\r\n  const headers = { ...options?.headers }\r\n  if (options?.jwt) {\r\n    headers['Authorization'] = `Bearer ${options.jwt}`\r\n  }\r\n  const qs = options?.query ?? {}\r\n  if (options?.redirectTo) {\r\n    qs['redirect_to'] = options.redirectTo\r\n  }\r\n  const queryString = Object.keys(qs).length ? '?' + new URLSearchParams(qs).toString() : ''\r\n  const data = await _handleRequest(\r\n    fetcher,\r\n    method,\r\n    url + queryString,\r\n    { headers, noResolveJson: options?.noResolveJson },\r\n    {},\r\n    options?.body\r\n  )\r\n  return options?.xform ? options?.xform(data) : { data: { ...data }, error: null }\r\n}\r\n\r\nasync function _handleRequest(\r\n  fetcher: Fetch,\r\n  method: RequestMethodType,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters,\r\n  body?: object\r\n): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    fetcher(url, _getRequestParams(method, options, parameters, body))\r\n      .then((result) => {\r\n        if (!result.ok) throw result\r\n        if (options?.noResolveJson) return result\r\n        return result.json()\r\n      })\r\n      .then((data) => resolve(data))\r\n      .catch((error) => handleError(error, reject))\r\n  })\r\n}\r\n\r\nexport function _sessionResponse(data: any): AuthResponse {\r\n  let session = null\r\n  if (hasSession(data)) {\r\n    session = { ...data }\r\n    session.expires_at = expiresAt(data.expires_in)\r\n  }\r\n  const user: User = data.user ?? (data as User)\r\n  return { data: { session, user }, error: null }\r\n}\r\n\r\nexport function _userResponse(data: any): UserResponse {\r\n  const user: User = data.user ?? (data as User)\r\n  return { data: { user }, error: null }\r\n}\r\n\r\nexport function _ssoResponse(data: any): SSOResponse {\r\n  return { data, error: null }\r\n}\r\n\r\nexport function _generateLinkResponse(data: any): GenerateLinkResponse {\r\n  const { action_link, email_otp, hashed_token, redirect_to, verification_type, ...rest } = data\r\n\r\n  const properties: GenerateLinkProperties = {\r\n    action_link,\r\n    email_otp,\r\n    hashed_token,\r\n    redirect_to,\r\n    verification_type,\r\n  }\r\n\r\n  const user: User = { ...rest }\r\n  return {\r\n    data: {\r\n      properties,\r\n      user,\r\n    },\r\n    error: null,\r\n  }\r\n}\r\n\r\nexport function _noResolveJsonResponse(data: any): Response {\r\n  return data\r\n}\r\n\r\n/**\r\n * hasSession checks if the response object contains a valid session\r\n * @param data A response object\r\n * @returns true if a session is in the response\r\n */\r\nfunction hasSession(data: any): boolean {\r\n  return data.access_token && data.refresh_token && data.expires_in\r\n}\r\n", "import {\r\n  Fetch,\r\n  _generateLinkResponse,\r\n  _noResolveJsonResponse,\r\n  _request,\r\n  _userResponse,\r\n} from './lib/fetch'\r\nimport { resolveFetch } from './lib/helpers'\r\nimport {\r\n  AdminUserAttributes,\r\n  GenerateLinkParams,\r\n  GenerateLinkResponse,\r\n  Pagination,\r\n  User,\r\n  UserResponse,\r\n  GoTrueAdminMFAApi,\r\n  AuthMFAAdminDeleteFactorParams,\r\n  AuthMFAAdminDeleteFactorResponse,\r\n  AuthMFAAdminListFactorsParams,\r\n  AuthMFAAdminListFactorsResponse,\r\n  PageParams,\r\n} from './lib/types'\r\nimport { AuthError, isAuthError } from './lib/errors'\r\n\r\nexport default class GoTrueAdminApi {\r\n  /** Contains all MFA administration methods. */\r\n  mfa: GoTrueAdminMFAApi\r\n\r\n  protected url: string\r\n  protected headers: {\r\n    [key: string]: string\r\n  }\r\n  protected fetch: Fetch\r\n\r\n  constructor({\r\n    url = '',\r\n    headers = {},\r\n    fetch,\r\n  }: {\r\n    url: string\r\n    headers?: {\r\n      [key: string]: string\r\n    }\r\n    fetch?: Fetch\r\n  }) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.fetch = resolveFetch(fetch)\r\n    this.mfa = {\r\n      listFactors: this._listFactors.bind(this),\r\n      deleteFactor: this._deleteFactor.bind(this),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a logged-in session.\r\n   * @param jwt A valid, logged-in JWT.\r\n   */\r\n  async signOut(jwt: string): Promise<{ data: null; error: AuthError | null }> {\r\n    try {\r\n      await _request(this.fetch, 'POST', `${this.url}/logout`, {\r\n        headers: this.headers,\r\n        jwt,\r\n        noResolveJson: true,\r\n      })\r\n      return { data: null, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends an invite link to an email address.\r\n   * @param email The email address of the user.\r\n   * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\r\n   * @param options.data Optional user metadata\r\n   */\r\n  async inviteUserByEmail(\r\n    email: string,\r\n    options: {\r\n      redirectTo?: string\r\n      data?: object\r\n    } = {}\r\n  ): Promise<UserResponse> {\r\n    try {\r\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\r\n        body: { email, data: options.data },\r\n        headers: this.headers,\r\n        redirectTo: options.redirectTo,\r\n        xform: _userResponse,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates email links and OTPs to be sent via a custom email provider.\r\n   * @param email The user's email.\r\n   * @param options.password User password. For signup only.\r\n   * @param options.data Optional user metadata. For signup only.\r\n   * @param options.redirectTo The redirect url which should be appended to the generated link\r\n   */\r\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\r\n    try {\r\n      const { options, ...rest } = params\r\n      const body: any = { ...rest, ...options }\r\n      if ('newEmail' in rest) {\r\n        // replace newEmail with new_email in request body\r\n        body.new_email = rest?.newEmail\r\n        delete body['newEmail']\r\n      }\r\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\r\n        body: body,\r\n        headers: this.headers,\r\n        xform: _generateLinkResponse,\r\n        redirectTo: options?.redirectTo,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return {\r\n          data: {\r\n            properties: null,\r\n            user: null,\r\n          },\r\n          error,\r\n        }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // User Admin API\r\n  /**\r\n   * Creates a new user.\r\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n   */\r\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\r\n    try {\r\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\r\n        body: attributes,\r\n        headers: this.headers,\r\n        xform: _userResponse,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a list of users.\r\n   *\r\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\r\n   */\r\n  async listUsers(\r\n    params?: PageParams\r\n  ): Promise<\r\n    | { data: { users: User[]; aud: string } & Pagination; error: null }\r\n    | { data: { users: [] }; error: AuthError }\r\n  > {\r\n    try {\r\n      const pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\r\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\r\n        headers: this.headers,\r\n        noResolveJson: true,\r\n        query: {\r\n          page: params?.page?.toString() ?? '',\r\n          per_page: params?.perPage?.toString() ?? '',\r\n        },\r\n        xform: _noResolveJsonResponse,\r\n      })\r\n      if (response.error) throw response.error\r\n\r\n      const users = await response.json()\r\n      const total = response.headers.get('x-total-count') ?? 0\r\n      const links = response.headers.get('link')?.split(',') ?? []\r\n      if (links.length > 0) {\r\n        links.forEach((link: string) => {\r\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\r\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\r\n          pagination[`${rel}Page`] = page\r\n        })\r\n\r\n        pagination.total = parseInt(total)\r\n      }\r\n      return { data: { ...users, ...pagination }, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { users: [] }, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user by id.\r\n   *\r\n   * @param uid The user's unique identifier\r\n   *\r\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n   */\r\n  async getUserById(uid: string): Promise<UserResponse> {\r\n    try {\r\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\r\n        headers: this.headers,\r\n        xform: _userResponse,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the user data.\r\n   *\r\n   * @param attributes The data you want to update.\r\n   *\r\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n   */\r\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\r\n    try {\r\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\r\n        body: attributes,\r\n        headers: this.headers,\r\n        xform: _userResponse,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a user. Requires a `service_role` key.\r\n   *\r\n   * @param id The user id you want to remove.\r\n   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema.\r\n   * Defaults to false for backward compatibility.\r\n   *\r\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n   */\r\n  async deleteUser(id: string, shouldSoftDelete = false): Promise<UserResponse> {\r\n    try {\r\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\r\n        headers: this.headers,\r\n        body: {\r\n          should_soft_delete: shouldSoftDelete,\r\n        },\r\n        xform: _userResponse,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async _listFactors(\r\n    params: AuthMFAAdminListFactorsParams\r\n  ): Promise<AuthMFAAdminListFactorsResponse> {\r\n    try {\r\n      const { data, error } = await _request(\r\n        this.fetch,\r\n        'GET',\r\n        `${this.url}/admin/users/${params.userId}/factors`,\r\n        {\r\n          headers: this.headers,\r\n          xform: (factors: any) => {\r\n            return { data: { factors }, error: null }\r\n          },\r\n        }\r\n      )\r\n      return { data, error }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async _deleteFactor(\r\n    params: AuthMFAAdminDeleteFactorParams\r\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\r\n    try {\r\n      const data = await _request(\r\n        this.fetch,\r\n        'DELETE',\r\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\r\n        {\r\n          headers: this.headers,\r\n        }\r\n      )\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n}\r\n", "// Generated by genversion.\r\nexport const version = '2.24.0'\r\n", "import { version } from './version'\r\nexport const GOTRUE_URL = 'http://localhost:9999'\r\nexport const STORAGE_KEY = 'supabase.auth.token'\r\nexport const AUDIENCE = ''\r\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `gotrue-js/${version}` }\r\nexport const EXPIRY_MARGIN = 10 // in seconds\r\nexport const NETWORK_FAILURE = {\r\n  MAX_RETRIES: 10,\r\n  RETRY_INTERVAL: 2, // in deciseconds\r\n}\r\n", "import { supportsLocalStorage } from './helpers'\r\nimport { SupportedStorage } from './types'\r\n\r\nconst localStorageAdapter: SupportedStorage = {\r\n  getItem: (key) => {\r\n    if (!supportsLocalStorage()) {\r\n      return null\r\n    }\r\n\r\n    return globalThis.localStorage.getItem(key)\r\n  },\r\n  setItem: (key, value) => {\r\n    if (!supportsLocalStorage()) {\r\n      return\r\n    }\r\n\r\n    globalThis.localStorage.setItem(key, value)\r\n  },\r\n  removeItem: (key) => {\r\n    if (!supportsLocalStorage()) {\r\n      return\r\n    }\r\n\r\n    globalThis.localStorage.removeItem(key)\r\n  },\r\n}\r\n\r\nexport default localStorageAdapter\r\n", "/**\r\n * https://mathiasbynens.be/notes/globalthis\r\n */\r\nexport function polyfillGlobalThis() {\r\n  if (typeof globalThis === 'object') return\r\n  try {\r\n    Object.defineProperty(Object.prototype, '__magic__', {\r\n      get: function () {\r\n        return this\r\n      },\r\n      configurable: true,\r\n    })\r\n    // @ts-expect-error 'Allow access to magic'\r\n    __magic__.globalThis = __magic__\r\n    // @ts-expect-error 'Allow access to magic'\r\n    delete Object.prototype.__magic__\r\n  } catch (e) {\r\n    if (typeof self !== 'undefined') {\r\n      // @ts-expect-error 'Allow access to globals'\r\n      self.globalThis = self\r\n    }\r\n  }\r\n}\r\n", "import GoTrueAdminApi from './GoTrueAdminApi'\r\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants'\r\nimport {\r\n  AuthError,\r\n  AuthImplicitGrantRedirectError,\r\n  AuthPKCEGrantCodeExchangeError,\r\n  AuthInvalidCredentialsError,\r\n  AuthRetryableFetchError,\r\n  AuthSessionMissingError,\r\n  AuthUnknownError,\r\n  isAuthApiError,\r\n  isAuthError,\r\n} from './lib/errors'\r\nimport { Fetch, _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch'\r\nimport {\r\n  decodeJWTPayload,\r\n  Deferred,\r\n  getItemAsync,\r\n  getParameterByName,\r\n  isBrowser,\r\n  removeItemAsync,\r\n  resolveFetch,\r\n  setItemAsync,\r\n  uuid,\r\n  retryable,\r\n  sleep,\r\n  generatePKCEVerifier,\r\n  generatePKCEChallenge,\r\n} from './lib/helpers'\r\nimport localStorageAdapter from './lib/local-storage'\r\nimport { polyfillGlobalThis } from './lib/polyfills'\r\n\r\nimport type {\r\n  AuthChangeEvent,\r\n  AuthResponse,\r\n  CallRefreshTokenResult,\r\n  GoTrueClientOptions,\r\n  InitializeResult,\r\n  OAuthResponse,\r\n  SSOResponse,\r\n  Provider,\r\n  Session,\r\n  SignInWithIdTokenCredentials,\r\n  SignInWithOAuthCredentials,\r\n  SignInWithPasswordCredentials,\r\n  SignInWithPasswordlessCredentials,\r\n  SignUpWithPasswordCredentials,\r\n  SignInWithSSO,\r\n  Subscription,\r\n  SupportedStorage,\r\n  User,\r\n  UserAttributes,\r\n  UserResponse,\r\n  VerifyOtpParams,\r\n  GoTrueMFAApi,\r\n  MFAEnrollParams,\r\n  AuthMFAEnrollResponse,\r\n  MFAChallengeParams,\r\n  AuthMFAChallengeResponse,\r\n  MFAUnenrollParams,\r\n  AuthMFAUnenrollResponse,\r\n  MFAVerifyParams,\r\n  AuthMFAVerifyResponse,\r\n  AuthMFAListFactorsResponse,\r\n  AMREntry,\r\n  AuthMFAGetAuthenticatorAssuranceLevelResponse,\r\n  AuthenticatorAssuranceLevels,\r\n  Factor,\r\n  MFAChallengeAndVerifyParams,\r\n  AuthFlowType,\r\n} from './lib/types'\r\n\r\npolyfillGlobalThis() // Make \"globalThis\" available\r\n\r\nconst DEFAULT_OPTIONS: Omit<Required<GoTrueClientOptions>, 'fetch' | 'storage'> = {\r\n  url: GOTRUE_URL,\r\n  storageKey: STORAGE_KEY,\r\n  autoRefreshToken: true,\r\n  persistSession: true,\r\n  detectSessionInUrl: true,\r\n  headers: DEFAULT_HEADERS,\r\n  flowType: 'implicit',\r\n}\r\n\r\n/** Current session will be checked for refresh at this interval. */\r\nconst AUTO_REFRESH_TICK_DURATION = 30 * 1000\r\n\r\n/**\r\n * A token refresh will be attempted this many ticks before the current session expires. */\r\nconst AUTO_REFRESH_TICK_THRESHOLD = 3\r\n\r\nexport default class GoTrueClient {\r\n  /**\r\n   * Namespace for the GoTrue admin methods.\r\n   * These methods should only be used in a trusted server-side environment.\r\n   */\r\n  admin: GoTrueAdminApi\r\n  /**\r\n   * Namespace for the MFA methods.\r\n   */\r\n  mfa: GoTrueMFAApi\r\n  /**\r\n   * The storage key used to identify the values saved in localStorage\r\n   */\r\n  protected storageKey: string\r\n\r\n  /**\r\n   * The session object for the currently logged in user. If null, it means there isn't a logged-in user.\r\n   * Only used if persistSession is false.\r\n   */\r\n  protected inMemorySession: Session | null\r\n\r\n  protected flowType: AuthFlowType\r\n\r\n  protected autoRefreshToken: boolean\r\n  protected persistSession: boolean\r\n  protected storage: SupportedStorage\r\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\r\n  protected autoRefreshTicker: ReturnType<typeof setInterval> | null = null\r\n  protected visibilityChangedCallback: (() => Promise<any>) | null = null\r\n  protected refreshingDeferred: Deferred<CallRefreshTokenResult> | null = null\r\n  /**\r\n   * Keeps track of the async client initialization.\r\n   * When null or not yet resolved the auth state is `unknown`\r\n   * Once resolved the the auth state is known and it's save to call any further client methods.\r\n   * Keep extra care to never reject or throw uncaught errors\r\n   */\r\n  protected initializePromise: Promise<InitializeResult> | null = null\r\n  protected detectSessionInUrl = true\r\n  protected url: string\r\n  protected headers: {\r\n    [key: string]: string\r\n  }\r\n  protected fetch: Fetch\r\n\r\n  /**\r\n   * Used to broadcast state change events to other tabs listening.\r\n   */\r\n  protected broadcastChannel: BroadcastChannel | null = null\r\n\r\n  /**\r\n   * Create a new client for use in the browser.\r\n   */\r\n  constructor(options: GoTrueClientOptions) {\r\n    const settings = { ...DEFAULT_OPTIONS, ...options }\r\n    this.inMemorySession = null\r\n    this.storageKey = settings.storageKey\r\n    this.autoRefreshToken = settings.autoRefreshToken\r\n    this.persistSession = settings.persistSession\r\n    this.storage = settings.storage || localStorageAdapter\r\n    this.admin = new GoTrueAdminApi({\r\n      url: settings.url,\r\n      headers: settings.headers,\r\n      fetch: settings.fetch,\r\n    })\r\n\r\n    this.url = settings.url\r\n    this.headers = settings.headers\r\n    this.fetch = resolveFetch(settings.fetch)\r\n    this.detectSessionInUrl = settings.detectSessionInUrl\r\n    this.flowType = settings.flowType\r\n\r\n    this.mfa = {\r\n      verify: this._verify.bind(this),\r\n      enroll: this._enroll.bind(this),\r\n      unenroll: this._unenroll.bind(this),\r\n      challenge: this._challenge.bind(this),\r\n      listFactors: this._listFactors.bind(this),\r\n      challengeAndVerify: this._challengeAndVerify.bind(this),\r\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\r\n    }\r\n\r\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\r\n      try {\r\n        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey)\r\n      } catch (e: any) {\r\n        console.error(\r\n          'Failed to create a new BroadcastChannel, multi-tab state changes will not be available',\r\n          e\r\n        )\r\n      }\r\n\r\n      this.broadcastChannel?.addEventListener('message', (event) => {\r\n        this._notifyAllSubscribers(event.data.event, event.data.session, false) // broadcast = false so we don't get an endless loop of messages\r\n      })\r\n    }\r\n\r\n    this.initialize()\r\n  }\r\n\r\n  /**\r\n   * Initializes the client session either from the url or from storage.\r\n   * This method is automatically called when instantiating the client, but should also be called\r\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\r\n   */\r\n  initialize(): Promise<InitializeResult> {\r\n    if (!this.initializePromise) {\r\n      this.initializePromise = this._initialize()\r\n    }\r\n\r\n    return this.initializePromise\r\n  }\r\n\r\n  /**\r\n   * IMPORTANT:\r\n   * 1. Never throw in this method, as it is called from the constructor\r\n   * 2. Never return a session from this method as it would be cached over\r\n   *    the whole lifetime of the client\r\n   */\r\n  private async _initialize(): Promise<InitializeResult> {\r\n    if (this.initializePromise) {\r\n      return this.initializePromise\r\n    }\r\n\r\n    try {\r\n      const isPKCEFlow = await this._isPKCEFlow()\r\n      if ((this.detectSessionInUrl && this._isImplicitGrantFlow()) || isPKCEFlow) {\r\n        const { data, error } = await this._getSessionFromUrl(isPKCEFlow)\r\n        if (error) {\r\n          // failed login attempt via url,\r\n          // remove old session as in verifyOtp, signUp and signInWith*\r\n          await this._removeSession()\r\n\r\n          return { error }\r\n        }\r\n\r\n        const { session, redirectType } = data\r\n\r\n        await this._saveSession(session)\r\n\r\n        setTimeout(() => {\r\n          if (redirectType === 'recovery') {\r\n            this._notifyAllSubscribers('PASSWORD_RECOVERY', session)\r\n          } else {\r\n            this._notifyAllSubscribers('SIGNED_IN', session)\r\n          }\r\n        }, 0)\r\n\r\n        return { error: null }\r\n      }\r\n\r\n      // no login attempt via callback url try to recover session from storage\r\n      await this._recoverAndRefresh()\r\n      return { error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { error }\r\n      }\r\n\r\n      return {\r\n        error: new AuthUnknownError('Unexpected error during initialization', error),\r\n      }\r\n    } finally {\r\n      await this._handleVisibilityChange()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new user.\r\n   *\r\n   * Be aware that if a user account exists in the system you may get back an\r\n   * error message that attempts to hide this information from the user.\r\n   *\r\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\r\n   * @returns A user if the server has \"autoconfirm\" OFF\r\n   */\r\n  async signUp(credentials: SignUpWithPasswordCredentials): Promise<AuthResponse> {\r\n    try {\r\n      await this._removeSession()\r\n\r\n      let res: AuthResponse\r\n      if ('email' in credentials) {\r\n        const { email, password, options } = credentials\r\n        let codeChallenge: string | null = null\r\n        let codeChallengeMethod: string | null = null\r\n        if (this.flowType === 'pkce') {\r\n          const codeVerifier = generatePKCEVerifier()\r\n          await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\r\n          codeChallenge = await generatePKCEChallenge(codeVerifier)\r\n          codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\r\n        }\r\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\r\n          headers: this.headers,\r\n          redirectTo: options?.emailRedirectTo,\r\n          body: {\r\n            email,\r\n            password,\r\n            data: options?.data ?? {},\r\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\r\n            code_challenge: codeChallenge,\r\n            code_challenge_method: codeChallengeMethod,\r\n          },\r\n          xform: _sessionResponse,\r\n        })\r\n      } else if ('phone' in credentials) {\r\n        const { phone, password, options } = credentials\r\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\r\n          headers: this.headers,\r\n          body: {\r\n            phone,\r\n            password,\r\n            data: options?.data ?? {},\r\n            channel: options?.channel ?? 'sms',\r\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\r\n          },\r\n          xform: _sessionResponse,\r\n        })\r\n      } else {\r\n        throw new AuthInvalidCredentialsError(\r\n          'You must provide either an email or phone number and a password'\r\n        )\r\n      }\r\n\r\n      const { data, error } = res\r\n\r\n      if (error || !data) {\r\n        return { data: { user: null, session: null }, error: error }\r\n      }\r\n\r\n      const session: Session | null = data.session\r\n      const user: User | null = data.user\r\n\r\n      if (data.session) {\r\n        await this._saveSession(data.session)\r\n        this._notifyAllSubscribers('SIGNED_IN', session)\r\n      }\r\n\r\n      return { data: { user, session }, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null, session: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log in an existing user with an email and password or phone and password.\r\n   *\r\n   * Be aware that you may get back an error message that will not distinguish\r\n   * between the cases where the account does not exist or that the\r\n   * email/phone and password combination is wrong or that the account can only\r\n   * be accessed via social login.\r\n   */\r\n  async signInWithPassword(credentials: SignInWithPasswordCredentials): Promise<AuthResponse> {\r\n    try {\r\n      await this._removeSession()\r\n\r\n      let res: AuthResponse\r\n      if ('email' in credentials) {\r\n        const { email, password, options } = credentials\r\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\r\n          headers: this.headers,\r\n          body: {\r\n            email,\r\n            password,\r\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\r\n          },\r\n          xform: _sessionResponse,\r\n        })\r\n      } else if ('phone' in credentials) {\r\n        const { phone, password, options } = credentials\r\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\r\n          headers: this.headers,\r\n          body: {\r\n            phone,\r\n            password,\r\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\r\n          },\r\n          xform: _sessionResponse,\r\n        })\r\n      } else {\r\n        throw new AuthInvalidCredentialsError(\r\n          'You must provide either an email or phone number and a password'\r\n        )\r\n      }\r\n      const { data, error } = res\r\n      if (error || !data) return { data: { user: null, session: null }, error }\r\n      if (data.session) {\r\n        await this._saveSession(data.session)\r\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\r\n      }\r\n      return { data, error }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null, session: null }, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log in an existing user via a third-party provider.\r\n   */\r\n  async signInWithOAuth(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\r\n    await this._removeSession()\r\n\r\n    return await this._handleProviderSignIn(credentials.provider, {\r\n      redirectTo: credentials.options?.redirectTo,\r\n      scopes: credentials.options?.scopes,\r\n      queryParams: credentials.options?.queryParams,\r\n      skipBrowserRedirect: credentials.options?.skipBrowserRedirect,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Log in an existing user via a third-party provider.\r\n   */\r\n  async exchangeCodeForSession(authCode: string): Promise<AuthResponse> {\r\n    const codeVerifier = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`)\r\n    const { data, error } = await _request(\r\n      this.fetch,\r\n      'POST',\r\n      `${this.url}/token?grant_type=pkce`,\r\n      {\r\n        headers: this.headers,\r\n        body: {\r\n          auth_code: authCode,\r\n          code_verifier: codeVerifier,\r\n        },\r\n        xform: _sessionResponse,\r\n      }\r\n    )\r\n    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)\r\n    if (error || !data) return { data: { user: null, session: null }, error }\r\n    if (data.session) {\r\n      await this._saveSession(data.session)\r\n      this._notifyAllSubscribers('SIGNED_IN', data.session)\r\n    }\r\n    return { data, error }\r\n  }\r\n\r\n  /**\r\n   * Allows signing in with an ID token issued by certain supported providers.\r\n   * The ID token is verified for validity and a new session is established.\r\n   *\r\n   * @experimental\r\n   */\r\n  async signInWithIdToken(credentials: SignInWithIdTokenCredentials): Promise<AuthResponse> {\r\n    await this._removeSession()\r\n\r\n    try {\r\n      const { options, provider, token, nonce } = credentials\r\n\r\n      const res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\r\n        headers: this.headers,\r\n        body: {\r\n          provider,\r\n          id_token: token,\r\n          nonce,\r\n          gotrue_meta_security: { captcha_token: options?.captchaToken },\r\n        },\r\n        xform: _sessionResponse,\r\n      })\r\n\r\n      const { data, error } = res\r\n      if (error || !data) return { data: { user: null, session: null }, error }\r\n      if (data.session) {\r\n        await this._saveSession(data.session)\r\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\r\n      }\r\n      return { data, error }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null, session: null }, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log in a user using magiclink or a one-time password (OTP).\r\n   *\r\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\r\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\r\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\r\n   *\r\n   * Be aware that you may get back an error message that will not distinguish\r\n   * between the cases where the account does not exist or, that the account\r\n   * can only be accessed via social login.\r\n   *\r\n   * Do note that you will need to configure a Whatsapp sender on Twilio\r\n   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\r\n   * channel is not supported on other providers\r\n   * at this time.\r\n   */\r\n  async signInWithOtp(credentials: SignInWithPasswordlessCredentials): Promise<AuthResponse> {\r\n    try {\r\n      await this._removeSession()\r\n\r\n      if ('email' in credentials) {\r\n        const { email, options } = credentials\r\n        let codeChallenge: string | null = null\r\n        let codeChallengeMethod: string | null = null\r\n        if (this.flowType === 'pkce') {\r\n          const codeVerifier = generatePKCEVerifier()\r\n          await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\r\n          codeChallenge = await generatePKCEChallenge(codeVerifier)\r\n          codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\r\n        }\r\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\r\n          headers: this.headers,\r\n          body: {\r\n            email,\r\n            data: options?.data ?? {},\r\n            create_user: options?.shouldCreateUser ?? true,\r\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\r\n            code_challenge: codeChallenge,\r\n            code_challenge_method: codeChallengeMethod,\r\n          },\r\n          redirectTo: options?.emailRedirectTo,\r\n        })\r\n        return { data: { user: null, session: null }, error }\r\n      }\r\n      if ('phone' in credentials) {\r\n        const { phone, options } = credentials\r\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\r\n          headers: this.headers,\r\n          body: {\r\n            phone,\r\n            data: options?.data ?? {},\r\n            create_user: options?.shouldCreateUser ?? true,\r\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\r\n            channel: options?.channel ?? 'sms',\r\n          },\r\n        })\r\n        return { data: { user: null, session: null }, error }\r\n      }\r\n      throw new AuthInvalidCredentialsError('You must provide either an email or phone number.')\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null, session: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log in a user given a User supplied OTP received via mobile.\r\n   */\r\n  async verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\r\n    try {\r\n      await this._removeSession()\r\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\r\n        headers: this.headers,\r\n        body: {\r\n          ...params,\r\n          gotrue_meta_security: { captcha_token: params.options?.captchaToken },\r\n        },\r\n        redirectTo: params.options?.redirectTo,\r\n        xform: _sessionResponse,\r\n      })\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      if (!data) {\r\n        throw new Error('An error occurred on token verification.')\r\n      }\r\n\r\n      const session: Session | null = data.session\r\n      const user: User = data.user\r\n\r\n      if (session?.access_token) {\r\n        await this._saveSession(session as Session)\r\n        this._notifyAllSubscribers('SIGNED_IN', session)\r\n      }\r\n\r\n      return { data: { user, session }, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null, session: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts a single-sign on using an enterprise Identity Provider. A\r\n   * successful SSO attempt will redirect the current page to the identity\r\n   * provider authorization page. The redirect URL is implementation and SSO\r\n   * protocol specific.\r\n   *\r\n   * You can use it by providing a SSO domain. Typically you can extract this\r\n   * domain by asking users for their email address. If this domain is\r\n   * registered on the Auth instance the redirect will use that organization's\r\n   * currently active SSO Identity Provider for the login.\r\n   *\r\n   * If you have built an organization-specific login page, you can use the\r\n   * organization's SSO Identity Provider UUID directly instead.\r\n   */\r\n  async signInWithSSO(params: SignInWithSSO): Promise<SSOResponse> {\r\n    try {\r\n      await this._removeSession()\r\n\r\n      return await _request(this.fetch, 'POST', `${this.url}/sso`, {\r\n        body: {\r\n          ...('providerId' in params ? { provider_id: params.providerId } : null),\r\n          ...('domain' in params ? { domain: params.domain } : null),\r\n          redirect_to: params.options?.redirectTo ?? undefined,\r\n          ...(params?.options?.captchaToken\r\n            ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\r\n            : null),\r\n          skip_http_redirect: true, // fetch does not handle redirects\r\n        },\r\n        headers: this.headers,\r\n        xform: _ssoResponse,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the session, refreshing it if necessary.\r\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\r\n   */\r\n  async getSession(): Promise<\r\n    | {\r\n        data: {\r\n          session: Session\r\n        }\r\n        error: null\r\n      }\r\n    | {\r\n        data: {\r\n          session: null\r\n        }\r\n        error: AuthError\r\n      }\r\n    | {\r\n        data: {\r\n          session: null\r\n        }\r\n        error: null\r\n      }\r\n  > {\r\n    // make sure we've read the session from the url if there is one\r\n    // save to just await, as long we make sure _initialize() never throws\r\n    await this.initializePromise\r\n\r\n    let currentSession: Session | null = null\r\n\r\n    if (this.persistSession) {\r\n      const maybeSession = await getItemAsync(this.storage, this.storageKey)\r\n\r\n      if (maybeSession !== null) {\r\n        if (this._isValidSession(maybeSession)) {\r\n          currentSession = maybeSession\r\n        } else {\r\n          await this._removeSession()\r\n        }\r\n      }\r\n    } else {\r\n      currentSession = this.inMemorySession\r\n    }\r\n\r\n    if (!currentSession) {\r\n      return { data: { session: null }, error: null }\r\n    }\r\n\r\n    const hasExpired = currentSession.expires_at\r\n      ? currentSession.expires_at <= Date.now() / 1000\r\n      : false\r\n    if (!hasExpired) {\r\n      return { data: { session: currentSession }, error: null }\r\n    }\r\n\r\n    const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\r\n    if (error) {\r\n      return { data: { session: null }, error }\r\n    }\r\n\r\n    return { data: { session }, error: null }\r\n  }\r\n\r\n  /**\r\n   * Gets the current user details if there is an existing session.\r\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\r\n   */\r\n  async getUser(jwt?: string): Promise<UserResponse> {\r\n    try {\r\n      if (!jwt) {\r\n        const { data, error } = await this.getSession()\r\n        if (error) {\r\n          throw error\r\n        }\r\n\r\n        // Default to Authorization header if there is no existing session\r\n        jwt = data.session?.access_token ?? undefined\r\n      }\r\n\r\n      return await _request(this.fetch, 'GET', `${this.url}/user`, {\r\n        headers: this.headers,\r\n        jwt: jwt,\r\n        xform: _userResponse,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates user data for a logged in user.\r\n   */\r\n  async updateUser(\r\n    attributes: UserAttributes,\r\n    options: {\r\n      emailRedirectTo?: string | undefined\r\n    } = {}\r\n  ): Promise<UserResponse> {\r\n    try {\r\n      const { data: sessionData, error: sessionError } = await this.getSession()\r\n      if (sessionError) {\r\n        throw sessionError\r\n      }\r\n      if (!sessionData.session) {\r\n        throw new AuthSessionMissingError()\r\n      }\r\n      const session: Session = sessionData.session\r\n      const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\r\n        headers: this.headers,\r\n        redirectTo: options?.emailRedirectTo,\r\n        body: attributes,\r\n        jwt: session.access_token,\r\n        xform: _userResponse,\r\n      })\r\n      if (userError) throw userError\r\n      session.user = data.user as User\r\n      await this._saveSession(session)\r\n      this._notifyAllSubscribers('USER_UPDATED', session)\r\n\r\n      return { data: { user: session.user }, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decodes a JWT (without performing any validation).\r\n   */\r\n  private _decodeJWT(jwt: string): {\r\n    exp?: number\r\n    aal?: AuthenticatorAssuranceLevels | null\r\n    amr?: AMREntry[] | null\r\n  } {\r\n    return decodeJWTPayload(jwt)\r\n  }\r\n\r\n  /**\r\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\r\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\r\n   * @param currentSession The current session that minimally contains an access token and refresh token.\r\n   */\r\n  async setSession(currentSession: {\r\n    access_token: string\r\n    refresh_token: string\r\n  }): Promise<AuthResponse> {\r\n    try {\r\n      if (!currentSession.access_token || !currentSession.refresh_token) {\r\n        throw new AuthSessionMissingError()\r\n      }\r\n\r\n      const timeNow = Date.now() / 1000\r\n      let expiresAt = timeNow\r\n      let hasExpired = true\r\n      let session: Session | null = null\r\n      const payload = decodeJWTPayload(currentSession.access_token)\r\n      if (payload.exp) {\r\n        expiresAt = payload.exp\r\n        hasExpired = expiresAt <= timeNow\r\n      }\r\n\r\n      if (hasExpired) {\r\n        const { session: refreshedSession, error } = await this._callRefreshToken(\r\n          currentSession.refresh_token\r\n        )\r\n        if (error) {\r\n          return { data: { user: null, session: null }, error: error }\r\n        }\r\n\r\n        if (!refreshedSession) {\r\n          return { data: { user: null, session: null }, error: null }\r\n        }\r\n        session = refreshedSession\r\n      } else {\r\n        const { data, error } = await this.getUser(currentSession.access_token)\r\n        if (error) {\r\n          throw error\r\n        }\r\n        session = {\r\n          access_token: currentSession.access_token,\r\n          refresh_token: currentSession.refresh_token,\r\n          user: data.user,\r\n          token_type: 'bearer',\r\n          expires_in: expiresAt - timeNow,\r\n          expires_at: expiresAt,\r\n        }\r\n        await this._saveSession(session)\r\n        this._notifyAllSubscribers('SIGNED_IN', session)\r\n      }\r\n\r\n      return { data: { user: session.user, session }, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { session: null, user: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a new session, regardless of expiry status.\r\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\r\n   * If the current session's refresh token is invalid, an error will be thrown.\r\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\r\n   */\r\n  async refreshSession(currentSession?: { refresh_token: string }): Promise<AuthResponse> {\r\n    try {\r\n      if (!currentSession) {\r\n        const { data, error } = await this.getSession()\r\n        if (error) {\r\n          throw error\r\n        }\r\n\r\n        currentSession = data.session ?? undefined\r\n      }\r\n\r\n      if (!currentSession?.refresh_token) {\r\n        throw new AuthSessionMissingError()\r\n      }\r\n\r\n      const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\r\n      if (error) {\r\n        return { data: { user: null, session: null }, error: error }\r\n      }\r\n\r\n      if (!session) {\r\n        return { data: { user: null, session: null }, error: null }\r\n      }\r\n\r\n      return { data: { user: session.user, session }, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { user: null, session: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the session data from a URL string\r\n   */\r\n  private async _getSessionFromUrl(isPKCEFlow: boolean): Promise<\r\n    | {\r\n        data: { session: Session; redirectType: string | null }\r\n        error: null\r\n      }\r\n    | { data: { session: null; redirectType: null }; error: AuthError }\r\n  > {\r\n    try {\r\n      if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.')\r\n      if (this.flowType === 'implicit' && !this._isImplicitGrantFlow()) {\r\n        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.')\r\n      } else if (this.flowType == 'pkce' && !isPKCEFlow) {\r\n        throw new AuthPKCEGrantCodeExchangeError('Not a valid PKCE flow url.')\r\n      }\r\n      if (isPKCEFlow) {\r\n        const authCode = getParameterByName('code')\r\n        if (!authCode) throw new AuthPKCEGrantCodeExchangeError('No code detected.')\r\n        const { data, error } = await this.exchangeCodeForSession(authCode)\r\n        if (error) throw error\r\n        if (!data.session) throw new AuthPKCEGrantCodeExchangeError('No session detected.')\r\n        return { data: { session: data.session, redirectType: null }, error: null }\r\n      }\r\n\r\n      const error_description = getParameterByName('error_description')\r\n      if (error_description) {\r\n        const error_code = getParameterByName('error_code')\r\n        if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.')\r\n        const error = getParameterByName('error')\r\n        if (!error) throw new AuthImplicitGrantRedirectError('No error detected.')\r\n\r\n        throw new AuthImplicitGrantRedirectError(error_description, { error, code: error_code })\r\n      }\r\n\r\n      const provider_token = getParameterByName('provider_token')\r\n      const provider_refresh_token = getParameterByName('provider_refresh_token')\r\n      const access_token = getParameterByName('access_token')\r\n      if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.')\r\n      const expires_in = getParameterByName('expires_in')\r\n      if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.')\r\n      const refresh_token = getParameterByName('refresh_token')\r\n      if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.')\r\n      const token_type = getParameterByName('token_type')\r\n      if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.')\r\n\r\n      const timeNow = Math.round(Date.now() / 1000)\r\n      const expires_at = timeNow + parseInt(expires_in)\r\n\r\n      const { data, error } = await this.getUser(access_token)\r\n      if (error) throw error\r\n      const user: User = data.user\r\n      const session: Session = {\r\n        provider_token,\r\n        provider_refresh_token,\r\n        access_token,\r\n        expires_in: parseInt(expires_in),\r\n        expires_at,\r\n        refresh_token,\r\n        token_type,\r\n        user,\r\n      }\r\n      const redirectType = getParameterByName('type')\r\n\r\n      // Remove tokens from URL\r\n      window.location.hash = ''\r\n\r\n      return { data: { session, redirectType }, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { session: null, redirectType: null }, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\r\n   */\r\n  private _isImplicitGrantFlow(): boolean {\r\n    return (\r\n      isBrowser() &&\r\n      (Boolean(getParameterByName('access_token')) ||\r\n        Boolean(getParameterByName('error_description')))\r\n    )\r\n  }\r\n  /**\r\n   * Checks if the current URL and backing storage contain parameters given by a PKCE flow\r\n   */\r\n  private async _isPKCEFlow(): Promise<boolean> {\r\n    const currentStorageContent = await getItemAsync(\r\n      this.storage,\r\n      `${this.storageKey}-code-verifier`\r\n    )\r\n    return isBrowser() && Boolean(getParameterByName('code')) && Boolean(currentStorageContent)\r\n  }\r\n\r\n  /**\r\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\r\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\r\n   *\r\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\r\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\r\n   */\r\n  async signOut(): Promise<{ error: AuthError | null }> {\r\n    const { data, error: sessionError } = await this.getSession()\r\n    if (sessionError) {\r\n      return { error: sessionError }\r\n    }\r\n    const accessToken = data.session?.access_token\r\n    if (accessToken) {\r\n      const { error } = await this.admin.signOut(accessToken)\r\n      if (error) {\r\n        // ignore 404s since user might not exist anymore\r\n        // ignore 401s since an invalid or expired JWT should sign out the current session\r\n        if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\r\n          return { error }\r\n        }\r\n      }\r\n    }\r\n    await this._removeSession()\r\n    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)\r\n    this._notifyAllSubscribers('SIGNED_OUT', null)\r\n    return { error: null }\r\n  }\r\n\r\n  /**\r\n   * Receive a notification every time an auth event happens.\r\n   * @param callback A callback function to be invoked when an auth event happens.\r\n   */\r\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\r\n    data: { subscription: Subscription }\r\n  } {\r\n    const id: string = uuid()\r\n    const subscription: Subscription = {\r\n      id,\r\n      callback,\r\n      unsubscribe: () => {\r\n        this.stateChangeEmitters.delete(id)\r\n      },\r\n    }\r\n\r\n    this.stateChangeEmitters.set(id, subscription)\r\n\r\n    this.emitInitialSession(id)\r\n\r\n    return { data: { subscription } }\r\n  }\r\n\r\n  private async emitInitialSession(id: string): Promise<void> {\r\n    try {\r\n      const {\r\n        data: { session },\r\n        error,\r\n      } = await this.getSession()\r\n      if (error) throw error\r\n\r\n      this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', session)\r\n    } catch (err) {\r\n      this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', null)\r\n      console.error(err)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a password reset request to an email address.\r\n   * @param email The email address of the user.\r\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\r\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\r\n   */\r\n  async resetPasswordForEmail(\r\n    email: string,\r\n    options: {\r\n      redirectTo?: string\r\n      captchaToken?: string\r\n    } = {}\r\n  ): Promise<\r\n    | {\r\n        data: {}\r\n        error: null\r\n      }\r\n    | { data: null; error: AuthError }\r\n  > {\r\n    let codeChallenge: string | null = null\r\n    let codeChallengeMethod: string | null = null\r\n    if (this.flowType === 'pkce') {\r\n      const codeVerifier = generatePKCEVerifier()\r\n      await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\r\n      codeChallenge = await generatePKCEChallenge(codeVerifier)\r\n      codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\r\n    }\r\n    try {\r\n      return await _request(this.fetch, 'POST', `${this.url}/recover`, {\r\n        body: {\r\n          email,\r\n          code_challenge: codeChallenge,\r\n          code_challenge_method: codeChallengeMethod,\r\n          gotrue_meta_security: { captcha_token: options.captchaToken },\r\n        },\r\n        headers: this.headers,\r\n        redirectTo: options.redirectTo,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a new JWT.\r\n   * @param refreshToken A valid refresh token that was returned on login.\r\n   */\r\n  private async _refreshAccessToken(refreshToken: string): Promise<AuthResponse> {\r\n    try {\r\n      const startedAt = Date.now()\r\n\r\n      // will attempt to refresh the token with exponential backoff\r\n      return await retryable(\r\n        async (attempt) => {\r\n          await sleep(attempt * 200) // 0, 200, 400, 800, ...\r\n\r\n          return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\r\n            body: { refresh_token: refreshToken },\r\n            headers: this.headers,\r\n            xform: _sessionResponse,\r\n          })\r\n        },\r\n        (attempt, _, result) =>\r\n          result &&\r\n          result.error &&\r\n          result.error instanceof AuthRetryableFetchError &&\r\n          // retryable only if the request can be sent before the backoff overflows the tick duration\r\n          Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION\r\n      )\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: { session: null, user: null }, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private _isValidSession(maybeSession: unknown): maybeSession is Session {\r\n    const isValidSession =\r\n      typeof maybeSession === 'object' &&\r\n      maybeSession !== null &&\r\n      'access_token' in maybeSession &&\r\n      'refresh_token' in maybeSession &&\r\n      'expires_at' in maybeSession\r\n\r\n    return isValidSession\r\n  }\r\n\r\n  private async _handleProviderSignIn(\r\n    provider: Provider,\r\n    options: {\r\n      redirectTo?: string\r\n      scopes?: string\r\n      queryParams?: { [key: string]: string }\r\n      skipBrowserRedirect?: boolean\r\n    }\r\n  ) {\r\n    const url: string = await this._getUrlForProvider(provider, {\r\n      redirectTo: options.redirectTo,\r\n      scopes: options.scopes,\r\n      queryParams: options.queryParams,\r\n    })\r\n    // try to open on the browser\r\n    if (isBrowser() && !options.skipBrowserRedirect) {\r\n      window.location.assign(url)\r\n    }\r\n\r\n    return { data: { provider, url }, error: null }\r\n  }\r\n\r\n  /**\r\n   * Recovers the session from LocalStorage and refreshes\r\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\r\n   */\r\n  private async _recoverAndRefresh() {\r\n    try {\r\n      const currentSession = await getItemAsync(this.storage, this.storageKey)\r\n      if (!this._isValidSession(currentSession)) {\r\n        if (currentSession !== null) {\r\n          await this._removeSession()\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      const timeNow = Math.round(Date.now() / 1000)\r\n\r\n      if ((currentSession.expires_at ?? Infinity) < timeNow + EXPIRY_MARGIN) {\r\n        if (this.autoRefreshToken && currentSession.refresh_token) {\r\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\r\n\r\n          if (error) {\r\n            console.log(error.message)\r\n            await this._removeSession()\r\n          }\r\n        } else {\r\n          await this._removeSession()\r\n        }\r\n      } else {\r\n        if (this.persistSession) {\r\n          await this._saveSession(currentSession)\r\n        }\r\n        this._notifyAllSubscribers('SIGNED_IN', currentSession)\r\n      }\r\n    } catch (err) {\r\n      console.error(err)\r\n      return\r\n    }\r\n  }\r\n\r\n  private async _callRefreshToken(refreshToken: string): Promise<CallRefreshTokenResult> {\r\n    // refreshing is already in progress\r\n    if (this.refreshingDeferred) {\r\n      return this.refreshingDeferred.promise\r\n    }\r\n\r\n    try {\r\n      this.refreshingDeferred = new Deferred<CallRefreshTokenResult>()\r\n\r\n      if (!refreshToken) {\r\n        throw new AuthSessionMissingError()\r\n      }\r\n      const { data, error } = await this._refreshAccessToken(refreshToken)\r\n      if (error) throw error\r\n      if (!data.session) throw new AuthSessionMissingError()\r\n\r\n      await this._saveSession(data.session)\r\n      this._notifyAllSubscribers('TOKEN_REFRESHED', data.session)\r\n\r\n      const result = { session: data.session, error: null }\r\n\r\n      this.refreshingDeferred.resolve(result)\r\n\r\n      return result\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        const result = { session: null, error }\r\n\r\n        this.refreshingDeferred?.resolve(result)\r\n\r\n        return result\r\n      }\r\n\r\n      this.refreshingDeferred?.reject(error)\r\n      throw error\r\n    } finally {\r\n      this.refreshingDeferred = null\r\n    }\r\n  }\r\n\r\n  private _notifyAllSubscribers(event: AuthChangeEvent, session: Session | null, broadcast = true) {\r\n    if (this.broadcastChannel && broadcast) {\r\n      this.broadcastChannel.postMessage({ event, session })\r\n    }\r\n\r\n    this.stateChangeEmitters.forEach((x) => x.callback(event, session))\r\n  }\r\n\r\n  /**\r\n   * set currentSession and currentUser\r\n   * process to _startAutoRefreshToken if possible\r\n   */\r\n  private async _saveSession(session: Session) {\r\n    if (!this.persistSession) {\r\n      this.inMemorySession = session\r\n    }\r\n\r\n    if (this.persistSession && session.expires_at) {\r\n      await this._persistSession(session)\r\n    }\r\n  }\r\n\r\n  private _persistSession(currentSession: Session) {\r\n    return setItemAsync(this.storage, this.storageKey, currentSession)\r\n  }\r\n\r\n  private async _removeSession() {\r\n    if (this.persistSession) {\r\n      await removeItemAsync(this.storage, this.storageKey)\r\n    } else {\r\n      this.inMemorySession = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes any registered visibilitychange callback.\r\n   *\r\n   * {@see #startAutoRefresh}\r\n   * {@see #stopAutoRefresh}\r\n   */\r\n  private _removeVisibilityChangedCallback() {\r\n    const callback = this.visibilityChangedCallback\r\n    this.visibilityChangedCallback = null\r\n\r\n    try {\r\n      if (callback && isBrowser() && window?.removeEventListener) {\r\n        window.removeEventListener('visibilitychange', callback)\r\n      }\r\n    } catch (e) {\r\n      console.error('removing visibilitychange callback failed', e)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\r\n   * within the library.\r\n   */\r\n  private async _startAutoRefresh() {\r\n    await this._stopAutoRefresh()\r\n\r\n    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION)\r\n    this.autoRefreshTicker = ticker\r\n\r\n    if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\r\n      // ticker is a NodeJS Timeout object that has an `unref` method\r\n      // https://nodejs.org/api/timers.html#timeoutunref\r\n      // When auto refresh is used in NodeJS (like for testing) the\r\n      // `setInterval` is preventing the process from being marked as\r\n      // finished and tests run endlessly. This can be prevented by calling\r\n      // `unref()` on the returned object.\r\n      ticker.unref()\r\n      // @ts-ignore\r\n    } else if (typeof Deno !== 'undefined' && typeof Deno.unrefTimer === 'function') {\r\n      // similar like for NodeJS, but with the Deno API\r\n      // https://deno.land/api@latest?unstable&s=Deno.unrefTimer\r\n      // @ts-ignore\r\n      Deno.unrefTimer(ticker)\r\n    }\r\n\r\n    // run the tick immediately\r\n    await this._autoRefreshTokenTick()\r\n  }\r\n\r\n  /**\r\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\r\n   * within the library.\r\n   */\r\n  private async _stopAutoRefresh() {\r\n    const ticker = this.autoRefreshTicker\r\n    this.autoRefreshTicker = null\r\n\r\n    if (ticker) {\r\n      clearInterval(ticker)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts an auto-refresh process in the background. The session is checked\r\n   * every few seconds. Close to the time of expiration a process is started to\r\n   * refresh the session. If refreshing fails it will be retried for as long as\r\n   * necessary.\r\n   *\r\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\r\n   * to call this function, it will be called for you.\r\n   *\r\n   * On browsers the refresh process works only when the tab/window is in the\r\n   * foreground to conserve resources as well as prevent race conditions and\r\n   * flooding auth with requests. If you call this method any managed\r\n   * visibility change callback will be removed and you must manage visibility\r\n   * changes on your own.\r\n   *\r\n   * On non-browser platforms the refresh process works *continuously* in the\r\n   * background, which may not be desireable. You should hook into your\r\n   * platform's foreground indication mechanism and call these methods\r\n   * appropriately to conserve resources.\r\n   *\r\n   * {@see #stopAutoRefresh}\r\n   */\r\n  async startAutoRefresh() {\r\n    this._removeVisibilityChangedCallback()\r\n    await this._startAutoRefresh()\r\n  }\r\n\r\n  /**\r\n   * Stops an active auto refresh process running in the background (if any).\r\n   *\r\n   * If you call this method any managed visibility change callback will be\r\n   * removed and you must manage visibility changes on your own.\r\n   *\r\n   * See {@link #startAutoRefresh} for more details.\r\n   */\r\n  async stopAutoRefresh() {\r\n    this._removeVisibilityChangedCallback()\r\n    await this._stopAutoRefresh()\r\n  }\r\n\r\n  /**\r\n   * Runs the auto refresh token tick.\r\n   */\r\n  private async _autoRefreshTokenTick() {\r\n    const now = Date.now()\r\n\r\n    try {\r\n      const {\r\n        data: { session },\r\n      } = await this.getSession()\r\n\r\n      if (!session || !session.refresh_token || !session.expires_at) {\r\n        return\r\n      }\r\n\r\n      // session will expire in this many ticks (or has already expired if <= 0)\r\n      const expiresInTicks = Math.floor(\r\n        (session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION\r\n      )\r\n\r\n      if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\r\n        await this._callRefreshToken(session.refresh_token)\r\n      }\r\n    } catch (e: any) {\r\n      console.error('Auto refresh tick failed with error. This is likely a transient error.', e)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers callbacks on the browser / platform, which in-turn run\r\n   * algorithms when the browser window/tab are in foreground. On non-browser\r\n   * platforms it assumes always foreground.\r\n   */\r\n  private async _handleVisibilityChange() {\r\n    if (!isBrowser() || !window?.addEventListener) {\r\n      if (this.autoRefreshToken) {\r\n        // in non-browser environments the refresh token ticker runs always\r\n        this.startAutoRefresh()\r\n      }\r\n\r\n      return false\r\n    }\r\n\r\n    try {\r\n      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false)\r\n\r\n      window?.addEventListener('visibilitychange', this.visibilityChangedCallback)\r\n\r\n      // now immediately call the visbility changed callback to setup with the\r\n      // current visbility state\r\n      await this._onVisibilityChanged(true) // initial call\r\n    } catch (error) {\r\n      console.error('_handleVisibilityChange', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback registered with `window.addEventListener('visibilitychange')`.\r\n   */\r\n  private async _onVisibilityChanged(isInitial: boolean) {\r\n    if (document.visibilityState === 'visible') {\r\n      if (!isInitial) {\r\n        // initial visibility change setup is handled in another flow under #initialize()\r\n        await this.initializePromise\r\n        await this._recoverAndRefresh()\r\n      }\r\n\r\n      if (this.autoRefreshToken) {\r\n        // in browser environments the refresh token ticker runs only on focused tabs\r\n        // which prevents race conditions\r\n        this._startAutoRefresh()\r\n      }\r\n    } else if (document.visibilityState === 'hidden') {\r\n      if (this.autoRefreshToken) {\r\n        this._stopAutoRefresh()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the relevant login URL for a third-party provider.\r\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\r\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\r\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\r\n   */\r\n  private async _getUrlForProvider(\r\n    provider: Provider,\r\n    options: {\r\n      redirectTo?: string\r\n      scopes?: string\r\n      queryParams?: { [key: string]: string }\r\n    }\r\n  ) {\r\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\r\n    if (options?.redirectTo) {\r\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\r\n    }\r\n    if (options?.scopes) {\r\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\r\n    }\r\n    if (this.flowType === 'pkce') {\r\n      const codeVerifier = generatePKCEVerifier()\r\n      await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\r\n      const codeChallenge = await generatePKCEChallenge(codeVerifier)\r\n      const codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\r\n      const flowParams = new URLSearchParams({\r\n        code_challenge: `${encodeURIComponent(codeChallenge)}`,\r\n        code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`,\r\n      })\r\n      urlParams.push(flowParams.toString())\r\n    }\r\n    if (options?.queryParams) {\r\n      const query = new URLSearchParams(options.queryParams)\r\n      urlParams.push(query.toString())\r\n    }\r\n\r\n    return `${this.url}/authorize?${urlParams.join('&')}`\r\n  }\r\n\r\n  private async _unenroll(params: MFAUnenrollParams): Promise<AuthMFAUnenrollResponse> {\r\n    try {\r\n      const { data: sessionData, error: sessionError } = await this.getSession()\r\n      if (sessionError) {\r\n        return { data: null, error: sessionError }\r\n      }\r\n\r\n      return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\r\n        headers: this.headers,\r\n        jwt: sessionData?.session?.access_token,\r\n      })\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@see GoTrueMFAApi#enroll}\r\n   */\r\n  private async _enroll(params: MFAEnrollParams): Promise<AuthMFAEnrollResponse> {\r\n    try {\r\n      const { data: sessionData, error: sessionError } = await this.getSession()\r\n      if (sessionError) {\r\n        return { data: null, error: sessionError }\r\n      }\r\n\r\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\r\n        body: {\r\n          friendly_name: params.friendlyName,\r\n          factor_type: params.factorType,\r\n          issuer: params.issuer,\r\n        },\r\n        headers: this.headers,\r\n        jwt: sessionData?.session?.access_token,\r\n      })\r\n\r\n      if (error) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      if (data?.totp?.qr_code) {\r\n        data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`\r\n      }\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@see GoTrueMFAApi#verify}\r\n   */\r\n  private async _verify(params: MFAVerifyParams): Promise<AuthMFAVerifyResponse> {\r\n    try {\r\n      const { data: sessionData, error: sessionError } = await this.getSession()\r\n      if (sessionError) {\r\n        return { data: null, error: sessionError }\r\n      }\r\n\r\n      const { data, error } = await _request(\r\n        this.fetch,\r\n        'POST',\r\n        `${this.url}/factors/${params.factorId}/verify`,\r\n        {\r\n          body: { code: params.code, challenge_id: params.challengeId },\r\n          headers: this.headers,\r\n          jwt: sessionData?.session?.access_token,\r\n        }\r\n      )\r\n      if (error) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      await this._saveSession({\r\n        expires_at: Math.round(Date.now() / 1000) + data.expires_in,\r\n        ...data,\r\n      })\r\n      this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data)\r\n\r\n      return { data, error }\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@see GoTrueMFAApi#challenge}\r\n   */\r\n  private async _challenge(params: MFAChallengeParams): Promise<AuthMFAChallengeResponse> {\r\n    try {\r\n      const { data: sessionData, error: sessionError } = await this.getSession()\r\n      if (sessionError) {\r\n        return { data: null, error: sessionError }\r\n      }\r\n\r\n      return await _request(\r\n        this.fetch,\r\n        'POST',\r\n        `${this.url}/factors/${params.factorId}/challenge`,\r\n        {\r\n          headers: this.headers,\r\n          jwt: sessionData?.session?.access_token,\r\n        }\r\n      )\r\n    } catch (error) {\r\n      if (isAuthError(error)) {\r\n        return { data: null, error }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@see GoTrueMFAApi#challengeAndVerify}\r\n   */\r\n  private async _challengeAndVerify(\r\n    params: MFAChallengeAndVerifyParams\r\n  ): Promise<AuthMFAVerifyResponse> {\r\n    const { data: challengeData, error: challengeError } = await this._challenge({\r\n      factorId: params.factorId,\r\n    })\r\n    if (challengeError) {\r\n      return { data: null, error: challengeError }\r\n    }\r\n    return await this._verify({\r\n      factorId: params.factorId,\r\n      challengeId: challengeData.id,\r\n      code: params.code,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * {@see GoTrueMFAApi#listFactors}\r\n   */\r\n  private async _listFactors(): Promise<AuthMFAListFactorsResponse> {\r\n    const {\r\n      data: { user },\r\n      error: userError,\r\n    } = await this.getUser()\r\n    if (userError) {\r\n      return { data: null, error: userError }\r\n    }\r\n\r\n    const factors = user?.factors || []\r\n    const totp = factors.filter(\r\n      (factor) => factor.factor_type === 'totp' && factor.status === 'verified'\r\n    )\r\n\r\n    return {\r\n      data: {\r\n        all: factors,\r\n        totp,\r\n      },\r\n      error: null,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\r\n   */\r\n  private async _getAuthenticatorAssuranceLevel(): Promise<AuthMFAGetAuthenticatorAssuranceLevelResponse> {\r\n    const {\r\n      data: { session },\r\n      error: sessionError,\r\n    } = await this.getSession()\r\n    if (sessionError) {\r\n      return { data: null, error: sessionError }\r\n    }\r\n    if (!session) {\r\n      return {\r\n        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\r\n        error: null,\r\n      }\r\n    }\r\n\r\n    const payload = this._decodeJWT(session.access_token)\r\n\r\n    let currentLevel: AuthenticatorAssuranceLevels | null = null\r\n\r\n    if (payload.aal) {\r\n      currentLevel = payload.aal\r\n    }\r\n\r\n    let nextLevel: AuthenticatorAssuranceLevels | null = currentLevel\r\n\r\n    const verifiedFactors =\r\n      session.user.factors?.filter((factor: Factor) => factor.status === 'verified') ?? []\r\n\r\n    if (verifiedFactors.length > 0) {\r\n      nextLevel = 'aal2'\r\n    }\r\n\r\n    const currentAuthenticationMethods = payload.amr || []\r\n\r\n    return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null }\r\n  }\r\n}\r\n", "import { GoTrueClient } from '@supabase/gotrue-js'\r\nimport { SupabaseAuthClientOptions } from './types'\r\n\r\nexport class SupabaseAuthClient extends GoTrueClient {\r\n  constructor(options: SupabaseAuthClientOptions) {\r\n    super(options)\r\n  }\r\n}\r\n", "import { FunctionsClient } from '@supabase/functions-js'\r\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\r\nimport {\r\n  PostgrestClient,\r\n  PostgrestFilterBuilder,\r\n  PostgrestQueryBuilder,\r\n} from '@supabase/postgrest-js'\r\nimport {\r\n  RealtimeChannel,\r\n  RealtimeChannelOptions,\r\n  RealtimeClient,\r\n  RealtimeClientOptions,\r\n} from '@supabase/realtime-js'\r\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\r\nimport { DEFAULT_HEADERS } from './lib/constants'\r\nimport { fetchWithAuth } from './lib/fetch'\r\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\r\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\r\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\r\n\r\nconst DEFAULT_GLOBAL_OPTIONS = {\r\n  headers: DEFAULT_HEADERS,\r\n}\r\n\r\nconst DEFAULT_DB_OPTIONS = {\r\n  schema: 'public',\r\n}\r\n\r\nconst DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\r\n  autoRefreshToken: true,\r\n  persistSession: true,\r\n  detectSessionInUrl: true,\r\n  flowType: 'implicit',\r\n}\r\n\r\nconst DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\r\n\r\n/**\r\n * Supabase Client.\r\n *\r\n * An isomorphic Javascript client for interacting with Postgres.\r\n */\r\nexport default class SupabaseClient<\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n> {\r\n  /**\r\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\r\n   */\r\n  auth: SupabaseAuthClient\r\n  realtime: RealtimeClient\r\n\r\n  protected realtimeUrl: string\r\n  protected authUrl: string\r\n  protected storageUrl: string\r\n  protected functionsUrl: string\r\n  protected rest: PostgrestClient<Database, SchemaName>\r\n  protected storageKey: string\r\n  protected fetch?: Fetch\r\n  protected changedAccessToken: string | undefined\r\n\r\n  protected headers: {\r\n    [key: string]: string\r\n  }\r\n\r\n  /**\r\n   * Create a new client for use in the browser.\r\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\r\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\r\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\r\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\r\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\r\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\r\n   * @param options.realtime Options passed along to realtime-js constructor.\r\n   * @param options.global.fetch A custom fetch implementation.\r\n   * @param options.global.headers Any additional headers to send with each network request.\r\n   */\r\n  constructor(\r\n    protected supabaseUrl: string,\r\n    protected supabaseKey: string,\r\n    options?: SupabaseClientOptions<SchemaName>\r\n  ) {\r\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\r\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\r\n\r\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\r\n\r\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\r\n    this.authUrl = `${_supabaseUrl}/auth/v1`\r\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\r\n\r\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/)\r\n    if (isPlatform) {\r\n      const urlParts = _supabaseUrl.split('.')\r\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`\r\n    } else {\r\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`\r\n    }\r\n    // default storage key uses the supabase project ref as a namespace\r\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\r\n    const DEFAULTS = {\r\n      db: DEFAULT_DB_OPTIONS,\r\n      realtime: DEFAULT_REALTIME_OPTIONS,\r\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\r\n      global: DEFAULT_GLOBAL_OPTIONS,\r\n    }\r\n\r\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\r\n\r\n    this.storageKey = settings.auth?.storageKey ?? ''\r\n    this.headers = settings.global?.headers ?? {}\r\n\r\n    this.auth = this._initSupabaseAuthClient(\r\n      settings.auth ?? {},\r\n      this.headers,\r\n      settings.global?.fetch\r\n    )\r\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\r\n\r\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\r\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\r\n      headers: this.headers,\r\n      schema: settings.db?.schema,\r\n      fetch: this.fetch,\r\n    })\r\n\r\n    this._listenForAuthEvents()\r\n  }\r\n\r\n  /**\r\n   * Supabase Functions allows you to deploy and invoke edge functions.\r\n   */\r\n  get functions() {\r\n    return new FunctionsClient(this.functionsUrl, {\r\n      headers: this.headers,\r\n      customFetch: this.fetch,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\r\n   */\r\n  get storage() {\r\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\r\n  }\r\n\r\n  /**\r\n   * Perform a table operation.\r\n   *\r\n   * @param table The table name to operate on.\r\n   */\r\n  from<\r\n    TableName extends string & keyof Schema['Tables'],\r\n    Table extends Schema['Tables'][TableName]\r\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\r\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\r\n    relation: ViewName\r\n  ): PostgrestQueryBuilder<Schema, View>\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\r\n    return this.rest.from(relation)\r\n  }\r\n\r\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn  The function name to call.\r\n   * @param args  The parameters to pass to the function call.\r\n   * @param options.head   When set to true, no data will be returned.\r\n   * @param options.count  Count algorithm to use to count rows in a table.\r\n   *\r\n   */\r\n  rpc<\r\n    FunctionName extends string & keyof Schema['Functions'],\r\n    Function_ extends Schema['Functions'][FunctionName]\r\n  >(\r\n    fn: FunctionName,\r\n    args: Function_['Args'] = {},\r\n    options?: {\r\n      head?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    }\r\n  ): PostgrestFilterBuilder<\r\n    Schema,\r\n    Function_['Returns'] extends any[]\r\n      ? Function_['Returns'][number] extends Record<string, unknown>\r\n        ? Function_['Returns'][number]\r\n        : never\r\n      : never,\r\n    Function_['Returns']\r\n  > {\r\n    return this.rest.rpc(fn, args, options)\r\n  }\r\n\r\n  /**\r\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\r\n   *\r\n   * @param {string} name - The name of the Realtime channel.\r\n   * @param {Object} opts - The options to pass to the Realtime channel.\r\n   *\r\n   */\r\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\r\n    return this.realtime.channel(name, opts)\r\n  }\r\n\r\n  /**\r\n   * Returns all Realtime channels.\r\n   */\r\n  getChannels(): RealtimeChannel[] {\r\n    return this.realtime.getChannels()\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes Realtime channel from Realtime client.\r\n   *\r\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\r\n   *\r\n   */\r\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\r\n    return this.realtime.removeChannel(channel)\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes all Realtime channels from Realtime client.\r\n   */\r\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\r\n    return this.realtime.removeAllChannels()\r\n  }\r\n\r\n  private async _getAccessToken() {\r\n    const { data } = await this.auth.getSession()\r\n\r\n    return data.session?.access_token ?? null\r\n  }\r\n\r\n  private _initSupabaseAuthClient(\r\n    {\r\n      autoRefreshToken,\r\n      persistSession,\r\n      detectSessionInUrl,\r\n      storage,\r\n      storageKey,\r\n      flowType,\r\n    }: SupabaseAuthClientOptions,\r\n    headers?: Record<string, string>,\r\n    fetch?: Fetch\r\n  ) {\r\n    const authHeaders = {\r\n      Authorization: `Bearer ${this.supabaseKey}`,\r\n      apikey: `${this.supabaseKey}`,\r\n    }\r\n    return new SupabaseAuthClient({\r\n      url: this.authUrl,\r\n      headers: { ...authHeaders, ...headers },\r\n      storageKey: storageKey,\r\n      autoRefreshToken,\r\n      persistSession,\r\n      detectSessionInUrl,\r\n      storage,\r\n      flowType,\r\n      fetch,\r\n    })\r\n  }\r\n\r\n  private _initRealtimeClient(options: RealtimeClientOptions) {\r\n    return new RealtimeClient(this.realtimeUrl, {\r\n      ...options,\r\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\r\n    })\r\n  }\r\n\r\n  private _listenForAuthEvents() {\r\n    let data = this.auth.onAuthStateChange((event, session) => {\r\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\r\n    })\r\n    return data\r\n  }\r\n\r\n  private _handleTokenChanged(\r\n    event: AuthChangeEvent,\r\n    token: string | undefined,\r\n    source: 'CLIENT' | 'STORAGE'\r\n  ) {\r\n    if (\r\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\r\n      this.changedAccessToken !== token\r\n    ) {\r\n      // Token has changed\r\n      this.realtime.setAuth(token ?? null)\r\n\r\n      this.changedAccessToken = token\r\n    } else if (event === 'SIGNED_OUT') {\r\n      // Token is removed\r\n      this.realtime.setAuth(this.supabaseKey)\r\n      if (source == 'STORAGE') this.auth.signOut()\r\n      this.changedAccessToken = undefined\r\n    }\r\n  }\r\n}\r\n", "import SupabaseClient from './SupabaseClient'\r\nimport type { GenericSchema, SupabaseClientOptions } from './lib/types'\r\n\r\nexport * from '@supabase/gotrue-js'\r\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/gotrue-js'\r\nexport type {\r\n  PostgrestResponse,\r\n  PostgrestSingleResponse,\r\n  PostgrestMaybeSingleResponse,\r\n  PostgrestError,\r\n} from '@supabase/postgrest-js'\r\nexport {\r\n  FunctionsHttpError,\r\n  FunctionsFetchError,\r\n  FunctionsRelayError,\r\n  FunctionsError,\r\n} from '@supabase/functions-js'\r\nexport * from '@supabase/realtime-js'\r\nexport { default as SupabaseClient } from './SupabaseClient'\r\nexport type { SupabaseClientOptions } from './lib/types'\r\n\r\n/**\r\n * Creates a new Supabase Client.\r\n */\r\nexport const createClient = <\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n>(\r\n  supabaseUrl: string,\r\n  supabaseKey: string,\r\n  options?: SupabaseClientOptions<SchemaName>\r\n): SupabaseClient<Database, SchemaName, Schema> => {\r\n  return new SupabaseClient(supabaseUrl, supabaseKey, options)\r\n}\r\n"],
  "mappings": ";;;;;;;;;AAAA;AAAA;AAAA,QAAI,gBAAgB,WAAY;AAC/B,UAAI,OAAO,SAAS,YAAY;AAAM,eAAO;AAC7C,UAAI,OAAO,WAAW,YAAY;AAAQ,eAAO;AACjD,YAAM,IAAI,MAAM,iCAAiC;AAAA,IAClD;AAEA,WAAO,UAAW,WAAY;AAC7B,UAAI;AAAM,eAAO;AAKjB,UAAI,OAAO,eAAe,YAAY;AAAY,eAAO;AAKzD,UAAI;AACH,eAAO,eAAe,OAAO,WAAW,cAAc;AAAA,UACrD,KAAK,WAAY;AAAE,mBAAO;AAAA,UAAM;AAAA,UAChC,cAAc;AAAA,QACf,CAAC;AAAA,MACF,SAAS,OAAP;AAGD,eAAO,cAAc;AAAA,MACtB;AACA,UAAI;AAEH,YAAI,CAAC;AAAY,iBAAO,cAAc;AACtC,eAAO;AAAA,MACR,UAAE;AACD,eAAO,OAAO,UAAU;AAAA,MACzB;AAAA,IACD,EAAG;AAAA;AAAA;;;AClCH;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,aAAe;AAAA,MACf,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,QAAU;AAAA,MACV,cAAgB;AAAA,QACd;AAAA,MACF;AAAA,MACA,SAAW;AAAA,MACX,YAAc;AAAA,QACZ,MAAQ;AAAA,QACR,KAAO;AAAA,MACT;AAAA,MACA,UAAY;AAAA,MACZ,SAAW;AAAA,QACT,MAAQ;AAAA,MACV;AAAA,MACA,cAAgB;AAAA,QACd,YAAc;AAAA,QACd,OAAS;AAAA,QACT,WAAW;AAAA,QACX,wBAAwB;AAAA,QACxB,kBAAkB;AAAA,QAClB,OAAS;AAAA,MACX;AAAA,MACA,iBAAmB;AAAA,QACjB,gBAAgB;AAAA,QAChB,MAAQ;AAAA,QACR,eAAe;AAAA,QACf,kBAAkB;AAAA,QAClB,QAAU;AAAA,QACV,MAAQ;AAAA,MACV;AAAA,MACA,QAAU;AAAA,QACR,SAAW;AAAA,MACb;AAAA,MACA,SAAW;AAAA,QACT,MAAQ;AAAA,QACR,MAAQ;AAAA,MACV;AAAA,MACA,MAAQ;AAAA,MACR,aAAe;AAAA,QACb,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,MACX,SAAW;AAAA,IACb;AAAA;AAAA;;;ACzDA;AAAA;AAAA,WAAO,UAAU,kBAA2B;AAAA;AAAA;;;ACA5C;AAAA;AAAA,QAAI;AACJ,QAAI,OAAO,eAAe,UAAU;AACnC,oBAAc;AAAA,IACf,OAAO;AACN,UAAI;AACH,sBAAc;AAAA,MACf,SAAS,OAAP;AAAA,MACF,UAAE;AACD,YAAI,CAAC,eAAe,OAAO,WAAW,aAAa;AAAE,wBAAc;AAAA,QAAQ;AAC3E,YAAI,CAAC,aAAa;AAAE,gBAAM,IAAI,MAAM,iCAAiC;AAAA,QAAG;AAAA,MACzE;AAAA,IACD;AAEA,QAAI,kBAAkB,YAAY,aAAa,YAAY;AAC3D,QAAI,oBAAoB;AAMxB,aAAS,aAAa,KAAK,WAAW;AACrC,UAAI;AAEJ,UAAI,WAAW;AACd,0BAAkB,IAAI,gBAAgB,KAAK,SAAS;AAAA,MACrD,OACK;AACJ,0BAAkB,IAAI,gBAAgB,GAAG;AAAA,MAC1C;AASA,aAAO;AAAA,IACR;AACA,QAAI,iBAAiB;AACpB,OAAC,cAAc,QAAQ,WAAW,QAAQ,EAAE,QAAQ,SAAS,MAAM;AAClE,eAAO,eAAe,cAAc,MAAM;AAAA,UACzC,KAAK,WAAW;AAAE,mBAAO,gBAAgB,IAAI;AAAA,UAAG;AAAA,QACjD,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAKA,WAAO,UAAU;AAAA,MACb,gBAAiB,kBAAkB,eAAe;AAAA,MAClD,WAAiB;AAAA,IACrB;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDO,IAAM,eAAe,CAAC,gBAA8B;AACzD,MAAI;AACJ,MAAI,aAAa;AACf,aAAS;aACA,OAAO,UAAU,aAAa;AACvC,aAAS,IAAU,SAAQ,UAAA,QAAA,QAAA,QAAA,aAAA;AAAC,aAAA,OAAO,MAAM,OAAO,gCAAa,GAAG,MAAM,GAAG,IAAI;IAAC,CAAA;SACzE;AACL,aAAS;;AAEX,SAAO,IAAI,SAAS,OAAO,GAAG,IAAI;AACpC;;;ACIM,IAAO,iBAAP,cAA8B,MAAK;EAEvC,YAAY,SAAiB,OAAO,kBAAkB,SAAa;AACjE,UAAM,OAAO;AACb,UAAM,OAAO;AACb,SAAK,UAAU;EACjB;;AAGI,IAAO,sBAAP,cAAmC,eAAc;EACrD,YAAY,SAAY;AACtB,UAAM,iDAAiD,uBAAuB,OAAO;EACvF;;AAGI,IAAO,sBAAP,cAAmC,eAAc;EACrD,YAAY,SAAY;AACtB,UAAM,0CAA0C,uBAAuB,OAAO;EAChF;;AAGI,IAAO,qBAAP,cAAkC,eAAc;EACpD,YAAY,SAAY;AACtB,UAAM,gDAAgD,sBAAsB,OAAO;EACrF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BI,IAAO,kBAAP,MAAsB;EAK1B,YACE,KACA,EACE,UAAU,CAAA,GACV,YAAW,IAIT,CAAA,GAAE;AAEN,SAAK,MAAM;AACX,SAAK,UAAU;AACf,SAAK,QAAQ,aAAa,WAAW;EACvC;;;;;EAMA,QAAQ,OAAa;AACnB,SAAK,QAAQ,gBAAgB,UAAU;EACzC;;;;;;EAOM,OACJ,cACA,UAAiC,CAAA,GAAE;;;AAEnC,UAAI;AACF,cAAM,EAAE,SAAS,QAAQ,MAAM,aAAY,IAAK;AAEhD,YAAI,WAAmC,CAAA;AACvC,YAAI;AACJ,YACE,iBACE,WAAW,CAAC,OAAO,UAAU,eAAe,KAAK,SAAS,cAAc,KAAM,CAAC,UACjF;AACA,cACG,OAAO,SAAS,eAAe,wBAAwB,QACxD,wBAAwB,aACxB;AAGA,qBAAS,cAAc,IAAI;AAC3B,mBAAO;qBACE,OAAO,iBAAiB,UAAU;AAE3C,qBAAS,cAAc,IAAI;AAC3B,mBAAO;qBACE,OAAO,aAAa,eAAe,wBAAwB,UAAU;AAG9E,mBAAO;iBACF;AAEL,qBAAS,cAAc,IAAI;AAC3B,mBAAO,KAAK,UAAU,YAAY;;;AAItC,cAAM,WAAW,MAAM,KAAK,MAAM,GAAG,KAAK,OAAO,gBAAgB;UAC/D,QAAQ,UAAU;;;;;UAKlB,SAAO,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,QAAQ,GAAK,KAAK,OAAO,GAAK,OAAO;UACnD;SACD,EAAE,MAAM,CAAC,eAAc;AACtB,gBAAM,IAAI,oBAAoB,UAAU;QAC1C,CAAC;AAED,cAAM,eAAe,SAAS,QAAQ,IAAI,eAAe;AACzD,YAAI,gBAAgB,iBAAiB,QAAQ;AAC3C,gBAAM,IAAI,oBAAoB,QAAQ;;AAGxC,YAAI,CAAC,SAAS,IAAI;AAChB,gBAAM,IAAI,mBAAmB,QAAQ;;AAGvC,YAAI,iBAAgB,KAAA,SAAS,QAAQ,IAAI,cAAc,OAAC,QAAA,OAAA,SAAA,KAAI,cAAc,MAAM,GAAG,EAAE,CAAC,EAAE,KAAI;AAC5F,YAAI;AACJ,YAAI,iBAAiB,oBAAoB;AACvC,iBAAO,MAAM,SAAS,KAAI;mBACjB,iBAAiB,4BAA4B;AACtD,iBAAO,MAAM,SAAS,KAAI;mBACjB,iBAAiB,uBAAuB;AACjD,iBAAO,MAAM,SAAS,SAAQ;eACzB;AAEL,iBAAO,MAAM,SAAS,KAAI;;AAG5B,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,eAAO,EAAE,MAAM,MAAM,MAAK;;;;;;;ACnHhC,yBAAuB;AAIvB,IAA8B,mBAA9B,MAA8C;EAa5C,YAAY,SAAiC;AALnC,SAAA,qBAAqB;AAM7B,SAAK,SAAS,QAAQ;AACtB,SAAK,MAAM,QAAQ;AACnB,SAAK,UAAU,QAAQ;AACvB,SAAK,SAAS,QAAQ;AACtB,SAAK,OAAO,QAAQ;AACpB,SAAK,qBAAqB,QAAQ;AAClC,SAAK,SAAS,QAAQ;AACtB,SAAK,aAAa,QAAQ;AAE1B,QAAI,QAAQ,OAAO;AACjB,WAAK,QAAQ,QAAQ;eACZ,OAAO,UAAU,aAAa;AACvC,WAAK,QAAQ,mBAAAA;WACR;AACL,WAAK,QAAQ;;EAEjB;;;;;;;EAQA,eAAY;AACV,SAAK,qBAAqB;AAC1B,WAAO;EACT;EAEA,KACE,aAIA,YAAmF;AAGnF,QAAI,KAAK,WAAW,QAAW;eAEpB,CAAC,OAAO,MAAM,EAAE,SAAS,KAAK,MAAM,GAAG;AAChD,WAAK,QAAQ,gBAAgB,IAAI,KAAK;WACjC;AACL,WAAK,QAAQ,iBAAiB,IAAI,KAAK;;AAEzC,QAAI,KAAK,WAAW,SAAS,KAAK,WAAW,QAAQ;AACnD,WAAK,QAAQ,cAAc,IAAI;;AAKjC,UAAM,SAAS,KAAK;AACpB,QAAI,MAAM,OAAO,KAAK,IAAI,SAAQ,GAAI;MACpC,QAAQ,KAAK;MACb,SAAS,KAAK;MACd,MAAM,KAAK,UAAU,KAAK,IAAI;MAC9B,QAAQ,KAAK;KACd,EAAE,KAAK,OAAOC,SAAO;;AACpB,UAAI,QAAQ;AACZ,UAAI,OAAO;AACX,UAAI,QAAuB;AAC3B,UAAI,SAASA,KAAI;AACjB,UAAI,aAAaA,KAAI;AAErB,UAAIA,KAAI,IAAI;AACV,YAAI,KAAK,WAAW,QAAQ;AAC1B,gBAAM,OAAO,MAAMA,KAAI,KAAI;AAC3B,cAAI,SAAS,IAAI;qBAEN,KAAK,QAAQ,QAAQ,MAAM,YAAY;AAChD,mBAAO;qBAEP,KAAK,QAAQ,QAAQ,KACrB,KAAK,QAAQ,QAAQ,EAAE,SAAS,iCAAiC,GACjE;AACA,mBAAO;iBACF;AACL,mBAAO,KAAK,MAAM,IAAI;;;AAI1B,cAAM,eAAc,KAAA,KAAK,QAAQ,QAAQ,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,MAAM,iCAAiC;AACnF,cAAM,gBAAe,KAAAA,KAAI,QAAQ,IAAI,eAAe,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,MAAM,GAAG;AAChE,YAAI,eAAe,gBAAgB,aAAa,SAAS,GAAG;AAC1D,kBAAQ,SAAS,aAAa,CAAC,CAAC;;aAE7B;AACL,cAAM,OAAO,MAAMA,KAAI,KAAI;AAE3B,YAAI;AACF,kBAAQ,KAAK,MAAM,IAAI;AAGvB,cAAI,MAAM,QAAQ,KAAK,KAAKA,KAAI,WAAW,KAAK;AAC9C,mBAAO,CAAA;AACP,oBAAQ;AACR,qBAAS;AACT,yBAAa;;iBAEf,IAAA;AAEA,cAAIA,KAAI,WAAW,OAAO,SAAS,IAAI;AACrC,qBAAS;AACT,yBAAa;iBACR;AACL,oBAAQ;cACN,SAAS;;;;AAKf,YAAI,SAAS,KAAK,gBAAc,KAAA,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,SAAS,wBAAwB,IAAG;AAClF,kBAAQ;AACR,mBAAS;AACT,uBAAa;;AAGf,YAAI,SAAS,KAAK,oBAAoB;AACpC,gBAAM;;;AAIV,YAAM,oBAAoB;QACxB;QACA;QACA;QACA;QACA;;AAGF,aAAO;IACT,CAAC;AACD,QAAI,CAAC,KAAK,oBAAoB;AAC5B,YAAM,IAAI,MAAM,CAAC,eAAc;;AAAC,eAAC;UAC/B,OAAO;YACL,SAAS,IAAG,KAAA,eAAU,QAAV,eAAU,SAAA,SAAV,WAAY,UAAI,QAAA,OAAA,SAAA,KAAI,iBAAiB,eAAU,QAAV,eAAU,SAAA,SAAV,WAAY;YAC7D,SAAS,IAAG,KAAA,eAAU,QAAV,eAAU,SAAA,SAAV,WAAY,WAAK,QAAA,OAAA,SAAA,KAAI;YACjC,MAAM;YACN,MAAM,IAAG,KAAA,eAAU,QAAV,eAAU,SAAA,SAAV,WAAY,UAAI,QAAA,OAAA,SAAA,KAAI;;UAE/B,MAAM;UACN,OAAO;UACP,QAAQ;UACR,YAAY;;OACZ;;AAGJ,WAAO,IAAI,KAAK,aAAa,UAAU;EACzC;;;;ACjKF,IAAqB,4BAArB,cAIU,iBAAwB;;;;;;;;;;EAUhC,OACE,SAAe;AAGf,QAAI,SAAS;AACb,UAAM,kBAAkB,YAAO,QAAP,YAAO,SAAP,UAAW,KAChC,MAAM,EAAE,EACR,IAAI,CAAC,MAAK;AACT,UAAI,KAAK,KAAK,CAAC,KAAK,CAAC,QAAQ;AAC3B,eAAO;;AAET,UAAI,MAAM,KAAK;AACb,iBAAS,CAAC;;AAEZ,aAAO;IACT,CAAC,EACA,KAAK,EAAE;AACV,SAAK,IAAI,aAAa,IAAI,UAAU,cAAc;AAClD,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,WAAK,QAAQ,QAAQ,KAAK;;AAE5B,SAAK,QAAQ,QAAQ,KAAK;AAC1B,WAAO;EACT;;;;;;;;;;;;;;;;;EA0BA,MACE,QACA,EACE,YAAY,MACZ,YACA,aAAY,IAC4D,CAAA,GAAE;AAE5E,UAAM,MAAM,eAAe,GAAG,uBAAuB;AACrD,UAAM,gBAAgB,KAAK,IAAI,aAAa,IAAI,GAAG;AAEnD,SAAK,IAAI,aAAa,IACpB,KACA,GAAG,gBAAgB,GAAG,mBAAmB,KAAK,UAAU,YAAY,QAAQ,SAC1E,eAAe,SAAY,KAAK,aAAa,gBAAgB,cAC7D;AAEJ,WAAO;EACT;;;;;;;;;EAUA,MAAM,OAAe,EAAE,aAAY,IAAgC,CAAA,GAAE;AACnE,UAAM,MAAM,OAAO,iBAAiB,cAAc,UAAU,GAAG;AAC/D,SAAK,IAAI,aAAa,IAAI,KAAK,GAAG,OAAO;AACzC,WAAO;EACT;;;;;;;;;;EAWA,MAAM,MAAc,IAAY,EAAE,aAAY,IAAgC,CAAA,GAAE;AAC9E,UAAM,YAAY,OAAO,iBAAiB,cAAc,WAAW,GAAG;AACtE,UAAM,WAAW,OAAO,iBAAiB,cAAc,UAAU,GAAG;AACpE,SAAK,IAAI,aAAa,IAAI,WAAW,GAAG,MAAM;AAE9C,SAAK,IAAI,aAAa,IAAI,UAAU,GAAG,KAAK,OAAO,GAAG;AACtD,WAAO;EACT;;;;;;EAOA,YAAY,QAAmB;AAC7B,SAAK,SAAS;AACd,WAAO;EACT;;;;;;;EAQA,SAAM;AAGJ,SAAK,QAAQ,QAAQ,IAAI;AACzB,WAAO;EACT;;;;;;;EAQA,cAAW;AAGT,SAAK,QAAQ,QAAQ,IAAI;AACzB,SAAK,aAAa;AAClB,WAAO;EACT;;;;EAKA,MAAG;AACD,SAAK,QAAQ,QAAQ,IAAI;AACzB,WAAO;EACT;;;;EAKA,UAAO;AACL,SAAK,QAAQ,QAAQ,IAAI;AACzB,WAAO;EACT;;;;;;;;;;;;;;;;;;;;;;EAuBA,QAAQ,EACN,UAAU,OACV,UAAU,OACV,WAAW,OACX,UAAU,OACV,MAAM,OACN,SAAS,OAAM,IAQb,CAAA,GAAE;AACJ,UAAM,UAAU;MACd,UAAU,YAAY;MACtB,UAAU,YAAY;MACtB,WAAW,aAAa;MACxB,UAAU,YAAY;MACtB,MAAM,QAAQ;MAEb,OAAO,OAAO,EACd,KAAK,GAAG;AAEX,UAAM,eAAe,KAAK,QAAQ,QAAQ;AAC1C,SAAK,QACH,QAAQ,IACN,8BAA8B,gBAAgB,0BAA0B;AAC5E,QAAI,WAAW;AAAQ,aAAO;;AACzB,aAAO;EACd;;;;;;EAOA,WAAQ;;AACN,UAAK,KAAA,KAAK,QAAQ,QAAQ,OAAC,QAAA,OAAA,SAAA,KAAI,IAAI,KAAI,EAAG,SAAS,GAAG;AACpD,WAAK,QAAQ,QAAQ,KAAK;WACrB;AACL,WAAK,QAAQ,QAAQ,IAAI;;AAE3B,WAAO;EACT;;;;;;EAOA,UAAO;AACL,WAAO;EACT;;;;AC5NF,IAAqB,yBAArB,cAIU,0BAA8C;;;;;;;;;EAWtD,GAAG,QAAgB,OAAc;AAC/B,SAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;AAClD,WAAO;EACT;;;;;;;EAUA,IAAI,QAAgB,OAAc;AAChC,SAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,OAAO;AACnD,WAAO;EACT;;;;;;;EAUA,GAAG,QAAgB,OAAc;AAC/B,SAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;AAClD,WAAO;EACT;;;;;;;EAUA,IAAI,QAAgB,OAAc;AAChC,SAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,OAAO;AACnD,WAAO;EACT;;;;;;;EAUA,GAAG,QAAgB,OAAc;AAC/B,SAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;AAClD,WAAO;EACT;;;;;;;EAUA,IAAI,QAAgB,OAAc;AAChC,SAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,OAAO;AACnD,WAAO;EACT;;;;;;;EAUA,KAAK,QAAgB,SAAe;AAClC,SAAK,IAAI,aAAa,OAAO,QAAQ,QAAQ,SAAS;AACtD,WAAO;EACT;;;;;;;EAUA,UAAU,QAAgB,UAAkB;AAC1C,SAAK,IAAI,aAAa,OAAO,QAAQ,cAAc,SAAS,KAAK,GAAG,IAAI;AACxE,WAAO;EACT;;;;;;;EAUA,UAAU,QAAgB,UAAkB;AAC1C,SAAK,IAAI,aAAa,OAAO,QAAQ,cAAc,SAAS,KAAK,GAAG,IAAI;AACxE,WAAO;EACT;;;;;;;EAUA,MAAM,QAAgB,SAAe;AACnC,SAAK,IAAI,aAAa,OAAO,QAAQ,SAAS,SAAS;AACvD,WAAO;EACT;;;;;;;EAUA,WAAW,QAAgB,UAAkB;AAC3C,SAAK,IAAI,aAAa,OAAO,QAAQ,eAAe,SAAS,KAAK,GAAG,IAAI;AACzE,WAAO;EACT;;;;;;;EAUA,WAAW,QAAgB,UAAkB;AAC3C,SAAK,IAAI,aAAa,OAAO,QAAQ,eAAe,SAAS,KAAK,GAAG,IAAI;AACzE,WAAO;EACT;;;;;;;;;;;;;EAmBA,GAAG,QAAgB,OAAqB;AACtC,SAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;AAClD,WAAO;EACT;;;;;;;EAUA,GAAG,QAAgB,QAAiB;AAClC,UAAM,gBAAgB,OACnB,IAAI,CAAC,MAAK;AAGT,UAAI,OAAO,MAAM,YAAY,IAAI,OAAO,OAAO,EAAE,KAAK,CAAC;AAAG,eAAO,IAAI;;AAChE,eAAO,GAAG;IACjB,CAAC,EACA,KAAK,GAAG;AACX,SAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,gBAAgB;AAC5D,WAAO;EACT;;;;;;;;EAcA,SAAS,QAAgB,OAAmD;AAC1E,QAAI,OAAO,UAAU,UAAU;AAG7B,WAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;eACzC,MAAM,QAAQ,KAAK,GAAG;AAE/B,WAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,MAAM,KAAK,GAAG,IAAI;WACzD;AAEL,WAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,KAAK,UAAU,KAAK,GAAG;;AAEpE,WAAO;EACT;;;;;;;;EAcA,YAAY,QAAgB,OAAmD;AAC7E,QAAI,OAAO,UAAU,UAAU;AAE7B,WAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;eACzC,MAAM,QAAQ,KAAK,GAAG;AAE/B,WAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,MAAM,KAAK,GAAG,IAAI;WACzD;AAEL,WAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,KAAK,UAAU,KAAK,GAAG;;AAEpE,WAAO;EACT;;;;;;;;EAWA,QAAQ,QAAgB,OAAa;AACnC,SAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;AAClD,WAAO;EACT;;;;;;;;;EAYA,SAAS,QAAgB,OAAa;AACpC,SAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,OAAO;AACnD,WAAO;EACT;;;;;;;;EAWA,QAAQ,QAAgB,OAAa;AACnC,SAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;AAClD,WAAO;EACT;;;;;;;;;EAYA,SAAS,QAAgB,OAAa;AACpC,SAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,OAAO;AACnD,WAAO;EACT;;;;;;;;;EAYA,cAAc,QAAgB,OAAa;AACzC,SAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,OAAO;AACnD,WAAO;EACT;;;;;;;;EAcA,SAAS,QAAgB,OAAyB;AAChD,QAAI,OAAO,UAAU,UAAU;AAE7B,WAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;WAC7C;AAEL,WAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,MAAM,KAAK,GAAG,IAAI;;AAEhE,WAAO;EACT;;;;;;;;;;;EAsBA,WACE,QACA,OACA,EAAE,QAAQ,KAAI,IAAmE,CAAA,GAAE;AAEnF,QAAI,WAAW;AACf,QAAI,SAAS,SAAS;AACpB,iBAAW;eACF,SAAS,UAAU;AAC5B,iBAAW;eACF,SAAS,aAAa;AAC/B,iBAAW;;AAEb,UAAM,aAAa,WAAW,SAAY,KAAK,IAAI;AACnD,SAAK,IAAI,aAAa,OAAO,QAAQ,GAAG,cAAc,cAAc,OAAO;AAC3E,WAAO;EACT;;;;;;;;EAWA,MAAM,OAA8B;AAClC,WAAO,QAAQ,KAAK,EAAE,QAAQ,CAAC,CAAC,QAAQ,KAAK,MAAK;AAChD,WAAK,IAAI,aAAa,OAAO,QAAQ,MAAM,OAAO;IACpD,CAAC;AACD,WAAO;EACT;;;;;;;;;;;;;;EAqBA,IAAI,QAAgB,UAAkB,OAAc;AAClD,SAAK,IAAI,aAAa,OAAO,QAAQ,OAAO,YAAY,OAAO;AAC/D,WAAO;EACT;;;;;;;;;;;;;;EAeA,GAAG,SAAiB,EAAE,aAAY,IAAgC,CAAA,GAAE;AAClE,UAAM,MAAM,eAAe,GAAG,oBAAoB;AAClD,SAAK,IAAI,aAAa,OAAO,KAAK,IAAI,UAAU;AAChD,WAAO;EACT;;;;;;;;;;;;;;EAqBA,OAAO,QAAgB,UAAkB,OAAc;AACrD,SAAK,IAAI,aAAa,OAAO,QAAQ,GAAG,YAAY,OAAO;AAC3D,WAAO;EACT;;;;AChfF,IAAqB,wBAArB,MAA0C;EAUxC,YACE,KACA,EACE,UAAU,CAAA,GACV,QACA,OAAAC,OAAK,GAKN;AAED,SAAK,MAAM;AACX,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,QAAQA;EACf;;;;;;;;;;;;;;;;;;;;;;EAuBA,OACE,SACA,EACE,OAAO,OACP,MAAK,IAIH,CAAA,GAAE;AAEN,UAAM,SAAS,OAAO,SAAS;AAE/B,QAAI,SAAS;AACb,UAAM,kBAAkB,YAAO,QAAP,YAAO,SAAP,UAAW,KAChC,MAAM,EAAE,EACR,IAAI,CAAC,MAAK;AACT,UAAI,KAAK,KAAK,CAAC,KAAK,CAAC,QAAQ;AAC3B,eAAO;;AAET,UAAI,MAAM,KAAK;AACb,iBAAS,CAAC;;AAEZ,aAAO;IACT,CAAC,EACA,KAAK,EAAE;AACV,SAAK,IAAI,aAAa,IAAI,UAAU,cAAc;AAClD,QAAI,OAAO;AACT,WAAK,QAAQ,QAAQ,IAAI,SAAS;;AAGpC,WAAO,IAAI,uBAAuB;MAChC;MACA,KAAK,KAAK;MACV,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,OAAO,KAAK;MACZ,YAAY;KAC+B;EAC/C;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BA,OACE,QACA,EACE,OACA,gBAAgB,KAAI,IAIlB,CAAA,GAAE;AAEN,UAAM,SAAS;AAEf,UAAM,iBAAiB,CAAA;AACvB,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,qBAAe,KAAK,KAAK,QAAQ,QAAQ,CAAC;;AAE5C,QAAI,OAAO;AACT,qBAAe,KAAK,SAAS,OAAO;;AAEtC,QAAI,CAAC,eAAe;AAClB,qBAAe,KAAK,iBAAiB;;AAEvC,SAAK,QAAQ,QAAQ,IAAI,eAAe,KAAK,GAAG;AAEhD,QAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,YAAM,UAAU,OAAO,OAAO,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,KAAK,CAAC,CAAC,GAAG,CAAA,CAAc;AACpF,UAAI,QAAQ,SAAS,GAAG;AACtB,cAAM,gBAAgB,CAAC,GAAG,IAAI,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,WAAW,IAAI,SAAS;AACzE,aAAK,IAAI,aAAa,IAAI,WAAW,cAAc,KAAK,GAAG,CAAC;;;AAIhE,WAAO,IAAI,uBAAuB;MAChC;MACA,KAAK,KAAK;MACV,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,MAAM;MACN,OAAO,KAAK;MACZ,YAAY;KACwB;EACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCA,OACE,QACA,EACE,YACA,mBAAmB,OACnB,OACA,gBAAgB,KAAI,IAMlB,CAAA,GAAE;AAEN,UAAM,SAAS;AAEf,UAAM,iBAAiB,CAAC,cAAc,mBAAmB,WAAW,oBAAoB;AAExF,QAAI,eAAe;AAAW,WAAK,IAAI,aAAa,IAAI,eAAe,UAAU;AACjF,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,qBAAe,KAAK,KAAK,QAAQ,QAAQ,CAAC;;AAE5C,QAAI,OAAO;AACT,qBAAe,KAAK,SAAS,OAAO;;AAEtC,QAAI,CAAC,eAAe;AAClB,qBAAe,KAAK,iBAAiB;;AAEvC,SAAK,QAAQ,QAAQ,IAAI,eAAe,KAAK,GAAG;AAEhD,QAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,YAAM,UAAU,OAAO,OAAO,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,KAAK,CAAC,CAAC,GAAG,CAAA,CAAc;AACpF,UAAI,QAAQ,SAAS,GAAG;AACtB,cAAM,gBAAgB,CAAC,GAAG,IAAI,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,WAAW,IAAI,SAAS;AACzE,aAAK,IAAI,aAAa,IAAI,WAAW,cAAc,KAAK,GAAG,CAAC;;;AAIhE,WAAO,IAAI,uBAAuB;MAChC;MACA,KAAK,KAAK;MACV,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,MAAM;MACN,OAAO,KAAK;MACZ,YAAY;KACwB;EACxC;;;;;;;;;;;;;;;;;;;;;;EAuBA,OACE,QACA,EACE,MAAK,IAGH,CAAA,GAAE;AAEN,UAAM,SAAS;AACf,UAAM,iBAAiB,CAAA;AACvB,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,qBAAe,KAAK,KAAK,QAAQ,QAAQ,CAAC;;AAE5C,QAAI,OAAO;AACT,qBAAe,KAAK,SAAS,OAAO;;AAEtC,SAAK,QAAQ,QAAQ,IAAI,eAAe,KAAK,GAAG;AAEhD,WAAO,IAAI,uBAAuB;MAChC;MACA,KAAK,KAAK;MACV,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,MAAM;MACN,OAAO,KAAK;MACZ,YAAY;KACwB;EACxC;;;;;;;;;;;;;;;;;;;;EAqBA,OAAO,EACL,MAAK,IAGH,CAAA,GAAE;AACJ,UAAM,SAAS;AACf,UAAM,iBAAiB,CAAA;AACvB,QAAI,OAAO;AACT,qBAAe,KAAK,SAAS,OAAO;;AAEtC,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,qBAAe,QAAQ,KAAK,QAAQ,QAAQ,CAAC;;AAE/C,SAAK,QAAQ,QAAQ,IAAI,eAAe,KAAK,GAAG;AAEhD,WAAO,IAAI,uBAAuB;MAChC;MACA,KAAK,KAAK;MACV,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,OAAO,KAAK;MACZ,YAAY;KACwB;EACxC;;;;ACrVK,IAAM,UAAU;;;ACChB,IAAM,kBAAkB,EAAE,iBAAiB,gBAAgB,UAAS;;;ACe3E,IAAqB,kBAArB,MAAoC;;;;;;;;;;;EAwBlC,YACE,KACA,EACE,UAAU,CAAA,GACV,QACA,OAAAC,OAAK,IAKH,CAAA,GAAE;AAEN,SAAK,MAAM;AACX,SAAK,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,eAAe,GAAK,OAAO;AAC/C,SAAK,SAAS;AACd,SAAK,QAAQA;EACf;;;;;;EAeA,KAAK,UAAgB;AACnB,UAAM,MAAM,IAAI,IAAI,GAAG,KAAK,OAAO,UAAU;AAC7C,WAAO,IAAI,sBAAmC,KAAK;MACjD,SAAO,OAAA,OAAA,CAAA,GAAO,KAAK,OAAO;MAC1B,QAAQ,KAAK;MACb,OAAO,KAAK;KACb;EACH;;;;;;;;;;;;;;;;;;;;;;EAuBA,IAIE,IACA,OAA0B,CAAA,GAC1B,EACE,OAAO,OACP,MAAK,IAIH,CAAA,GAAE;AAUN,QAAI;AACJ,UAAM,MAAM,IAAI,IAAI,GAAG,KAAK,WAAW,IAAI;AAC3C,QAAI;AACJ,QAAI,MAAM;AACR,eAAS;AACT,aAAO,QAAQ,IAAI,EAAE,QAAQ,CAAC,CAAC,MAAM,KAAK,MAAK;AAC7C,YAAI,aAAa,OAAO,MAAM,GAAG,OAAO;MAC1C,CAAC;WACI;AACL,eAAS;AACT,aAAO;;AAGT,UAAM,UAAO,OAAA,OAAA,CAAA,GAAQ,KAAK,OAAO;AACjC,QAAI,OAAO;AACT,cAAQ,QAAQ,IAAI,SAAS;;AAG/B,WAAO,IAAI,uBAAuB;MAChC;MACA;MACA;MACA,QAAQ,KAAK;MACb;MACA,OAAO,KAAK;MACZ,YAAY;KACwC;EACxD;;;;ACtJF,uBAA6B;;;ACAtB,IAAMC,WAAU;;;ACEhB,IAAMC,mBAAkB,EAAE,iBAAiB,eAAeC,WAAS;AAEnE,IAAM,MAAc;AAEpB,IAAM,kBAAkB;AAExB,IAAM,kBAAkB;AAE/B,IAAY;CAAZ,SAAYC,gBAAa;AACvB,EAAAA,eAAAA,eAAA,YAAA,IAAA,CAAA,IAAA;AACA,EAAAA,eAAAA,eAAA,MAAA,IAAA,CAAA,IAAA;AACA,EAAAA,eAAAA,eAAA,SAAA,IAAA,CAAA,IAAA;AACA,EAAAA,eAAAA,eAAA,QAAA,IAAA,CAAA,IAAA;AACF,GALY,kBAAA,gBAAa,CAAA,EAAA;AAOzB,IAAY;CAAZ,SAAYC,iBAAc;AACxB,EAAAA,gBAAA,QAAA,IAAA;AACA,EAAAA,gBAAA,SAAA,IAAA;AACA,EAAAA,gBAAA,QAAA,IAAA;AACA,EAAAA,gBAAA,SAAA,IAAA;AACA,EAAAA,gBAAA,SAAA,IAAA;AACF,GANY,mBAAA,iBAAc,CAAA,EAAA;AAQ1B,IAAY;CAAZ,SAAYC,iBAAc;AACxB,EAAAA,gBAAA,OAAA,IAAA;AACA,EAAAA,gBAAA,OAAA,IAAA;AACA,EAAAA,gBAAA,MAAA,IAAA;AACA,EAAAA,gBAAA,OAAA,IAAA;AACA,EAAAA,gBAAA,OAAA,IAAA;AACA,EAAAA,gBAAA,cAAA,IAAA;AACF,GAPY,mBAAA,iBAAc,CAAA,EAAA;AAS1B,IAAY;CAAZ,SAAYC,aAAU;AACpB,EAAAA,YAAA,WAAA,IAAA;AACF,GAFY,eAAA,aAAU,CAAA,EAAA;AAItB,IAAY;CAAZ,SAAYC,mBAAgB;AAC1B,EAAAA,kBAAA,YAAA,IAAA;AACA,EAAAA,kBAAA,MAAA,IAAA;AACA,EAAAA,kBAAA,SAAA,IAAA;AACA,EAAAA,kBAAA,QAAA,IAAA;AACF,GALY,qBAAA,mBAAgB,CAAA,EAAA;;;AC1B5B,IAAqB,QAArB,MAA0B;EAIxB,YAAmB,UAA2B,WAAmB;AAA9C,SAAA,WAAA;AAA2B,SAAA,YAAA;AAH9C,SAAA,QAA4B;AAC5B,SAAA,QAAgB;AAGd,SAAK,WAAW;AAChB,SAAK,YAAY;EACnB;EAEA,QAAK;AACH,SAAK,QAAQ;AACb,iBAAa,KAAK,KAAK;EACzB;;EAGA,kBAAe;AACb,iBAAa,KAAK,KAAK;AAEvB,SAAK,QAAa,WAAW,MAAK;AAChC,WAAK,QAAQ,KAAK,QAAQ;AAC1B,WAAK,SAAQ;IACf,GAAG,KAAK,UAAU,KAAK,QAAQ,CAAC,CAAC;EACnC;;;;AC/BF,IAAqB,aAArB,MAA+B;EAA/B,cAAA;AACE,SAAA,gBAAgB;EA4ClB;EA1CE,OAAO,YAAkC,UAAkB;AACzD,QAAI,WAAW,gBAAgB,aAAa;AAC1C,aAAO,SAAS,KAAK,cAAc,UAAU,CAAC;;AAGhD,QAAI,OAAO,eAAe,UAAU;AAClC,aAAO,SAAS,KAAK,MAAM,UAAU,CAAC;;AAGxC,WAAO,SAAS,CAAA,CAAE;EACpB;EAEQ,cAAc,QAAmB;AACvC,UAAM,OAAO,IAAI,SAAS,MAAM;AAChC,UAAM,UAAU,IAAI,YAAW;AAE/B,WAAO,KAAK,iBAAiB,QAAQ,MAAM,OAAO;EACpD;EAEQ,iBACN,QACA,MACA,SAAoB;AAOpB,UAAM,YAAY,KAAK,SAAS,CAAC;AACjC,UAAM,YAAY,KAAK,SAAS,CAAC;AACjC,QAAI,SAAS,KAAK,gBAAgB;AAClC,UAAM,QAAQ,QAAQ,OAAO,OAAO,MAAM,QAAQ,SAAS,SAAS,CAAC;AACrE,aAAS,SAAS;AAClB,UAAM,QAAQ,QAAQ,OAAO,OAAO,MAAM,QAAQ,SAAS,SAAS,CAAC;AACrE,aAAS,SAAS;AAClB,UAAM,OAAO,KAAK,MAChB,QAAQ,OAAO,OAAO,MAAM,QAAQ,OAAO,UAAU,CAAC,CAAC;AAGzD,WAAO,EAAE,KAAK,MAAM,OAAc,OAAc,SAAS,KAAI;EAC/D;;;;AC5CF,IAAqB,OAArB,MAAyB;;;;;;;;;EAuBvB,YACS,SACA,OACA,UAAkC,CAAA,GAClC,UAAkB,iBAAe;AAHjC,SAAA,UAAA;AACA,SAAA,QAAA;AACA,SAAA,UAAA;AACA,SAAA,UAAA;AA1BT,SAAA,OAAgB;AAChB,SAAA,eAAmC;AACnC,SAAA,MAAc;AACd,SAAA,eAGW;AACX,SAAA,WAGM,CAAA;AACN,SAAA,WAA0B;AAC1B,SAAA,cAAuB;EAepB;EAEH,OAAO,SAAe;AACpB,SAAK,UAAU;AACf,SAAK,gBAAe;AACpB,SAAK,MAAM;AACX,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,OAAO;AACZ,SAAK,KAAI;EACX;EAEA,OAAI;AACF,QAAI,KAAK,aAAa,SAAS,GAAG;AAChC;;AAEF,SAAK,aAAY;AACjB,SAAK,OAAO;AACZ,UAAM,SAAS,KAAK,QAAQ,OAAO,KAAK;MACtC,OAAO,KAAK,QAAQ;MACpB,OAAO,KAAK;MACZ,SAAS,KAAK;MACd,KAAK,KAAK;MACV,UAAU,KAAK,QAAQ,SAAQ;KAChC;AACD,QAAI,WAAW,gBAAgB;AAC7B,WAAK,cAAc;;EAEvB;EAEA,cAAc,SAA+B;AAC3C,SAAK,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,KAAK,OAAO,GAAK,OAAO;EAC9C;EAEA,QAAQ,QAAgB,UAAkB;;AACxC,QAAI,KAAK,aAAa,MAAM,GAAG;AAC7B,gBAAS,KAAA,KAAK,kBAAY,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;;AAGtC,SAAK,SAAS,KAAK,EAAE,QAAQ,SAAQ,CAAE;AACvC,WAAO;EACT;EAEA,eAAY;AACV,QAAI,KAAK,cAAc;AACrB;;AAEF,SAAK,MAAM,KAAK,QAAQ,OAAO,SAAQ;AACvC,SAAK,WAAW,KAAK,QAAQ,gBAAgB,KAAK,GAAG;AAErD,UAAM,WAAW,CAAC,YAAgB;AAChC,WAAK,gBAAe;AACpB,WAAK,eAAc;AACnB,WAAK,eAAe;AACpB,WAAK,cAAc,OAAO;IAC5B;AAEA,SAAK,QAAQ,IAAI,KAAK,UAAU,CAAA,GAAI,QAAQ;AAE5C,SAAK,eAAoB,WAAW,MAAK;AACvC,WAAK,QAAQ,WAAW,CAAA,CAAE;IAC5B,GAAG,KAAK,OAAO;EACjB;EAEA,QAAQ,QAAgB,UAAa;AACnC,QAAI,KAAK;AACP,WAAK,QAAQ,SAAS,KAAK,UAAU,EAAE,QAAQ,SAAQ,CAAE;EAC7D;EAEA,UAAO;AACL,SAAK,gBAAe;AACpB,SAAK,eAAc;EACrB;EAEQ,kBAAe;AACrB,QAAI,CAAC,KAAK,UAAU;AAClB;;AAGF,SAAK,QAAQ,KAAK,KAAK,UAAU,CAAA,CAAE;EACrC;EAEQ,iBAAc;AACpB,iBAAa,KAAK,YAAY;AAC9B,SAAK,eAAe;EACtB;EAEQ,cAAc,EACpB,QACA,SAAQ,GAIT;AACC,SAAK,SACF,OAAO,CAAC,MAAM,EAAE,WAAW,MAAM,EACjC,QAAQ,CAAC,MAAM,EAAE,SAAS,QAAQ,CAAC;EACxC;EAEQ,aAAa,QAAc;AACjC,WAAO,KAAK,gBAAgB,KAAK,aAAa,WAAW;EAC3D;;;;AClGF,IAAY;CAAZ,SAAYC,kCAA+B;AACzC,EAAAA,iCAAA,MAAA,IAAA;AACA,EAAAA,iCAAA,MAAA,IAAA;AACA,EAAAA,iCAAA,OAAA,IAAA;AACF,GAJY,oCAAA,kCAA+B,CAAA,EAAA;AA4B3C,IAAqB,mBAArB,MAAqC;;;;;;;;EAqBnC,YAAmB,SAA0B,MAAmB;AAA7C,SAAA,UAAA;AApBnB,SAAA,QAA+B,CAAA;AAC/B,SAAA,eAAkC,CAAA;AAClC,SAAA,UAAyB;AACzB,SAAA,SAII;MACF,QAAQ,MAAK;MAAE;MACf,SAAS,MAAK;MAAE;MAChB,QAAQ,MAAK;MAAE;;AAWf,UAAM,UAAS,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,WAAU;MAC7B,OAAO;MACP,MAAM;;AAGR,SAAK,QAAQ,IAAI,OAAO,OAAO,CAAA,GAAI,CAAC,aAA8B;AAChE,YAAM,EAAE,QAAQ,SAAS,OAAM,IAAK,KAAK;AAEzC,WAAK,UAAU,KAAK,QAAQ,SAAQ;AAEpC,WAAK,QAAQ,iBAAiB,UAC5B,KAAK,OACL,UACA,QACA,OAAO;AAGT,WAAK,aAAa,QAAQ,CAAC,SAAQ;AACjC,aAAK,QAAQ,iBAAiB,SAC5B,KAAK,OACL,MACA,QACA,OAAO;MAEX,CAAC;AAED,WAAK,eAAe,CAAA;AAEpB,aAAM;IACR,CAAC;AAED,SAAK,QAAQ,IAAI,OAAO,MAAM,CAAA,GAAI,CAAC,SAAyB;AAC1D,YAAM,EAAE,QAAQ,SAAS,OAAM,IAAK,KAAK;AAEzC,UAAI,KAAK,mBAAkB,GAAI;AAC7B,aAAK,aAAa,KAAK,IAAI;aACtB;AACL,aAAK,QAAQ,iBAAiB,SAC5B,KAAK,OACL,MACA,QACA,OAAO;AAGT,eAAM;;IAEV,CAAC;AAED,SAAK,OAAO,CAAC,KAAK,kBAAkB,iBAAgB;AAClD,WAAK,QAAQ,SAAS,YAAY;QAChC,OAAO;QACP;QACA;QACA;OACD;IACH,CAAC;AAED,SAAK,QAAQ,CAAC,KAAK,kBAAkB,kBAAiB;AACpD,WAAK,QAAQ,SAAS,YAAY;QAChC,OAAO;QACP;QACA;QACA;OACD;IACH,CAAC;AAED,SAAK,OAAO,MAAK;AACf,WAAK,QAAQ,SAAS,YAAY,EAAE,OAAO,OAAM,CAAE;IACrD,CAAC;EACH;;;;;;;;;;;EAYQ,OAAO,UACb,cACA,UACA,QACA,SAAgC;AAEhC,UAAM,QAAQ,KAAK,UAAU,YAAY;AACzC,UAAM,mBAAmB,KAAK,eAAe,QAAQ;AACrD,UAAM,QAA+B,CAAA;AACrC,UAAM,SAAgC,CAAA;AAEtC,SAAK,IAAI,OAAO,CAAC,KAAa,cAAyB;AACrD,UAAI,CAAC,iBAAiB,GAAG,GAAG;AAC1B,eAAO,GAAG,IAAI;;IAElB,CAAC;AAED,SAAK,IAAI,kBAAkB,CAAC,KAAK,iBAA4B;AAC3D,YAAM,mBAA+B,MAAM,GAAG;AAE9C,UAAI,kBAAkB;AACpB,cAAM,kBAAkB,aAAa,IACnC,CAAC,MAAgB,EAAE,YAAY;AAEjC,cAAM,kBAAkB,iBAAiB,IACvC,CAAC,MAAgB,EAAE,YAAY;AAEjC,cAAM,kBAA8B,aAAa,OAC/C,CAAC,MAAgB,gBAAgB,QAAQ,EAAE,YAAY,IAAI,CAAC;AAE9D,cAAM,gBAA4B,iBAAiB,OACjD,CAAC,MAAgB,gBAAgB,QAAQ,EAAE,YAAY,IAAI,CAAC;AAG9D,YAAI,gBAAgB,SAAS,GAAG;AAC9B,gBAAM,GAAG,IAAI;;AAGf,YAAI,cAAc,SAAS,GAAG;AAC5B,iBAAO,GAAG,IAAI;;aAEX;AACL,cAAM,GAAG,IAAI;;IAEjB,CAAC;AAED,WAAO,KAAK,SAAS,OAAO,EAAE,OAAO,OAAM,GAAI,QAAQ,OAAO;EAChE;;;;;;;;;;;EAYQ,OAAO,SACb,OACA,MACA,QACA,SAAgC;AAEhC,UAAM,EAAE,OAAO,OAAM,IAAK;MACxB,OAAO,KAAK,eAAe,KAAK,KAAK;MACrC,QAAQ,KAAK,eAAe,KAAK,MAAM;;AAGzC,QAAI,CAAC,QAAQ;AACX,eAAS,MAAK;MAAE;;AAGlB,QAAI,CAAC,SAAS;AACZ,gBAAU,MAAK;MAAE;;AAGnB,SAAK,IAAI,OAAO,CAAC,KAAK,iBAA4B;;AAChD,YAAM,oBAA+B,KAAA,MAAM,GAAG,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA;AACnD,YAAM,GAAG,IAAI,KAAK,UAAU,YAAY;AAExC,UAAI,iBAAiB,SAAS,GAAG;AAC/B,cAAM,qBAAqB,MAAM,GAAG,EAAE,IACpC,CAAC,MAAgB,EAAE,YAAY;AAEjC,cAAM,eAA2B,iBAAiB,OAChD,CAAC,MAAgB,mBAAmB,QAAQ,EAAE,YAAY,IAAI,CAAC;AAGjE,cAAM,GAAG,EAAE,QAAQ,GAAG,YAAY;;AAGpC,aAAO,KAAK,kBAAkB,YAAY;IAC5C,CAAC;AAED,SAAK,IAAI,QAAQ,CAAC,KAAK,kBAA6B;AAClD,UAAI,mBAA+B,MAAM,GAAG;AAE5C,UAAI,CAAC;AAAkB;AAEvB,YAAM,uBAAuB,cAAc,IACzC,CAAC,MAAgB,EAAE,YAAY;AAEjC,yBAAmB,iBAAiB,OAClC,CAAC,MAAgB,qBAAqB,QAAQ,EAAE,YAAY,IAAI,CAAC;AAGnE,YAAM,GAAG,IAAI;AAEb,cAAQ,KAAK,kBAAkB,aAAa;AAE5C,UAAI,iBAAiB,WAAW;AAAG,eAAO,MAAM,GAAG;IACrD,CAAC;AAED,WAAO;EACT;;EAGQ,OAAO,IACb,KACA,MAAwB;AAExB,WAAO,OAAO,oBAAoB,GAAG,EAAE,IAAI,CAAC,QAAQ,KAAK,KAAK,IAAI,GAAG,CAAC,CAAC;EACzE;;;;;;;;;;;;;;;;;;;;;;;;EAyBQ,OAAO,eACb,OAA+C;AAE/C,YAAQ,KAAK,UAAU,KAAK;AAE5B,WAAO,OAAO,oBAAoB,KAAK,EAAE,OAAO,CAAC,UAAU,QAAO;AAChE,YAAM,YAAY,MAAM,GAAG;AAE3B,UAAI,WAAW,WAAW;AACxB,iBAAS,GAAG,IAAI,UAAU,MAAM,IAAI,CAAC,aAAY;AAC/C,mBAAS,cAAc,IAAI,SAAS,SAAS;AAE7C,iBAAO,SAAS,SAAS;AACzB,iBAAO,SAAS,cAAc;AAE9B,iBAAO;QACT,CAAC;aACI;AACL,iBAAS,GAAG,IAAI;;AAGlB,aAAO;IACT,GAAG,CAAA,CAA2B;EAChC;;EAGQ,OAAO,UAAU,KAA2B;AAClD,WAAO,KAAK,MAAM,KAAK,UAAU,GAAG,CAAC;EACvC;;EAGQ,OAAO,UAAgC;AAC7C,SAAK,OAAO,SAAS;EACvB;;EAGQ,QAAQ,UAAiC;AAC/C,SAAK,OAAO,UAAU;EACxB;;EAGQ,OAAO,UAAoB;AACjC,SAAK,OAAO,SAAS;EACvB;;EAGQ,qBAAkB;AACxB,WAAO,CAAC,KAAK,WAAW,KAAK,YAAY,KAAK,QAAQ,SAAQ;EAChE;;;;ACnWF,IAAY;CAAZ,SAAYC,gBAAa;AACvB,EAAAA,eAAA,SAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,WAAA,IAAA;AACA,EAAAA,eAAA,QAAA,IAAA;AACA,EAAAA,eAAA,QAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,WAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,WAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,OAAA,IAAA;AACA,EAAAA,eAAA,OAAA,IAAA;AACA,EAAAA,eAAA,SAAA,IAAA;AACA,EAAAA,eAAA,KAAA,IAAA;AACA,EAAAA,eAAA,SAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,WAAA,IAAA;AACA,EAAAA,eAAA,aAAA,IAAA;AACA,EAAAA,eAAA,QAAA,IAAA;AACA,EAAAA,eAAA,SAAA,IAAA;AACA,EAAAA,eAAA,WAAA,IAAA;AACF,GAzBY,kBAAA,gBAAa,CAAA,EAAA;AAqDlB,IAAM,oBAAoB,CAC/B,SACA,QACA,UAAoC,CAAA,MAC1B;;AACV,QAAM,aAAY,KAAA,QAAQ,eAAS,QAAA,OAAA,SAAA,KAAI,CAAA;AAEvC,SAAO,OAAO,KAAK,MAAM,EAAE,OAAO,CAAC,KAAK,YAAW;AACjD,QAAI,OAAO,IAAI,cAAc,SAAS,SAAS,QAAQ,SAAS;AAChE,WAAO;EACT,GAAG,CAAA,CAAY;AACjB;AAgBO,IAAM,gBAAgB,CAC3B,YACA,SACA,QACA,cACe;AACf,QAAM,SAAS,QAAQ,KAAK,CAAC,MAAM,EAAE,SAAS,UAAU;AACxD,QAAM,UAAU,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ;AACxB,QAAM,QAAQ,OAAO,UAAU;AAE/B,MAAI,WAAW,CAAC,UAAU,SAAS,OAAO,GAAG;AAC3C,WAAO,YAAY,SAAS,KAAK;;AAGnC,SAAO,KAAK,KAAK;AACnB;AAeO,IAAM,cAAc,CAAC,MAAc,UAAmC;AAE3E,MAAI,KAAK,OAAO,CAAC,MAAM,KAAK;AAC1B,UAAM,WAAW,KAAK,MAAM,GAAG,KAAK,MAAM;AAC1C,WAAO,QAAQ,OAAO,QAAQ;;AAIhC,UAAQ,MAAM;IACZ,KAAK,cAAc;AACjB,aAAO,UAAU,KAAK;IACxB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;AACjB,aAAO,SAAS,KAAK;IACvB,KAAK,cAAc;IACnB,KAAK,cAAc;AACjB,aAAO,OAAO,KAAK;IACrB,KAAK,cAAc;AACjB,aAAO,kBAAkB,KAAK;IAChC,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;AACjB,aAAO,KAAK,KAAK;IACnB;AAEE,aAAO,KAAK,KAAK;;AAEvB;AAEA,IAAM,OAAO,CAAC,UAAmC;AAC/C,SAAO;AACT;AACO,IAAM,YAAY,CAAC,UAAmC;AAC3D,UAAQ,OAAO;IACb,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT;AACE,aAAO;;AAEb;AACO,IAAM,WAAW,CAAC,UAAmC;AAC1D,MAAI,OAAO,UAAU,UAAU;AAC7B,UAAM,cAAc,WAAW,KAAK;AACpC,QAAI,CAAC,OAAO,MAAM,WAAW,GAAG;AAC9B,aAAO;;;AAGX,SAAO;AACT;AACO,IAAM,SAAS,CAAC,UAAmC;AACxD,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI;AACF,aAAO,KAAK,MAAM,KAAK;aAChB,OAAP;AACA,cAAQ,IAAI,qBAAqB,OAAO;AACxC,aAAO;;;AAGX,SAAO;AACT;AAYO,IAAM,UAAU,CAAC,OAAoB,SAA6B;AACvE,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO;;AAGT,QAAM,UAAU,MAAM,SAAS;AAC/B,QAAM,aAAa,MAAM,OAAO;AAChC,QAAM,YAAY,MAAM,CAAC;AAGzB,MAAI,cAAc,OAAO,eAAe,KAAK;AAC3C,QAAI;AACJ,UAAM,UAAU,MAAM,MAAM,GAAG,OAAO;AAGtC,QAAI;AACF,YAAM,KAAK,MAAM,MAAM,UAAU,GAAG;aAC7B,GAAP;AAEA,YAAM,UAAU,QAAQ,MAAM,GAAG,IAAI,CAAA;;AAGvC,WAAO,IAAI,IAAI,CAAC,QAAmB,YAAY,MAAM,GAAG,CAAC;;AAG3D,SAAO;AACT;AASO,IAAM,oBAAoB,CAAC,UAAmC;AACnE,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,MAAM,QAAQ,KAAK,GAAG;;AAG/B,SAAO;AACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClKA,IAAY;CAAZ,SAAYC,yCAAsC;AAChD,EAAAA,wCAAA,KAAA,IAAA;AACA,EAAAA,wCAAA,QAAA,IAAA;AACA,EAAAA,wCAAA,QAAA,IAAA;AACA,EAAAA,wCAAA,QAAA,IAAA;AACF,GALY,2CAAA,yCAAsC,CAAA,EAAA;AAOlD,IAAY;CAAZ,SAAYC,wBAAqB;AAC/B,EAAAA,uBAAA,WAAA,IAAA;AACA,EAAAA,uBAAA,UAAA,IAAA;AAIA,EAAAA,uBAAA,kBAAA,IAAA;AACF,GAPY,0BAAA,wBAAqB,CAAA,EAAA;AASjC,IAAY;CAAZ,SAAYC,4BAAyB;AACnC,EAAAA,2BAAA,YAAA,IAAA;AACA,EAAAA,2BAAA,WAAA,IAAA;AACA,EAAAA,2BAAA,QAAA,IAAA;AACA,EAAAA,2BAAA,eAAA,IAAA;AACF,GALY,8BAAA,4BAAyB,CAAA,EAAA;AAYrC,IAAqB,kBAArB,MAAoC;EAiBlC,YAES,OACA,SAAiC,EAAE,QAAQ,CAAA,EAAE,GAC7C,QAAsB;AAFtB,SAAA,QAAA;AACA,SAAA,SAAA;AACA,SAAA,SAAA;AApBT,SAAA,WAOI,CAAA;AAEJ,SAAA,QAAQ,eAAe;AACvB,SAAA,aAAa;AAGb,SAAA,aAAqB,CAAA;AASnB,SAAK,OAAO,SAAM,OAAA,OACb;MACD,WAAW,EAAE,KAAK,OAAO,MAAM,MAAK;MACpC,UAAU,EAAE,KAAK,GAAE;OAElB,OAAO,MAAM;AAElB,SAAK,UAAU,KAAK,OAAO;AAC3B,SAAK,WAAW,IAAI,KAClB,MACA,eAAe,MACf,KAAK,QACL,KAAK,OAAO;AAEd,SAAK,cAAc,IAAI,MACrB,MAAM,KAAK,sBAAqB,GAChC,KAAK,OAAO,gBAAgB;AAE9B,SAAK,SAAS,QAAQ,MAAM,MAAK;AAC/B,WAAK,QAAQ,eAAe;AAC5B,WAAK,YAAY,MAAK;AACtB,WAAK,WAAW,QAAQ,CAAC,cAAoB,UAAU,KAAI,CAAE;AAC7D,WAAK,aAAa,CAAA;IACpB,CAAC;AACD,SAAK,SAAS,MAAK;AACjB,WAAK,YAAY,MAAK;AACtB,WAAK,OAAO,IAAI,WAAW,SAAS,KAAK,SAAS,KAAK,SAAQ,GAAI;AACnE,WAAK,QAAQ,eAAe;AAC5B,WAAK,OAAO,QAAQ,IAAI;IAC1B,CAAC;AACD,SAAK,SAAS,CAAC,WAAkB;AAC/B,UAAI,KAAK,WAAU,KAAM,KAAK,UAAS,GAAI;AACzC;;AAEF,WAAK,OAAO,IAAI,WAAW,SAAS,KAAK,SAAS,MAAM;AACxD,WAAK,QAAQ,eAAe;AAC5B,WAAK,YAAY,gBAAe;IAClC,CAAC;AACD,SAAK,SAAS,QAAQ,WAAW,MAAK;AACpC,UAAI,CAAC,KAAK,WAAU,GAAI;AACtB;;AAEF,WAAK,OAAO,IAAI,WAAW,WAAW,KAAK,SAAS,KAAK,SAAS,OAAO;AACzE,WAAK,QAAQ,eAAe;AAC5B,WAAK,YAAY,gBAAe;IAClC,CAAC;AACD,SAAK,IAAI,eAAe,OAAO,CAAA,GAAI,CAAC,SAAc,QAAe;AAC/D,WAAK,SAAS,KAAK,gBAAgB,GAAG,GAAG,OAAO;IAClD,CAAC;AAED,SAAK,WAAW,IAAI,iBAAiB,IAAI;EAC3C;;EAGA,UACE,UACA,UAAU,KAAK,SAAO;;AAEtB,QAAI,KAAK,YAAY;AACnB,YAAM;WACD;AACL,YAAM,EACJ,QAAQ,EAAE,WAAW,SAAQ,EAAE,IAC7B,KAAK;AACT,WAAK,SAAS,CAAC,MAAa,YAAY,SAAS,iBAAiB,CAAC,CAAC;AACpE,WAAK,SAAS,MAAM,YAAY,SAAS,QAAQ,CAAC;AAElD,YAAM,qBAAgD,CAAA;AACtD,YAAM,SAAS;QACb;QACA;QACA,mBACE,MAAA,KAAA,KAAK,SAAS,sBAAgB,QAAA,OAAA,SAAA,SAAA,GAAE,IAAI,CAAC,MAAM,EAAE,MAAM,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA;;AAG5D,UAAI,KAAK,OAAO,aAAa;AAC3B,2BAAmB,eAAe,KAAK,OAAO;;AAGhD,WAAK,kBAAiB,OAAA,OAAM,EAAE,OAAM,GAAO,kBAAkB,CAAA;AAE7D,WAAK,aAAa;AAClB,WAAK,QAAQ,OAAO;AAEpB,WAAK,SACF,QACC,MACA,CAAC,EACC,kBAAkB,sBAAqB,MASpC;;AACH,aAAK,OAAO,eACV,KAAK,OAAO,QAAQ,KAAK,OAAO,WAAW;AAE7C,YAAI,0BAA0B,QAAW;AACvC,sBAAY,SAAS,YAAY;AACjC;eACK;AACL,gBAAM,yBAAyB,KAAK,SAAS;AAC7C,gBAAM,eAAcC,MAAA,2BAAsB,QAAtB,2BAAsB,SAAA,SAAtB,uBAAwB,YAAM,QAAAA,QAAA,SAAAA,MAAI;AACtD,gBAAM,sBAAsB,CAAA;AAE5B,mBAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,kBAAM,wBAAwB,uBAAuB,CAAC;AACtD,kBAAM,EACJ,QAAQ,EAAE,OAAO,QAAQ,OAAO,OAAM,EAAE,IACtC;AACJ,kBAAM,uBACJ,yBAAyB,sBAAsB,CAAC;AAElD,gBACE,wBACA,qBAAqB,UAAU,SAC/B,qBAAqB,WAAW,UAChC,qBAAqB,UAAU,SAC/B,qBAAqB,WAAW,QAChC;AACA,kCAAoB,KAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GACnB,qBAAqB,GAAA,EACxB,IAAI,qBAAqB,GAAE,CAAA,CAAA;mBAExB;AACL,mBAAK,YAAW;AAChB,0BACE,SACE,iBACA,IAAI,MACF,kEAAkE,CACnE;AAEL;;;AAIJ,eAAK,SAAS,mBAAmB;AAEjC,sBAAY,SAAS,YAAY;AACjC;;MAEJ,CAAC,EAEF,QAAQ,SAAS,CAAC,UAAiC;AAClD,oBACE,SACE,iBACA,IAAI,MACF,KAAK,UAAU,OAAO,OAAO,KAAK,EAAE,KAAK,IAAI,KAAK,OAAO,CAAC,CAC3D;AAEL;MACF,CAAC,EACA,QAAQ,WAAW,MAAK;AACvB,oBAAY,SAAS,WAAW;AAChC;MACF,CAAC;;AAGL,WAAO;EACT;EAEA,gBAAa;AAGX,WAAO,KAAK,SAAS;EACvB;EAEM,MACJ,SACA,OAA+B,CAAA,GAAE;;AAEjC,aAAO,MAAM,KAAK,KAChB;QACE,MAAM;QACN,OAAO;QACP;SAEF,KAAK,WAAW,KAAK,OAAO;IAEhC,CAAC;;EAEK,QACJ,OAA+B,CAAA,GAAE;;AAEjC,aAAO,MAAM,KAAK,KAChB;QACE,MAAM;QACN,OAAO;SAET,IAAI;IAER,CAAC;;EAuDD,GACE,MACA,QACA,UAAgC;AAEhC,WAAO,KAAK,IAAI,MAAM,QAAQ,QAAQ;EACxC;EAEA,KACE,SACA,OAA+B,CAAA,GAAE;AAEjC,WAAO,IAAI,QAAQ,CAAC,YAAW;;AAC7B,YAAM,OAAO,KAAK,MAChB,QAAQ,MACR,SACA,KAAK,WAAW,KAAK,OAAO;AAG9B,UAAI,KAAK,aAAa;AACpB,gBAAQ,cAAc;;AAGxB,UACE,QAAQ,SAAS,eACjB,GAAC,MAAA,MAAA,KAAA,KAAK,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,eAAS,QAAA,OAAA,SAAA,SAAA,GAAE,MACjC;AACA,gBAAQ,IAAI;;AAGd,WAAK,QAAQ,MAAM,MAAM,QAAQ,IAAI,CAAC;AACtC,WAAK,QAAQ,WAAW,MAAM,QAAQ,WAAW,CAAC;IACpD,CAAC;EACH;EAEA,kBAAkB,SAA+B;AAC/C,SAAK,SAAS,cAAc,OAAO;EACrC;;;;;;;;;;EAWA,YAAY,UAAU,KAAK,SAAO;AAChC,SAAK,QAAQ,eAAe;AAC5B,UAAM,UAAU,MAAK;AACnB,WAAK,OAAO,IAAI,WAAW,SAAS,KAAK,OAAO;AAChD,WAAK,SAAS,eAAe,OAAO,SAAS,KAAK,SAAQ,CAAE;IAC9D;AAEA,SAAK,YAAY,MAAK;AAEtB,SAAK,SAAS,QAAO;AAErB,WAAO,IAAI,QAAQ,CAAC,YAAW;AAC7B,YAAM,YAAY,IAAI,KAAK,MAAM,eAAe,OAAO,CAAA,GAAI,OAAO;AAElE,gBACG,QAAQ,MAAM,MAAK;AAClB,gBAAO;AACP,gBAAQ,IAAI;MACd,CAAC,EACA,QAAQ,WAAW,MAAK;AACvB,gBAAO;AACP,gBAAQ,WAAW;MACrB,CAAC,EACA,QAAQ,SAAS,MAAK;AACrB,gBAAQ,OAAO;MACjB,CAAC;AAEH,gBAAU,KAAI;AAEd,UAAI,CAAC,KAAK,SAAQ,GAAI;AACpB,kBAAU,QAAQ,MAAM,CAAA,CAAE;;IAE9B,CAAC;EACH;;EAGA,MACE,OACA,SACA,UAAU,KAAK,SAAO;AAEtB,QAAI,CAAC,KAAK,YAAY;AACpB,YAAM,kBAAkB,cAAc,KAAK;;AAE7C,QAAI,YAAY,IAAI,KAAK,MAAM,OAAO,SAAS,OAAO;AACtD,QAAI,KAAK,SAAQ,GAAI;AACnB,gBAAU,KAAI;WACT;AACL,gBAAU,aAAY;AACtB,WAAK,WAAW,KAAK,SAAS;;AAGhC,WAAO;EACT;;;;;;;;;EAUA,WAAW,QAAgB,SAAc,MAAa;AACpD,WAAO;EACT;;EAGA,UAAU,OAAa;AACrB,WAAO,KAAK,UAAU;EACxB;;EAGA,WAAQ;AACN,WAAO,KAAK,SAAS;EACvB;;EAGA,SAAS,MAAc,SAAe,KAAY;;AAChD,UAAM,YAAY,KAAK,kBAAiB;AACxC,UAAM,EAAE,OAAO,OAAO,OAAO,KAAI,IAAK;AACtC,UAAM,SAAmB,CAAC,OAAO,OAAO,OAAO,IAAI;AACnD,QAAI,OAAO,OAAO,QAAQ,SAAS,KAAK,KAAK,QAAQ,KAAK,SAAQ,GAAI;AACpE;;AAEF,QAAI,iBAAiB,KAAK,WAAW,WAAW,SAAS,GAAG;AAC5D,QAAI,WAAW,CAAC,gBAAgB;AAC9B,YAAM;;AAGR,QAAI,CAAC,UAAU,UAAU,QAAQ,EAAE,SAAS,SAAS,GAAG;AACtD,OAAA,KAAA,KAAK,SAAS,sBAAgB,QAAA,OAAA,SAAA,SAAA,GAC1B,OAAO,CAAC,SAAQ;;AAChB,iBACEA,MAAA,KAAK,YAAM,QAAAA,QAAA,SAAA,SAAAA,IAAE,WAAU,SACvB,MAAAC,MAAA,KAAK,YAAM,QAAAA,QAAA,SAAA,SAAAA,IAAE,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAiB,OAAO;MAEhD,CAAC,EACA,IAAI,CAAC,SAAS,KAAK,SAAS,gBAAgB,GAAG,CAAC;WAC9C;AACL,OAAA,KAAA,KAAK,SAAS,SAAS,OAAC,QAAA,OAAA,SAAA,SAAA,GACpB,OAAO,CAAC,SAAQ;;AAChB,YACE,CAAC,aAAa,YAAY,kBAAkB,EAAE,SAAS,SAAS,GAChE;AACA,cAAI,QAAQ,MAAM;AAChB,kBAAM,SAAS,KAAK;AACpB,kBAAM,aAAYD,MAAA,KAAK,YAAM,QAAAA,QAAA,SAAA,SAAAA,IAAE;AAC/B,mBACE,YACAC,MAAA,QAAQ,SAAG,QAAAA,QAAA,SAAA,SAAAA,IAAE,SAAS,MAAM,OAC3B,cAAc,QACb,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,kBAAiB,SAC1B,KAAA,QAAQ,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,kBAAiB;iBAErC;AACL,kBAAM,aAAY,MAAA,KAAA,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAiB;AACxD,mBACE,cAAc,OACd,gBAAc,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAiB;;eAG9C;AACL,iBAAO,KAAK,KAAK,kBAAiB,MAAO;;MAE7C,CAAC,EACA,IAAI,CAAC,SAAQ;AACZ,YAAI,OAAO,mBAAmB,YAAY,SAAS,gBAAgB;AACjE,gBAAM,kBAAkB,eAAe;AACvC,gBAAM,EAAE,QAAQ,OAAO,kBAAkB,MAAAC,OAAM,OAAM,IACnD;AACF,gBAAM,kBAAkB;YACtB;YACA;YACA;YACA,WAAWA;YACX,KAAK,CAAA;YACL,KAAK,CAAA;YACL;;AAEF,2BAAc,OAAA,OAAA,OAAA,OAAA,CAAA,GACT,eAAe,GACf,KAAK,mBAAmB,eAAe,CAAC;;AAG/C,aAAK,SAAS,gBAAgB,GAAG;MACnC,CAAC;;EAEP;;EAGA,YAAS;AACP,WAAO,KAAK,UAAU,eAAe;EACvC;;EAGA,YAAS;AACP,WAAO,KAAK,UAAU,eAAe;EACvC;;EAGA,aAAU;AACR,WAAO,KAAK,UAAU,eAAe;EACvC;;EAGA,aAAU;AACR,WAAO,KAAK,UAAU,eAAe;EACvC;;EAGA,gBAAgB,KAAW;AACzB,WAAO,cAAc;EACvB;;EAGA,IAAI,MAAc,QAAgC,UAAkB;AAClE,UAAM,YAAY,KAAK,kBAAiB;AAExC,UAAM,UAAU;MACd,MAAM;MACN;MACA;;AAGF,QAAI,KAAK,SAAS,SAAS,GAAG;AAC5B,WAAK,SAAS,SAAS,EAAE,KAAK,OAAO;WAChC;AACL,WAAK,SAAS,SAAS,IAAI,CAAC,OAAO;;AAGrC,WAAO;EACT;;EAGA,KAAK,MAAc,QAA8B;AAC/C,UAAM,YAAY,KAAK,kBAAiB;AAExC,SAAK,SAAS,SAAS,IAAI,KAAK,SAAS,SAAS,EAAE,OAAO,CAAC,SAAQ;;AAClE,aAAO,IACL,KAAA,KAAK,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAiB,OAAO,aACnC,gBAAgB,QAAQ,KAAK,QAAQ,MAAM;IAE/C,CAAC;AACD,WAAO;EACT;;EAGQ,OAAO,QACb,MACA,MAA+B;AAE/B,QAAI,OAAO,KAAK,IAAI,EAAE,WAAW,OAAO,KAAK,IAAI,EAAE,QAAQ;AACzD,aAAO;;AAGT,eAAW,KAAK,MAAM;AACpB,UAAI,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG;AACvB,eAAO;;;AAIX,WAAO;EACT;;EAGQ,wBAAqB;AAC3B,SAAK,YAAY,gBAAe;AAChC,QAAI,KAAK,OAAO,YAAW,GAAI;AAC7B,WAAK,QAAO;;EAEhB;;;;;;EAOQ,SAAS,UAAkB;AACjC,SAAK,IAAI,eAAe,OAAO,CAAA,GAAI,QAAQ;EAC7C;;;;;;EAOQ,SAAS,UAAkB;AACjC,SAAK,IAAI,eAAe,OAAO,CAAA,GAAI,CAAC,WAAmB,SAAS,MAAM,CAAC;EACzE;;;;;;EAOQ,WAAQ;AACd,WAAO,KAAK,OAAO,YAAW,KAAM,KAAK,UAAS;EACpD;;EAGQ,QAAQ,UAAU,KAAK,SAAO;AACpC,QAAI,KAAK,WAAU,GAAI;AACrB;;AAEF,SAAK,OAAO,gBAAgB,KAAK,KAAK;AACtC,SAAK,QAAQ,eAAe;AAC5B,SAAK,SAAS,OAAO,OAAO;EAC9B;;EAGQ,mBAAmB,SAAY;AACrC,UAAM,UAAU;MACd,KAAK,CAAA;MACL,KAAK,CAAA;;AAGP,QAAI,QAAQ,SAAS,YAAY,QAAQ,SAAS,UAAU;AAC1D,cAAQ,MAAmB,kBACzB,QAAQ,SACR,QAAQ,MAAM;;AAIlB,QAAI,QAAQ,SAAS,YAAY,QAAQ,SAAS,UAAU;AAC1D,cAAQ,MAAmB,kBACzB,QAAQ,SACR,QAAQ,UAAU;;AAItB,WAAO;EACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ARjrBF,IAAMC,QAAO,MAAK;AAAE;AAEpB,IAAqB,iBAArB,MAAmC;;;;;;;;;;;;;;;EAgDjC,YAAY,UAAkB,SAA+B;;AA/C7D,SAAA,cAA6B;AAC7B,SAAA,WAA8B,CAAA;AAC9B,SAAA,WAAmB;AACnB,SAAA,UAAsCC;AACtC,SAAA,SAAqC,CAAA;AACrC,SAAA,UAAkB;AAClB,SAAA,YAAiB;AACjB,SAAA,sBAA8B;AAC9B,SAAA,iBAA6D;AAC7D,SAAA,sBAAqC;AACrC,SAAA,MAAc;AAEd,SAAA,SAAmBD;AAInB,SAAA,OAAyB;AACzB,SAAA,aAAyB,CAAA;AACzB,SAAA,aAAyB,IAAI,WAAU;AACvC,SAAA,uBAKI;MACF,MAAM,CAAA;MACN,OAAO,CAAA;MACP,OAAO,CAAA;MACP,SAAS,CAAA;;AAEX,SAAA,yBAAiC;AACjC,SAAA,aAAsB;AAiBpB,SAAK,WAAW,GAAG,YAAY,WAAW;AAE1C,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAAQ,WAAK,SAAS,QAAQ;AAC3C,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAAS,WAAK,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,KAAK,OAAO,GAAK,QAAQ,OAAO;AAC1E,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAAS,WAAK,UAAU,QAAQ;AAC7C,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAAQ,WAAK,SAAS,QAAQ;AAC3C,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAAW,WAAK,YAAY,QAAQ;AACjD,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AACX,WAAK,sBAAsB,QAAQ;AAErC,UAAM,mBAAkB,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE;AACzC,QAAI;AACF,WAAK,yBAAyB,KAAK,MAAM,MAAO,eAAe;AAEjE,SAAK,oBAAmB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,oBAC7B,QAAQ,mBACR,CAAC,UAAiB;AAChB,aAAO,CAAC,KAAM,KAAM,KAAM,GAAK,EAAE,QAAQ,CAAC,KAAK;IACjD;AACJ,SAAK,UAAS,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UACnB,QAAQ,SACR,CAAC,SAAe,aAAsB;AACpC,aAAO,SAAS,KAAK,UAAU,OAAO,CAAC;IACzC;AACJ,SAAK,UAAS,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UACnB,QAAQ,SACR,KAAK,WAAW,OAAO,KAAK,KAAK,UAAU;AAC/C,SAAK,iBAAiB,IAAI,MAAM,MAAWE,WAAA,MAAA,QAAA,QAAA,aAAA;AACzC,WAAK,WAAU;AACf,WAAK,QAAO;IACd,CAAC,GAAE,KAAK,gBAAgB;EAC1B;;;;EAKA,UAAO;AACL,QAAI,KAAK,MAAM;AACb;;AAGF,SAAK,OAAO,IAAI,KAAK,UAAU,KAAK,aAAY,GAAI,CAAA,GAAI,MAAM,KAAK,OAAO;AAE1E,QAAI,KAAK,MAAM;AACb,WAAK,KAAK,aAAa;AACvB,WAAK,KAAK,SAAS,MAAM,KAAK,YAAW;AACzC,WAAK,KAAK,UAAU,CAAC,UAAU,KAAK,aAAa,KAAmB;AACpE,WAAK,KAAK,YAAY,CAAC,UAAU,KAAK,eAAe,KAAK;AAC1D,WAAK,KAAK,UAAU,CAAC,UAAU,KAAK,aAAa,KAAK;;EAE1D;;;;;;;EAQA,WAAW,MAAe,QAAe;AACvC,QAAI,KAAK,MAAM;AACb,WAAK,KAAK,UAAU,WAAA;MAAa;AACjC,UAAI,MAAM;AACR,aAAK,KAAK,MAAM,MAAM,WAAM,QAAN,WAAM,SAAN,SAAU,EAAE;aAC7B;AACL,aAAK,KAAK,MAAK;;AAEjB,WAAK,OAAO;AAEZ,WAAK,kBAAkB,cAAc,KAAK,cAAc;AACxD,WAAK,eAAe,MAAK;;EAE7B;;;;EAKA,cAAW;AACT,WAAO,KAAK;EACd;;;;;EAMM,cACJ,SAAwB;;AAExB,YAAM,SAAS,MAAM,QAAQ,YAAW;AACxC,UAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,aAAK,WAAU;;AAEjB,aAAO;IACT,CAAC;;;;;EAKK,oBAAiB;;AACrB,YAAM,WAAW,MAAM,QAAQ,IAC7B,KAAK,SAAS,IAAI,CAAC,YAAY,QAAQ,YAAW,CAAE,CAAC;AAEvD,WAAK,WAAU;AACf,aAAO;IACT,CAAC;;;;;;;EAOD,IAAI,MAAc,KAAa,MAAU;AACvC,SAAK,OAAO,MAAM,KAAK,IAAI;EAC7B;;;;EAKA,kBAAe;AACb,YAAQ,KAAK,QAAQ,KAAK,KAAK,YAAY;MACzC,KAAK,cAAc;AACjB,eAAO,iBAAiB;MAC1B,KAAK,cAAc;AACjB,eAAO,iBAAiB;MAC1B,KAAK,cAAc;AACjB,eAAO,iBAAiB;MAC1B;AACE,eAAO,iBAAiB;;EAE9B;;;;EAKA,cAAW;AACT,WAAO,KAAK,gBAAe,MAAO,iBAAiB;EACrD;EAEA,QACE,OACA,SAAiC,EAAE,QAAQ,CAAA,EAAE,GAAE;AAE/C,QAAI,CAAC,KAAK,YAAW,GAAI;AACvB,WAAK,QAAO;;AAGd,UAAM,OAAO,IAAI,gBAAgB,YAAY,SAAS,QAAQ,IAAI;AAClE,SAAK,SAAS,KAAK,IAAI;AACvB,WAAO;EACT;;;;;;EAOA,KAAK,MAAqB;AACxB,UAAM,EAAE,OAAO,OAAO,SAAS,IAAG,IAAK;AACvC,QAAI,WAAW,MAAK;AAClB,WAAK,OAAO,MAAM,CAAC,WAAe;;AAChC,SAAA,KAAA,KAAK,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK,MAAM;MACxB,CAAC;IACH;AACA,SAAK,IAAI,QAAQ,GAAG,SAAS,UAAU,QAAQ,OAAO;AACtD,QAAI,KAAK,YAAW,GAAI;AACtB,UAAI,CAAC,aAAa,YAAY,kBAAkB,EAAE,SAAS,KAAK,GAAG;AACjE,cAAM,cAAc,KAAK,UAAU,QAAQ,EAAC;AAC5C,YAAI,aAAa;AACf,iBAAO;;aAEJ;AACL,iBAAQ;;WAEL;AACL,WAAK,WAAW,KAAK,QAAQ;;EAEjC;;;;;;EAOA,QAAQ,OAAoB;AAC1B,SAAK,cAAc;AAEnB,SAAK,SAAS,QAAQ,CAAC,YAAW;AAChC,eAAS,QAAQ,kBAAkB,EAAE,cAAc,MAAK,CAAE;AAE1D,UAAI,QAAQ,cAAc,QAAQ,UAAS,GAAI;AAC7C,gBAAQ,MAAM,eAAe,cAAc,EAAE,cAAc,MAAK,CAAE;;IAEtE,CAAC;EACH;;;;;;EAOA,WAAQ;AACN,QAAI,SAAS,KAAK,MAAM;AACxB,QAAI,WAAW,KAAK,KAAK;AACvB,WAAK,MAAM;WACN;AACL,WAAK,MAAM;;AAGb,WAAO,KAAK,IAAI,SAAQ;EAC1B;;;;;;EAOA,gBAAgB,OAAa;AAC3B,QAAI,aAAa,KAAK,SAAS,KAC7B,CAAC,MAAM,EAAE,UAAU,UAAU,EAAE,UAAS,KAAM,EAAE,WAAU,EAAG;AAE/D,QAAI,YAAY;AACd,WAAK,IAAI,aAAa,4BAA4B,QAAQ;AAC1D,iBAAW,YAAW;;EAE1B;;;;;;;;EASA,QAAQ,SAAwB;AAC9B,SAAK,WAAW,KAAK,SAAS,OAC5B,CAAC,MAAuB,EAAE,SAAQ,MAAO,QAAQ,SAAQ,CAAE;EAE/D;;;;;;EAOQ,eAAY;AAClB,WAAO,KAAK,cACV,KAAK,UACL,OAAO,OAAO,CAAA,GAAI,KAAK,QAAQ,EAAE,KAAK,IAAG,CAAE,CAAC;EAEhD;;EAGQ,eAAe,YAAyB;AAC9C,SAAK,OAAO,WAAW,MAAM,CAAC,QAAwB;AACpD,UAAI,EAAE,OAAO,OAAO,SAAS,IAAG,IAAK;AAErC,UACG,OAAO,QAAQ,KAAK,uBACrB,WAAU,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,OACnB;AACA,aAAK,sBAAsB;;AAG7B,WAAK,IACH,WACA,GAAG,QAAQ,UAAU,MAAM,SAAS,SACjC,OAAO,MAAM,MAAM,OAAQ,MAE9B,OAAO;AAET,WAAK,SACF,OAAO,CAAC,YAA6B,QAAQ,UAAU,KAAK,CAAC,EAC7D,QAAQ,CAAC,YACR,QAAQ,SAAS,OAAO,SAAS,GAAG,CAAC;AAEzC,WAAK,qBAAqB,QAAQ,QAAQ,CAAC,aAAa,SAAS,GAAG,CAAC;IACvE,CAAC;EACH;;EAGQ,cAAW;AACjB,SAAK,IAAI,aAAa,gBAAgB,KAAK,aAAY,GAAI;AAC3D,SAAK,iBAAgB;AACrB,SAAK,eAAe,MAAK;AACzB,SAAK,kBAAkB,cAAc,KAAK,cAAc;AACxD,SAAK,iBAAiB,YACpB,MAAM,KAAK,eAAc,GACzB,KAAK,mBAAmB;AAE1B,SAAK,qBAAqB,KAAK,QAAQ,CAAC,aAAa,SAAQ,CAAE;EACjE;;EAGQ,aAAa,OAAU;AAC7B,SAAK,IAAI,aAAa,SAAS,KAAK;AACpC,SAAK,kBAAiB;AACtB,SAAK,kBAAkB,cAAc,KAAK,cAAc;AACxD,SAAK,eAAe,gBAAe;AACnC,SAAK,qBAAqB,MAAM,QAAQ,CAAC,aAAa,SAAS,KAAK,CAAC;EACvE;;EAGQ,aAAa,OAAiB;AACpC,SAAK,IAAI,aAAa,MAAM,OAAO;AACnC,SAAK,kBAAiB;AACtB,SAAK,qBAAqB,MAAM,QAAQ,CAAC,aAAa,SAAS,KAAK,CAAC;EACvE;;EAGQ,oBAAiB;AACvB,SAAK,SAAS,QAAQ,CAAC,YACrB,QAAQ,SAAS,eAAe,KAAK,CAAC;EAE1C;;EAGQ,cACN,KACA,QAAiC;AAEjC,QAAI,OAAO,KAAK,MAAM,EAAE,WAAW,GAAG;AACpC,aAAO;;AAET,UAAM,SAAS,IAAI,MAAM,IAAI,IAAI,MAAM;AACvC,UAAM,QAAQ,IAAI,gBAAgB,MAAM;AAExC,WAAO,GAAG,MAAM,SAAS;EAC3B;;EAGQ,mBAAgB;AACtB,QAAI,KAAK,YAAW,KAAM,KAAK,WAAW,SAAS,GAAG;AACpD,WAAK,WAAW,QAAQ,CAAC,aAAa,SAAQ,CAAE;AAChD,WAAK,aAAa,CAAA;;EAEtB;;EAEQ,iBAAc;;AACpB,QAAI,CAAC,KAAK,YAAW,GAAI;AACvB;;AAEF,QAAI,KAAK,qBAAqB;AAC5B,WAAK,sBAAsB;AAC3B,WAAK,IACH,aACA,0DAA0D;AAE5D,OAAA,KAAA,KAAK,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,MAAM,iBAAiB,kBAAkB;AACpD;;AAEF,SAAK,sBAAsB,KAAK,SAAQ;AACxC,SAAK,KAAK;MACR,OAAO;MACP,OAAO;MACP,SAAS,CAAA;MACT,KAAK,KAAK;KACX;AACD,SAAK,QAAQ,KAAK,WAAW;EAC/B;;EAGQ,UACN,UACA,yBAAiC,KAAK,wBAAsB;AAE5D,WAAO,MAAK;AACV,UAAI,KAAK;AAAY,eAAO;AAE5B,eAAQ;AAER,UAAI,yBAAyB,GAAG;AAC9B,aAAK,aAAa;AAElB,mBAAW,MAAK;AACd,eAAK,aAAa;QACpB,GAAG,sBAAsB;;AAG3B,aAAO;IACT;EACF;;;;ASpdI,IAAO,eAAP,cAA4B,MAAK;EAGrC,YAAY,SAAe;AACzB,UAAM,OAAO;AAHL,SAAA,mBAAmB;AAI3B,SAAK,OAAO;EACd;;AAGI,SAAU,eAAe,OAAc;AAC3C,SAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,sBAAsB;AAC9E;AAEM,IAAO,kBAAP,cAA+B,aAAY;EAG/C,YAAY,SAAiB,QAAc;AACzC,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,SAAS;EAChB;EAEA,SAAM;AACJ,WAAO;MACL,MAAM,KAAK;MACX,SAAS,KAAK;MACd,QAAQ,KAAK;;EAEjB;;AAGI,IAAO,sBAAP,cAAmC,aAAY;EAGnD,YAAY,SAAiB,eAAsB;AACjD,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,gBAAgB;EACvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCK,IAAMC,gBAAe,CAAC,gBAA8B;AACzD,MAAI;AACJ,MAAI,aAAa;AACf,aAAS;aACA,OAAO,UAAU,aAAa;AACvC,aAAS,IAAU,SAAQC,WAAA,QAAA,QAAA,QAAA,aAAA;AAAC,aAAA,OAAO,MAAM,OAAO,gCAAa,GAAG,MAAM,GAAG,IAAI;IAAC,CAAA;SACzE;AACL,aAAS;;AAEX,SAAO,IAAI,SAAS,OAAO,GAAG,IAAI;AACpC;AAEO,IAAM,kBAAkB,MAAWA,WAAA,QAAA,QAAA,QAAA,aAAA;AACxC,MAAI,OAAO,aAAa,aAAa;AACnC,YAAQ,MAAM,OAAO,gCAAa,GAAG;;AAGvC,SAAO;AACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLD,IAAM,mBAAmB,CAAC,QACxB,IAAI,OAAO,IAAI,WAAW,IAAI,qBAAqB,IAAI,SAAS,KAAK,UAAU,GAAG;AAEpF,IAAM,cAAc,CAAO,OAAgB,WAAkCC,WAAA,QAAA,QAAA,QAAA,aAAA;AAC3E,QAAM,MAAM,MAAM,gBAAe;AAEjC,MAAI,iBAAiB,KAAK;AACxB,UACG,KAAI,EACJ,KAAK,CAAC,QAAO;AACZ,aAAO,IAAI,gBAAgB,iBAAiB,GAAG,GAAG,MAAM,UAAU,GAAG,CAAC;IACxE,CAAC,EACA,MAAM,CAAC,QAAO;AACb,aAAO,IAAI,oBAAoB,iBAAiB,GAAG,GAAG,GAAG,CAAC;IAC5D,CAAC;SACE;AACL,WAAO,IAAI,oBAAoB,iBAAiB,KAAK,GAAG,KAAK,CAAC;;AAElE,CAAC;AAED,IAAM,oBAAoB,CACxB,QACA,SACA,YACA,SACE;AACF,QAAM,SAA+B,EAAE,QAAQ,UAAS,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAAW,CAAA,EAAE;AAE9E,MAAI,WAAW,OAAO;AACpB,WAAO;;AAGT,SAAO,UAAO,OAAA,OAAA,EAAK,gBAAgB,mBAAkB,GAAK,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,OAAO;AAC1E,SAAO,OAAO,KAAK,UAAU,IAAI;AACjC,SAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GAAY,MAAM,GAAK,UAAU;AACnC;AAEA,SAAe,eACb,SACA,QACA,KACA,SACA,YACA,MAAa;;AAEb,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,cAAQ,KAAK,kBAAkB,QAAQ,SAAS,YAAY,IAAI,CAAC,EAC9D,KAAK,CAAC,WAAU;AACf,YAAI,CAAC,OAAO;AAAI,gBAAM;AACtB,YAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAAe,iBAAO;AACnC,eAAO,OAAO,KAAI;MACpB,CAAC,EACA,KAAK,CAAC,SAAS,QAAQ,IAAI,CAAC,EAC5B,MAAM,CAAC,UAAU,YAAY,OAAO,MAAM,CAAC;IAChD,CAAC;EACH,CAAC;;AAEK,SAAgB,IACpB,SACA,KACA,SACA,YAA4B;;AAE5B,WAAO,eAAe,SAAS,OAAO,KAAK,SAAS,UAAU;EAChE,CAAC;;AAEK,SAAgB,KACpB,SACA,KACA,MACA,SACA,YAA4B;;AAE5B,WAAO,eAAe,SAAS,QAAQ,KAAK,SAAS,YAAY,IAAI;EACvE,CAAC;;AAEK,SAAgB,IACpB,SACA,KACA,MACA,SACA,YAA4B;;AAE5B,WAAO,eAAe,SAAS,OAAO,KAAK,SAAS,YAAY,IAAI;EACtE,CAAC;;AAEK,SAAgB,OACpB,SACA,KACA,MACA,SACA,YAA4B;;AAE5B,WAAO,eAAe,SAAS,UAAU,KAAK,SAAS,YAAY,IAAI;EACzE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGD,IAAM,yBAAyB;EAC7B,OAAO;EACP,QAAQ;EACR,QAAQ;IACN,QAAQ;IACR,OAAO;;;AAIX,IAAM,uBAAoC;EACxC,cAAc;EACd,aAAa;EACb,QAAQ;;AAeV,IAAqB,iBAArB,MAAmC;EAMjC,YACE,KACA,UAAqC,CAAA,GACrC,UACAC,QAAa;AAEb,SAAK,MAAM;AACX,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,QAAQC,cAAaD,MAAK;EACjC;;;;;;;;EASc,eACZ,QACA,MACA,UACA,aAAyB;;AAWzB,UAAI;AACF,YAAI;AACJ,cAAM,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,oBAAoB,GAAK,WAAW;AACzD,cAAM,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,OAAO,GACX,WAAW,UAAU,EAAE,YAAY,OAAO,QAAQ,MAAiB,EAAC,CAAG;AAG7E,YAAI,OAAO,SAAS,eAAe,oBAAoB,MAAM;AAC3D,iBAAO,IAAI,SAAQ;AACnB,eAAK,OAAO,gBAAgB,QAAQ,YAAsB;AAC1D,eAAK,OAAO,IAAI,QAAQ;mBACf,OAAO,aAAa,eAAe,oBAAoB,UAAU;AAC1E,iBAAO;AACP,eAAK,OAAO,gBAAgB,QAAQ,YAAsB;eACrD;AACL,iBAAO;AACP,kBAAQ,eAAe,IAAI,WAAW,QAAQ;AAC9C,kBAAQ,cAAc,IAAI,QAAQ;;AAGpC,cAAM,YAAY,KAAK,oBAAoB,IAAI;AAC/C,cAAM,QAAQ,KAAK,cAAc,SAAS;AAC1C,cAAM,MAAM,MAAM,KAAK,MAAM,GAAG,KAAK,cAAc,SAAO,OAAA,OAAA,EACxD,QACA,MACA,QAAO,IACH,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UAAS,EAAE,QAAQ,QAAQ,OAAM,IAAK,CAAA,CAAG,CAAA;AAGxD,YAAI,IAAI,IAAI;AACV,iBAAO;YACL,MAAM,EAAE,MAAM,UAAS;YACvB,OAAO;;eAEJ;AACL,gBAAM,QAAQ,MAAM,IAAI,KAAI;AAC5B,iBAAO,EAAE,MAAM,MAAM,MAAK;;eAErB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;EAQK,OACJ,MACA,UACA,aAAyB;;AAWzB,aAAO,KAAK,eAAe,QAAQ,MAAM,UAAU,WAAW;IAChE,CAAC;;;;;;;;EAQK,kBACJ,MACA,OACA,UACA,aAAyB;;AAEzB,YAAM,YAAY,KAAK,oBAAoB,IAAI;AAC/C,YAAM,QAAQ,KAAK,cAAc,SAAS;AAE1C,YAAM,MAAM,IAAI,IAAI,KAAK,MAAM,uBAAuB,OAAO;AAC7D,UAAI,aAAa,IAAI,SAAS,KAAK;AAEnC,UAAI;AACF,YAAI;AACJ,cAAM,UAAO,OAAA,OAAA,EAAK,QAAQ,qBAAqB,OAAM,GAAK,WAAW;AACrE,cAAM,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,OAAO,GACZ,EAAE,YAAY,OAAO,QAAQ,MAAiB,EAAC,CAAE;AAGtD,YAAI,OAAO,SAAS,eAAe,oBAAoB,MAAM;AAC3D,iBAAO,IAAI,SAAQ;AACnB,eAAK,OAAO,gBAAgB,QAAQ,YAAsB;AAC1D,eAAK,OAAO,IAAI,QAAQ;mBACf,OAAO,aAAa,eAAe,oBAAoB,UAAU;AAC1E,iBAAO;AACP,eAAK,OAAO,gBAAgB,QAAQ,YAAsB;eACrD;AACL,iBAAO;AACP,kBAAQ,eAAe,IAAI,WAAW,QAAQ;AAC9C,kBAAQ,cAAc,IAAI,QAAQ;;AAGpC,cAAM,MAAM,MAAM,KAAK,MAAM,IAAI,SAAQ,GAAI;UAC3C,QAAQ;UACR;UACA;SACD;AAED,YAAI,IAAI,IAAI;AACV,iBAAO;YACL,MAAM,EAAE,MAAM,UAAS;YACvB,OAAO;;eAEJ;AACL,gBAAM,QAAQ,MAAM,IAAI,KAAI;AAC5B,iBAAO,EAAE,MAAM,MAAM,MAAK;;eAErB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;EAQK,sBACJ,MAAY;;AAWZ,UAAI;AACF,YAAI,QAAQ,KAAK,cAAc,IAAI;AAEnC,cAAM,OAAO,MAAM,KACjB,KAAK,OACL,GAAG,KAAK,0BAA0B,SAClC,CAAA,GACA,EAAE,SAAS,KAAK,QAAO,CAAE;AAG3B,cAAM,MAAM,IAAI,IAAI,KAAK,MAAM,KAAK,GAAG;AAEvC,cAAM,QAAQ,IAAI,aAAa,IAAI,OAAO;AAE1C,YAAI,CAAC,OAAO;AACV,gBAAM,IAAI,aAAa,0BAA0B;;AAGnD,eAAO,EAAE,MAAM,EAAE,WAAW,IAAI,SAAQ,GAAI,MAAM,MAAK,GAAI,OAAO,KAAI;eAC/D,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;EAQK,OACJ,MACA,UAWA,aAAyB;;AAWzB,aAAO,KAAK,eAAe,OAAO,MAAM,UAAU,WAAW;IAC/D,CAAC;;;;;;;;EAQK,KACJ,UACA,QAAc;;AAWd,UAAI;AACF,cAAM,OAAO,MAAM,KACjB,KAAK,OACL,GAAG,KAAK,mBACR,EAAE,UAAU,KAAK,UAAU,WAAW,UAAU,gBAAgB,OAAM,GACtE,EAAE,SAAS,KAAK,QAAO,CAAE;AAE3B,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;EAQK,KACJ,UACA,QAAc;;AAWd,UAAI;AACF,cAAM,OAAO,MAAM,KACjB,KAAK,OACL,GAAG,KAAK,mBACR,EAAE,UAAU,KAAK,UAAU,WAAW,UAAU,gBAAgB,OAAM,GACtE,EAAE,SAAS,KAAK,QAAO,CAAE;AAE3B,eAAO,EAAE,MAAM,EAAE,MAAM,KAAK,IAAG,GAAI,OAAO,KAAI;eACvC,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;;;EAUK,gBACJ,MACA,WACA,SAAuE;;AAWvE,UAAI;AACF,YAAI,QAAQ,KAAK,cAAc,IAAI;AAEnC,YAAI,OAAO,MAAM,KACf,KAAK,OACL,GAAG,KAAK,mBAAmB,SAAO,OAAA,OAAA,EAChC,UAAS,IAAM,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAY,EAAE,WAAW,QAAQ,UAAS,IAAK,CAAA,CAAG,GAC5E,EAAE,SAAS,KAAK,QAAO,CAAE;AAE3B,cAAM,sBAAqB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAChC,aAAa,QAAQ,aAAa,OAAO,KAAK,QAAQ,aACtD;AACJ,cAAM,YAAY,UAAU,GAAG,KAAK,MAAM,KAAK,YAAY,oBAAoB;AAC/E,eAAO,EAAE,UAAS;AAClB,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;;EASK,iBACJ,OACA,WACA,SAAwC;;AAWxC,UAAI;AACF,cAAM,OAAO,MAAM,KACjB,KAAK,OACL,GAAG,KAAK,mBAAmB,KAAK,YAChC,EAAE,WAAW,MAAK,GAClB,EAAE,SAAS,KAAK,QAAO,CAAE;AAG3B,cAAM,sBAAqB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAChC,aAAa,QAAQ,aAAa,OAAO,KAAK,QAAQ,aACtD;AACJ,eAAO;UACL,MAAM,KAAK,IAAI,CAAC,UAAiC,OAAA,OAAA,OAAA,OAAA,CAAA,GAC5C,KAAK,GAAA,EACR,WAAW,MAAM,YACb,UAAU,GAAG,KAAK,MAAM,MAAM,YAAY,oBAAoB,IAC9D,KAAI,CAAA,CACR;UACF,OAAO;;eAEF,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;EAQK,SACJ,MACA,SAA0C;;AAW1C,YAAM,sBAAsB,QAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,eAAc;AAC1D,YAAM,aAAa,sBAAsB,+BAA+B;AACxE,YAAM,sBAAsB,KAAK,4BAA2B,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAAa,CAAA,CAAE;AACpF,YAAM,cAAc,sBAAsB,IAAI,wBAAwB;AAEtE,UAAI;AACF,cAAM,QAAQ,KAAK,cAAc,IAAI;AACrC,cAAM,MAAM,MAAM,IAAI,KAAK,OAAO,GAAG,KAAK,OAAO,cAAc,QAAQ,eAAe;UACpF,SAAS,KAAK;UACd,eAAe;SAChB;AACD,cAAM,OAAO,MAAM,IAAI,KAAI;AAC3B,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;;;EAUD,aACE,MACA,SAAuE;AAEvE,UAAM,QAAQ,KAAK,cAAc,IAAI;AACrC,UAAM,eAAe,CAAA;AAErB,UAAM,sBAAqB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAChC,YAAY,QAAQ,aAAa,OAAO,KAAK,QAAQ,aACrD;AAEJ,QAAI,uBAAuB,IAAI;AAC7B,mBAAa,KAAK,kBAAkB;;AAGtC,UAAM,sBAAsB,QAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,eAAc;AAC1D,UAAM,aAAa,sBAAsB,iBAAiB;AAC1D,UAAM,sBAAsB,KAAK,4BAA2B,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAAa,CAAA,CAAE;AAEpF,QAAI,wBAAwB,IAAI;AAC9B,mBAAa,KAAK,mBAAmB;;AAGvC,QAAI,cAAc,aAAa,KAAK,GAAG;AACvC,QAAI,gBAAgB,IAAI;AACtB,oBAAc,IAAI;;AAGpB,WAAO;MACL,MAAM,EAAE,WAAW,UAAU,GAAG,KAAK,OAAO,qBAAqB,QAAQ,aAAa,EAAC;;EAE3F;;;;;;EAOM,OACJ,OAAe;;AAWf,UAAI;AACF,cAAM,OAAO,MAAM,OACjB,KAAK,OACL,GAAG,KAAK,cAAc,KAAK,YAC3B,EAAE,UAAU,MAAK,GACjB,EAAE,SAAS,KAAK,QAAO,CAAE;AAE3B,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqEK,KACJ,MACA,SACA,YAA4B;;AAW5B,UAAI;AACF,cAAM,OAAI,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,sBAAsB,GAAK,OAAO,GAAA,EAAE,QAAQ,QAAQ,GAAE,CAAA;AACxE,cAAM,OAAO,MAAM,KACjB,KAAK,OACL,GAAG,KAAK,mBAAmB,KAAK,YAChC,MACA,EAAE,SAAS,KAAK,QAAO,GACvB,UAAU;AAEZ,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;EAEO,cAAc,MAAY;AAChC,WAAO,GAAG,KAAK,YAAY;EAC7B;EAEQ,oBAAoB,MAAY;AACtC,WAAO,KAAK,QAAQ,YAAY,EAAE,EAAE,QAAQ,QAAQ,GAAG;EACzD;EAEQ,2BAA2B,WAA2B;AAC5D,UAAM,SAAS,CAAA;AACf,QAAI,UAAU,OAAO;AACnB,aAAO,KAAK,SAAS,UAAU,OAAO;;AAGxC,QAAI,UAAU,QAAQ;AACpB,aAAO,KAAK,UAAU,UAAU,QAAQ;;AAG1C,QAAI,UAAU,QAAQ;AACpB,aAAO,KAAK,UAAU,UAAU,QAAQ;;AAG1C,QAAI,UAAU,QAAQ;AACpB,aAAO,KAAK,UAAU,UAAU,QAAQ;;AAG1C,QAAI,UAAU,SAAS;AACrB,aAAO,KAAK,WAAW,UAAU,SAAS;;AAG5C,WAAO,OAAO,KAAK,GAAG;EACxB;;;;ACjsBK,IAAME,WAAU;;;ACAhB,IAAMC,mBAAkB,EAAE,iBAAiB,cAAcC,WAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKzE,IAAqB,mBAArB,MAAqC;EAKnC,YAAY,KAAa,UAAqC,CAAA,GAAIC,QAAa;AAC7E,SAAK,MAAM;AACX,SAAK,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQC,gBAAe,GAAK,OAAO;AAC/C,SAAK,QAAQC,cAAaF,MAAK;EACjC;;;;EAKM,cAAW;;AAUf,UAAI;AACF,cAAM,OAAO,MAAM,IAAI,KAAK,OAAO,GAAG,KAAK,cAAc,EAAE,SAAS,KAAK,QAAO,CAAE;AAClF,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;EAOK,UACJ,IAAU;;AAWV,UAAI;AACF,cAAM,OAAO,MAAM,IAAI,KAAK,OAAO,GAAG,KAAK,cAAc,MAAM,EAAE,SAAS,KAAK,QAAO,CAAE;AACxF,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;;;;;;;;EAeK,aACJ,IACA,UAII;IACF,QAAQ;KACT;;AAWD,UAAI;AACF,cAAM,OAAO,MAAM,KACjB,KAAK,OACL,GAAG,KAAK,cACR;UACE;UACA,MAAM;UACN,QAAQ,QAAQ;UAChB,iBAAiB,QAAQ;UACzB,oBAAoB,QAAQ;WAE9B,EAAE,SAAS,KAAK,QAAO,CAAE;AAE3B,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;;;;;;;EAcK,aACJ,IACA,SAIC;;AAWD,UAAI;AACF,cAAM,OAAO,MAAM,IACjB,KAAK,OACL,GAAG,KAAK,cAAc,MACtB;UACE;UACA,MAAM;UACN,QAAQ,QAAQ;UAChB,iBAAiB,QAAQ;UACzB,oBAAoB,QAAQ;WAE9B,EAAE,SAAS,KAAK,QAAO,CAAE;AAE3B,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;EAOK,YACJ,IAAU;;AAWV,UAAI;AACF,cAAM,OAAO,MAAM,KACjB,KAAK,OACL,GAAG,KAAK,cAAc,YACtB,CAAA,GACA,EAAE,SAAS,KAAK,QAAO,CAAE;AAE3B,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;EAQK,aACJ,IAAU;;AAWV,UAAI;AACF,cAAM,OAAO,MAAM,OACjB,KAAK,OACL,GAAG,KAAK,cAAc,MACtB,CAAA,GACA,EAAE,SAAS,KAAK,QAAO,CAAE;AAE3B,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,eAAe,KAAK,GAAG;AACzB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;ACjPG,IAAO,gBAAP,cAA6B,iBAAgB;EACjD,YAAY,KAAa,UAAqC,CAAA,GAAIG,QAAa;AAC7E,UAAM,KAAK,SAASA,MAAK;EAC3B;;;;;;EAOA,KAAK,IAAU;AACb,WAAO,IAAI,eAAe,KAAK,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK;EAClE;;;;AChBK,IAAMC,WAAU;;;ACEhB,IAAMC,mBAAkB,EAAE,iBAAiB,eAAeC,WAAS;;;ACF1E,IAAAC,sBAAyD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIlD,IAAMC,gBAAe,CAAC,gBAA8B;AACzD,MAAI;AACJ,MAAI,aAAa;AACf,aAAS;aACA,OAAO,UAAU,aAAa;AACvC,aAAS,oBAAAC;SACJ;AACL,aAAS;;AAEX,SAAO,IAAI,SAAS,OAAO,GAAG,IAAI;AACpC;AAEO,IAAM,4BAA4B,MAAK;AAC5C,MAAI,OAAO,YAAY,aAAa;AAClC,WAAO,oBAAAC;;AAGT,SAAO;AACT;AAEO,IAAM,gBAAgB,CAC3B,aACA,gBACA,gBACS;AACT,QAAMC,SAAQH,cAAa,WAAW;AACtC,QAAM,qBAAqB,0BAAyB;AAEpD,SAAO,CAAO,OAAO,SAAQI,WAAA,QAAA,QAAA,QAAA,aAAA;;AAC3B,UAAM,eAAc,KAAC,MAAM,eAAc,OAAG,QAAA,OAAA,SAAA,KAAI;AAChD,QAAI,UAAU,IAAI,mBAAmB,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,OAAO;AAElD,QAAI,CAAC,QAAQ,IAAI,QAAQ,GAAG;AAC1B,cAAQ,IAAI,UAAU,WAAW;;AAGnC,QAAI,CAAC,QAAQ,IAAI,eAAe,GAAG;AACjC,cAAQ,IAAI,iBAAiB,UAAU,aAAa;;AAGtD,WAAOD,OAAM,OAAK,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,IAAI,GAAA,EAAE,QAAO,CAAA,CAAA;EACxC,CAAC;AACH;;;ACnCM,SAAU,mBAAmB,KAAW;AAC5C,SAAO,IAAI,QAAQ,OAAO,EAAE;AAC9B;AAIM,SAAU,qBAMd,SACA,UAAoC;AAEpC,QAAM,EACJ,IAAI,WACJ,MAAM,aACN,UAAU,iBACV,QAAQ,cAAa,IACnB;AACJ,QAAM,EACJ,IAAIE,qBACJ,MAAMC,uBACN,UAAUC,2BACV,QAAQC,wBAAsB,IAC5B;AAEJ,SAAO;IACL,IAAE,OAAA,OAAA,OAAA,OAAA,CAAA,GACGH,mBAAkB,GAClB,SAAS;IAEd,MAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GACCC,qBAAoB,GACpB,WAAW;IAEhB,UAAQ,OAAA,OAAA,OAAA,OAAA,CAAA,GACHC,yBAAwB,GACxB,eAAe;IAEpB,QAAM,OAAA,OAAA,OAAA,OAAA,CAAA,GACDC,uBAAsB,GACtB,aAAa;;AAGtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDM,SAAU,UAAU,WAAiB;AACzC,QAAM,UAAU,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI;AAC5C,SAAO,UAAU;AACnB;AAEM,SAAU,OAAI;AAClB,SAAO,uCAAuC,QAAQ,SAAS,SAAU,GAAC;AACxE,UAAM,IAAK,KAAK,OAAM,IAAK,KAAM,GAC/B,IAAI,KAAK,MAAM,IAAK,IAAI,IAAO;AACjC,WAAO,EAAE,SAAS,EAAE;EACtB,CAAC;AACH;AAEO,IAAM,YAAY,MAAM,OAAO,aAAa;AAEnD,IAAM,yBAAyB;EAC7B,QAAQ;EACR,UAAU;;AAML,IAAM,uBAAuB,MAAK;AACvC,MAAI,CAAC,UAAS,GAAI;AAChB,WAAO;;AAGT,MAAI;AACF,QAAI,OAAO,WAAW,iBAAiB,UAAU;AAC/C,aAAO;;WAEF,GAAP;AAEA,WAAO;;AAGT,MAAI,uBAAuB,QAAQ;AACjC,WAAO,uBAAuB;;AAGhC,QAAM,YAAY,QAAQ,KAAK,OAAM,IAAK,KAAK,OAAM;AAErD,MAAI;AACF,eAAW,aAAa,QAAQ,WAAW,SAAS;AACpD,eAAW,aAAa,WAAW,SAAS;AAE5C,2BAAuB,SAAS;AAChC,2BAAuB,WAAW;WAC3B,GAAP;AAIA,2BAAuB,SAAS;AAChC,2BAAuB,WAAW;;AAGpC,SAAO,uBAAuB;AAChC;AAEM,SAAU,mBAAmB,MAAc,KAAY;;AAC3D,MAAI,CAAC;AAAK,YAAM,KAAA,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ;AAE1C,SAAO,KAAK,QAAQ,WAAW,MAAM;AACrC,QAAM,QAAQ,IAAI,OAAO,UAAU,OAAO,mBAAmB,GAC3D,UAAU,MAAM,KAAK,GAAG;AAC1B,MAAI,CAAC;AAAS,WAAO;AACrB,MAAI,CAAC,QAAQ,CAAC;AAAG,WAAO;AACxB,SAAO,mBAAmB,QAAQ,CAAC,EAAE,QAAQ,OAAO,GAAG,CAAC;AAC1D;AAIO,IAAMC,gBAAe,CAAC,gBAA8B;AACzD,MAAI;AACJ,MAAI,aAAa;AACf,aAAS;aACA,OAAO,UAAU,aAAa;AACvC,aAAS,IAAU,SAAQC,YAAA,QAAA,QAAA,QAAA,aAAA;AAAC,aAAA,OAAO,MAAM,OAAO,gCAAa,GAAG,MAAM,GAAG,IAAI;IAAC,CAAA;SACzE;AACL,aAAS;;AAEX,SAAO,IAAI,SAAS,OAAO,GAAG,IAAI;AACpC;AAEO,IAAM,yBAAyB,CAAC,kBAAqD;AAC1F,SACE,OAAO,kBAAkB,YACzB,kBAAkB,QAClB,YAAY,iBACZ,QAAQ,iBACR,UAAU,iBACV,OAAQ,cAAsB,SAAS;AAE3C;AAGO,IAAM,eAAe,CAC1B,SACA,KACA,SACiBA,YAAA,QAAA,QAAA,QAAA,aAAA;AACjB,QAAM,QAAQ,QAAQ,KAAK,KAAK,UAAU,IAAI,CAAC;AACjD,CAAC;AAEM,IAAM,eAAe,CAAO,SAA2B,QAAiCA,YAAA,QAAA,QAAA,QAAA,aAAA;AAC7F,QAAM,QAAQ,MAAM,QAAQ,QAAQ,GAAG;AAEvC,MAAI,CAAC,OAAO;AACV,WAAO;;AAGT,MAAI;AACF,WAAO,KAAK,MAAM,KAAK;WACvB,IAAA;AACA,WAAO;;AAEX,CAAC;AAEM,IAAM,kBAAkB,CAAO,SAA2B,QAA8BA,YAAA,QAAA,QAAA,QAAA,aAAA;AAC7F,QAAM,QAAQ,WAAW,GAAG;AAC9B,CAAC;AAEK,SAAU,gBAAgB,OAAa;AAC3C,QAAM,MAAM;AACZ,MAAI,SAAS;AACb,MAAI,MAAM,MAAM;AAChB,MAAI,MAAM,MAAM,MAAM;AACtB,MAAI,IAAI;AACR,UAAQ,MAAM,QAAQ,KAAK,GAAG,EAAE,QAAQ,KAAK,GAAG;AAEhD,SAAO,IAAI,MAAM,QAAQ;AACvB,WAAO,IAAI,QAAQ,MAAM,OAAO,GAAG,CAAC;AACpC,WAAO,IAAI,QAAQ,MAAM,OAAO,GAAG,CAAC;AACpC,WAAO,IAAI,QAAQ,MAAM,OAAO,GAAG,CAAC;AACpC,WAAO,IAAI,QAAQ,MAAM,OAAO,GAAG,CAAC;AACpC,WAAQ,QAAQ,IAAM,QAAQ;AAC9B,YAAS,OAAO,OAAO,IAAM,QAAQ;AACrC,YAAS,OAAO,MAAM,IAAK;AAC3B,aAAS,SAAS,OAAO,aAAa,IAAI;AAE1C,QAAI,QAAQ,MAAM,QAAQ,GAAG;AAC3B,eAAS,SAAS,OAAO,aAAa,IAAI;;AAE5C,QAAI,QAAQ,MAAM,QAAQ,GAAG;AAC3B,eAAS,SAAS,OAAO,aAAa,IAAI;;;AAG9C,SAAO;AACT;AAOM,IAAO,WAAP,MAAe;EASnB,cAAA;AAEE;AAAE,SAAa,UAAU,IAAI,SAAS,mBAAmB,CAAC,KAAK,QAAO;AAEpE;AAAE,WAAa,UAAU;AAEvB,WAAa,SAAS;IAC1B,CAAC;EACH;;AAhBc,SAAA,qBAAyC;AAoBnD,SAAU,iBAAiB,OAAa;AAE5C,QAAM,iBAAiB;AAEvB,QAAM,QAAQ,MAAM,MAAM,GAAG;AAE7B,MAAI,MAAM,WAAW,GAAG;AACtB,UAAM,IAAI,MAAM,uCAAuC;;AAGzD,MAAI,CAAC,eAAe,KAAK,MAAM,CAAC,CAAC,GAAG;AAClC,UAAM,IAAI,MAAM,sDAAsD;;AAGxE,QAAM,YAAY,MAAM,CAAC;AACzB,SAAO,KAAK,MAAM,gBAAgB,SAAS,CAAC;AAC9C;AAKM,SAAU,MAAM,MAAY;AAChC,SAAO,IAAI,QAAQ,CAAC,WAAU;AAC5B,eAAW,MAAM,OAAO,IAAI,GAAG,IAAI;EACrC,CAAC;AACH;AAOM,SAAU,UACd,IACA,aAAwE;AAExE,QAAM,UAAU,IAAI,QAAW,CAAC,QAAQ,WAAU;AAEhD;AAAC,KAAC,MAAWA,YAAA,MAAA,QAAA,QAAA,aAAA;AACX,eAAS,UAAU,GAAG,UAAU,UAAU,WAAW;AACnD,YAAI;AACF,gBAAM,SAAS,MAAM,GAAG,OAAO;AAE/B,cAAI,CAAC,YAAY,SAAS,MAAM,MAAM,GAAG;AACvC,mBAAO,MAAM;AACb;;iBAEK,GAAP;AACA,cAAI,CAAC,YAAY,SAAS,CAAC,GAAG;AAC5B,mBAAO,CAAC;AACR;;;;IAIR,CAAC,GAAC;EACJ,CAAC;AAED,SAAO;AACT;AAEA,SAAS,QAAQ,KAAW;AAC1B,UAAQ,MAAM,IAAI,SAAS,EAAE,GAAG,OAAO,EAAE;AAC3C;AAGM,SAAU,uBAAoB;AAClC,QAAM,iBAAiB;AACvB,QAAM,QAAQ,IAAI,YAAY,cAAc;AAC5C,MAAI,OAAO,WAAW,aAAa;AACjC,UAAM,UAAU;AAChB,UAAM,aAAa,QAAQ;AAC3B,QAAI,WAAW;AACf,aAAS,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACvC,kBAAY,QAAQ,OAAO,KAAK,MAAM,KAAK,OAAM,IAAK,UAAU,CAAC;;AAEnE,WAAO;;AAET,SAAO,gBAAgB,KAAK;AAC5B,SAAO,MAAM,KAAK,OAAO,OAAO,EAAE,KAAK,EAAE;AAC3C;AAEA,SAAe,OAAO,cAAoB;;AACxC,UAAM,UAAU,IAAI,YAAW;AAC/B,UAAM,cAAc,QAAQ,OAAO,YAAY;AAC/C,UAAM,OAAO,MAAM,OAAO,OAAO,OAAO,WAAW,WAAW;AAC9D,UAAM,QAAQ,IAAI,WAAW,IAAI;AAEjC,WAAO,MAAM,KAAK,KAAK,EACpB,IAAI,CAAC,MAAM,OAAO,aAAa,CAAC,CAAC,EACjC,KAAK,EAAE;EACZ,CAAC;;AAED,SAAS,gBAAgB,KAAW;AAClC,SAAO,KAAK,GAAG,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,EAAE;AAC5E;AAEM,SAAgB,sBAAsB,UAAgB;;AAC1D,QAAI,OAAO,WAAW,aAAa;AACjC,cAAQ,KACN,oGAAoG;AAEtG,aAAO;;AAET,UAAM,SAAS,MAAM,OAAO,QAAQ;AACpC,WAAO,gBAAgB,MAAM;EAC/B,CAAC;;;;AC3RK,IAAO,YAAP,cAAyB,MAAK;EAIlC,YAAY,SAAiB,QAAe;AAC1C,UAAM,OAAO;AAHL,SAAA,gBAAgB;AAIxB,SAAK,OAAO;AACZ,SAAK,SAAS;EAChB;;AAGI,SAAU,YAAY,OAAc;AACxC,SAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,mBAAmB;AAC3E;AAEM,IAAO,eAAP,cAA4B,UAAS;EAGzC,YAAY,SAAiB,QAAc;AACzC,UAAM,SAAS,MAAM;AACrB,SAAK,OAAO;AACZ,SAAK,SAAS;EAChB;EAEA,SAAM;AACJ,WAAO;MACL,MAAM,KAAK;MACX,SAAS,KAAK;MACd,QAAQ,KAAK;;EAEjB;;AAGI,SAAU,eAAe,OAAc;AAC3C,SAAO,YAAY,KAAK,KAAK,MAAM,SAAS;AAC9C;AAEM,IAAO,mBAAP,cAAgC,UAAS;EAG7C,YAAY,SAAiB,eAAsB;AACjD,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,gBAAgB;EACvB;;AAGI,IAAO,kBAAP,cAA+B,UAAS;EAG5C,YAAY,SAAiB,MAAc,QAAc;AACvD,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,SAAS;EAChB;EAEA,SAAM;AACJ,WAAO;MACL,MAAM,KAAK;MACX,SAAS,KAAK;MACd,QAAQ,KAAK;;EAEjB;;AAGI,IAAO,0BAAP,cAAuC,gBAAe;EAC1D,cAAA;AACE,UAAM,yBAAyB,2BAA2B,GAAG;EAC/D;;AAGI,IAAO,8BAAP,cAA2C,gBAAe;EAC9D,YAAY,SAAe;AACzB,UAAM,SAAS,+BAA+B,GAAG;EACnD;;AAGI,IAAO,iCAAP,cAA8C,gBAAe;EAEjE,YAAY,SAAiB,UAAkD,MAAI;AACjF,UAAM,SAAS,kCAAkC,GAAG;AAFtD,SAAA,UAAkD;AAGhD,SAAK,UAAU;EACjB;EAEA,SAAM;AACJ,WAAO;MACL,MAAM,KAAK;MACX,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,SAAS,KAAK;;EAElB;;AAGI,IAAO,iCAAP,cAA8C,gBAAe;EAEjE,YAAY,SAAiB,UAAkD,MAAI;AACjF,UAAM,SAAS,kCAAkC,GAAG;AAFtD,SAAA,UAAkD;AAGhD,SAAK,UAAU;EACjB;EAEA,SAAM;AACJ,WAAO;MACL,MAAM,KAAK;MACX,SAAS,KAAK;MACd,QAAQ,KAAK;MACb,SAAS,KAAK;;EAElB;;AAGI,IAAO,0BAAP,cAAuC,gBAAe;EAC1D,YAAY,SAAiB,QAAc;AACzC,UAAM,SAAS,2BAA2B,MAAM;EAClD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFF,IAAMC,oBAAmB,CAAC,QACxB,IAAI,OAAO,IAAI,WAAW,IAAI,qBAAqB,IAAI,SAAS,KAAK,UAAU,GAAG;AAEpF,IAAMC,eAAc,CAAO,OAAgB,WAAkCC,YAAA,QAAA,QAAA,QAAA,aAAA;AAC3E,QAAM,sBAAsB,CAAC,KAAK,KAAK,GAAG;AAC1C,MAAI,CAAC,uBAAuB,KAAK,GAAG;AAClC,WAAO,IAAI,wBAAwBF,kBAAiB,KAAK,GAAG,CAAC,CAAC;aACrD,oBAAoB,SAAS,MAAM,MAAM,GAAG;AAErD,WAAO,IAAI,wBAAwBA,kBAAiB,KAAK,GAAG,MAAM,MAAM,CAAC;SACpE;AAEL,UACG,KAAI,EACJ,KAAK,CAAC,QAAO;AACZ,aAAO,IAAI,aAAaA,kBAAiB,GAAG,GAAG,MAAM,UAAU,GAAG,CAAC;IACrE,CAAC,EACA,MAAM,CAAC,MAAK;AAEX,aAAO,IAAI,iBAAiBA,kBAAiB,CAAC,GAAG,CAAC,CAAC;IACrD,CAAC;;AAEP,CAAC;AAED,IAAMG,qBAAoB,CACxB,QACA,SACA,YACA,SACE;AACF,QAAM,SAA+B,EAAE,QAAQ,UAAS,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAAW,CAAA,EAAE;AAE9E,MAAI,WAAW,OAAO;AACpB,WAAO;;AAGT,SAAO,UAAO,OAAA,OAAA,EAAK,gBAAgB,iCAAgC,GAAK,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,OAAO;AACxF,SAAO,OAAO,KAAK,UAAU,IAAI;AACjC,SAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GAAY,MAAM,GAAK,UAAU;AACnC;AAaM,SAAgB,SACpB,SACA,QACA,KACA,SAA8B;;;AAE9B,UAAM,UAAO,OAAA,OAAA,CAAA,GAAQ,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,OAAO;AACrC,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,KAAK;AAChB,cAAQ,eAAe,IAAI,UAAU,QAAQ;;AAE/C,UAAM,MAAK,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,WAAK,QAAA,OAAA,SAAA,KAAI,CAAA;AAC7B,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAAY;AACvB,SAAG,aAAa,IAAI,QAAQ;;AAE9B,UAAM,cAAc,OAAO,KAAK,EAAE,EAAE,SAAS,MAAM,IAAI,gBAAgB,EAAE,EAAE,SAAQ,IAAK;AACxF,UAAM,OAAO,MAAMC,gBACjB,SACA,QACA,MAAM,aACN,EAAE,SAAS,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAAa,GAChD,CAAA,GACA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,IAAI;AAEf,YAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,SAAQ,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,MAAM,IAAI,IAAI,EAAE,MAAI,OAAA,OAAA,CAAA,GAAO,IAAI,GAAI,OAAO,KAAI;;;AAGjF,SAAeA,gBACb,SACA,QACA,KACA,SACA,YACA,MAAa;;AAEb,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,cAAQ,KAAKD,mBAAkB,QAAQ,SAAS,YAAY,IAAI,CAAC,EAC9D,KAAK,CAAC,WAAU;AACf,YAAI,CAAC,OAAO;AAAI,gBAAM;AACtB,YAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAAe,iBAAO;AACnC,eAAO,OAAO,KAAI;MACpB,CAAC,EACA,KAAK,CAAC,SAAS,QAAQ,IAAI,CAAC,EAC5B,MAAM,CAAC,UAAUF,aAAY,OAAO,MAAM,CAAC;IAChD,CAAC;EACH,CAAC;;AAEK,SAAU,iBAAiB,MAAS;;AACxC,MAAI,UAAU;AACd,MAAI,WAAW,IAAI,GAAG;AACpB,cAAO,OAAA,OAAA,CAAA,GAAQ,IAAI;AACnB,YAAQ,aAAa,UAAU,KAAK,UAAU;;AAEhD,QAAM,QAAa,KAAA,KAAK,UAAI,QAAA,OAAA,SAAA,KAAK;AACjC,SAAO,EAAE,MAAM,EAAE,SAAS,KAAI,GAAI,OAAO,KAAI;AAC/C;AAEM,SAAU,cAAc,MAAS;;AACrC,QAAM,QAAa,KAAA,KAAK,UAAI,QAAA,OAAA,SAAA,KAAK;AACjC,SAAO,EAAE,MAAM,EAAE,KAAI,GAAI,OAAO,KAAI;AACtC;AAEM,SAAU,aAAa,MAAS;AACpC,SAAO,EAAE,MAAM,OAAO,KAAI;AAC5B;AAEM,SAAU,sBAAsB,MAAS;AAC7C,QAAM,EAAE,aAAa,WAAW,cAAc,aAAa,kBAAiB,IAAc,MAAT,OAAI,OAAK,MAApF,CAAA,eAAA,aAAA,gBAAA,eAAA,mBAAA,CAAiF;AAEvF,QAAM,aAAqC;IACzC;IACA;IACA;IACA;IACA;;AAGF,QAAM,OAAI,OAAA,OAAA,CAAA,GAAc,IAAI;AAC5B,SAAO;IACL,MAAM;MACJ;MACA;;IAEF,OAAO;;AAEX;AAEM,SAAU,uBAAuB,MAAS;AAC9C,SAAO;AACT;AAOA,SAAS,WAAW,MAAS;AAC3B,SAAO,KAAK,gBAAgB,KAAK,iBAAiB,KAAK;AACzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvJA,IAAqB,iBAArB,MAAmC;EAUjC,YAAY,EACV,MAAM,IACN,UAAU,CAAA,GACV,OAAAI,OAAK,GAON;AACC,SAAK,MAAM;AACX,SAAK,UAAU;AACf,SAAK,QAAQC,cAAaD,MAAK;AAC/B,SAAK,MAAM;MACT,aAAa,KAAK,aAAa,KAAK,IAAI;MACxC,cAAc,KAAK,cAAc,KAAK,IAAI;;EAE9C;;;;;EAMM,QAAQ,KAAW;;AACvB,UAAI;AACF,cAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,cAAc;UACvD,SAAS,KAAK;UACd;UACA,eAAe;SAChB;AACD,eAAO,EAAE,MAAM,MAAM,OAAO,KAAI;eACzB,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;;;EAQK,kBACJ,OACA,UAGI,CAAA,GAAE;;AAEN,UAAI;AACF,eAAO,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,cAAc;UAC9D,MAAM,EAAE,OAAO,MAAM,QAAQ,KAAI;UACjC,SAAS,KAAK;UACd,YAAY,QAAQ;UACpB,OAAO;SACR;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,KAAI,GAAI,MAAK;;AAGtC,cAAM;;IAEV,CAAC;;;;;;;;;EASK,aAAa,QAA0B;;AAC3C,UAAI;AACF,cAAM,EAAE,QAAO,IAAc,QAAT,OAAIE,QAAK,QAAvB,CAAA,SAAA,CAAoB;AAC1B,cAAM,OAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GAAa,IAAI,GAAK,OAAO;AACvC,YAAI,cAAc,MAAM;AAEtB,eAAK,YAAY,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM;AACvB,iBAAO,KAAK,UAAU;;AAExB,eAAO,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,2BAA2B;UAC3E;UACA,SAAS,KAAK;UACd,OAAO;UACP,YAAY,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;SACtB;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO;YACL,MAAM;cACJ,YAAY;cACZ,MAAM;;YAER;;;AAGJ,cAAM;;IAEV,CAAC;;;;;;;EAOK,WAAW,YAA+B;;AAC9C,UAAI;AACF,eAAO,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,mBAAmB;UACnE,MAAM;UACN,SAAS,KAAK;UACd,OAAO;SACR;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,KAAI,GAAI,MAAK;;AAGtC,cAAM;;IAEV,CAAC;;;;;;;;EAQK,UACJ,QAAmB;;;AAKnB,UAAI;AACF,cAAM,aAAyB,EAAE,UAAU,MAAM,UAAU,GAAG,OAAO,EAAC;AACtE,cAAM,WAAW,MAAM,SAAS,KAAK,OAAO,OAAO,GAAG,KAAK,mBAAmB;UAC5E,SAAS,KAAK;UACd,eAAe;UACf,OAAO;YACL,OAAM,MAAA,KAAA,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ,OAAE,QAAA,OAAA,SAAA,KAAI;YAClC,WAAU,MAAA,KAAA,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ,OAAE,QAAA,OAAA,SAAA,KAAI;;UAE3C,OAAO;SACR;AACD,YAAI,SAAS;AAAO,gBAAM,SAAS;AAEnC,cAAM,QAAQ,MAAM,SAAS,KAAI;AACjC,cAAM,SAAQ,KAAA,SAAS,QAAQ,IAAI,eAAe,OAAC,QAAA,OAAA,SAAA,KAAI;AACvD,cAAM,SAAQ,MAAA,KAAA,SAAS,QAAQ,IAAI,MAAM,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,MAAM,GAAG,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA;AAC1D,YAAI,MAAM,SAAS,GAAG;AACpB,gBAAM,QAAQ,CAAC,SAAgB;AAC7B,kBAAM,OAAO,SAAS,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC;AACtE,kBAAM,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACvD,uBAAW,GAAG,SAAS,IAAI;UAC7B,CAAC;AAED,qBAAW,QAAQ,SAAS,KAAK;;AAEnC,eAAO,EAAE,MAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,KAAK,GAAK,UAAU,GAAI,OAAO,KAAI;eAChD,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,OAAO,CAAA,EAAE,GAAI,MAAK;;AAErC,cAAM;;;;;;;;;;;EAWJ,YAAY,KAAW;;AAC3B,UAAI;AACF,eAAO,MAAM,SAAS,KAAK,OAAO,OAAO,GAAG,KAAK,mBAAmB,OAAO;UACzE,SAAS,KAAK;UACd,OAAO;SACR;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,KAAI,GAAI,MAAK;;AAGtC,cAAM;;IAEV,CAAC;;;;;;;;;EASK,eAAe,KAAa,YAA+B;;AAC/D,UAAI;AACF,eAAO,MAAM,SAAS,KAAK,OAAO,OAAO,GAAG,KAAK,mBAAmB,OAAO;UACzE,MAAM;UACN,SAAS,KAAK;UACd,OAAO;SACR;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,KAAI,GAAI,MAAK;;AAGtC,cAAM;;IAEV,CAAC;;;;;;;;;;;EAWK,WAAW,IAAY,mBAAmB,OAAK;;AACnD,UAAI;AACF,eAAO,MAAM,SAAS,KAAK,OAAO,UAAU,GAAG,KAAK,mBAAmB,MAAM;UAC3E,SAAS,KAAK;UACd,MAAM;YACJ,oBAAoB;;UAEtB,OAAO;SACR;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,KAAI,GAAI,MAAK;;AAGtC,cAAM;;IAEV,CAAC;;EAEa,aACZ,QAAqC;;AAErC,UAAI;AACF,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,SAC5B,KAAK,OACL,OACA,GAAG,KAAK,mBAAmB,OAAO,kBAClC;UACE,SAAS,KAAK;UACd,OAAO,CAAC,YAAgB;AACtB,mBAAO,EAAE,MAAM,EAAE,QAAO,GAAI,OAAO,KAAI;UACzC;SACD;AAEH,eAAO,EAAE,MAAM,MAAK;eACb,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;EAEa,cACZ,QAAsC;;AAEtC,UAAI;AACF,cAAM,OAAO,MAAM,SACjB,KAAK,OACL,UACA,GAAG,KAAK,mBAAmB,OAAO,kBAAkB,OAAO,MAC3D;UACE,SAAS,KAAK;SACf;AAGH,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;ACpUI,IAAMC,WAAU;;;ACAhB,IAAM,aAAa;AACnB,IAAM,cAAc;AAEpB,IAAMC,mBAAkB,EAAE,iBAAiB,aAAaC,WAAS;AACjE,IAAM,gBAAgB;;;ACF7B,IAAM,sBAAwC;EAC5C,SAAS,CAAC,QAAO;AACf,QAAI,CAAC,qBAAoB,GAAI;AAC3B,aAAO;;AAGT,WAAO,WAAW,aAAa,QAAQ,GAAG;EAC5C;EACA,SAAS,CAAC,KAAK,UAAS;AACtB,QAAI,CAAC,qBAAoB,GAAI;AAC3B;;AAGF,eAAW,aAAa,QAAQ,KAAK,KAAK;EAC5C;EACA,YAAY,CAAC,QAAO;AAClB,QAAI,CAAC,qBAAoB,GAAI;AAC3B;;AAGF,eAAW,aAAa,WAAW,GAAG;EACxC;;AAGF,IAAA,wBAAe;;;ACxBT,SAAU,qBAAkB;AAChC,MAAI,OAAO,eAAe;AAAU;AACpC,MAAI;AACF,WAAO,eAAe,OAAO,WAAW,aAAa;MACnD,KAAK,WAAA;AACH,eAAO;MACT;MACA,cAAc;KACf;AAED,cAAU,aAAa;AAEvB,WAAO,OAAO,UAAU;WACjB,GAAP;AACA,QAAI,OAAO,SAAS,aAAa;AAE/B,WAAK,aAAa;;;AAGxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkDA,mBAAkB;AAElB,IAAM,kBAA4E;EAChF,KAAK;EACL,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,oBAAoB;EACpB,SAASC;EACT,UAAU;;AAIZ,IAAM,6BAA6B,KAAK;AAIxC,IAAM,8BAA8B;AAEpC,IAAqB,eAArB,MAAiC;;;;EAoD/B,YAAY,SAA4B;;AA1B9B,SAAA,sBAAiD,oBAAI,IAAG;AACxD,SAAA,oBAA2D;AAC3D,SAAA,4BAAyD;AACzD,SAAA,qBAA8D;AAO9D,SAAA,oBAAsD;AACtD,SAAA,qBAAqB;AAUrB,SAAA,mBAA4C;AAMpD,UAAM,WAAQ,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,eAAe,GAAK,OAAO;AACjD,SAAK,kBAAkB;AACvB,SAAK,aAAa,SAAS;AAC3B,SAAK,mBAAmB,SAAS;AACjC,SAAK,iBAAiB,SAAS;AAC/B,SAAK,UAAU,SAAS,WAAW;AACnC,SAAK,QAAQ,IAAI,eAAe;MAC9B,KAAK,SAAS;MACd,SAAS,SAAS;MAClB,OAAO,SAAS;KACjB;AAED,SAAK,MAAM,SAAS;AACpB,SAAK,UAAU,SAAS;AACxB,SAAK,QAAQC,cAAa,SAAS,KAAK;AACxC,SAAK,qBAAqB,SAAS;AACnC,SAAK,WAAW,SAAS;AAEzB,SAAK,MAAM;MACT,QAAQ,KAAK,QAAQ,KAAK,IAAI;MAC9B,QAAQ,KAAK,QAAQ,KAAK,IAAI;MAC9B,UAAU,KAAK,UAAU,KAAK,IAAI;MAClC,WAAW,KAAK,WAAW,KAAK,IAAI;MACpC,aAAa,KAAK,aAAa,KAAK,IAAI;MACxC,oBAAoB,KAAK,oBAAoB,KAAK,IAAI;MACtD,gCAAgC,KAAK,gCAAgC,KAAK,IAAI;;AAGhF,QAAI,UAAS,KAAM,WAAW,oBAAoB,KAAK,kBAAkB,KAAK,YAAY;AACxF,UAAI;AACF,aAAK,mBAAmB,IAAI,WAAW,iBAAiB,KAAK,UAAU;eAChE,GAAP;AACA,gBAAQ,MACN,0FACA,CAAC;;AAIL,OAAA,KAAA,KAAK,sBAAgB,QAAA,OAAA,SAAA,SAAA,GAAE,iBAAiB,WAAW,CAAC,UAAS;AAC3D,aAAK,sBAAsB,MAAM,KAAK,OAAO,MAAM,KAAK,SAAS,KAAK;MACxE,CAAC;;AAGH,SAAK,WAAU;EACjB;;;;;;EAOA,aAAU;AACR,QAAI,CAAC,KAAK,mBAAmB;AAC3B,WAAK,oBAAoB,KAAK,YAAW;;AAG3C,WAAO,KAAK;EACd;;;;;;;EAQc,cAAW;;AACvB,UAAI,KAAK,mBAAmB;AAC1B,eAAO,KAAK;;AAGd,UAAI;AACF,cAAM,aAAa,MAAM,KAAK,YAAW;AACzC,YAAK,KAAK,sBAAsB,KAAK,qBAAoB,KAAO,YAAY;AAC1E,gBAAM,EAAE,MAAM,MAAK,IAAK,MAAM,KAAK,mBAAmB,UAAU;AAChE,cAAI,OAAO;AAGT,kBAAM,KAAK,eAAc;AAEzB,mBAAO,EAAE,MAAK;;AAGhB,gBAAM,EAAE,SAAS,aAAY,IAAK;AAElC,gBAAM,KAAK,aAAa,OAAO;AAE/B,qBAAW,MAAK;AACd,gBAAI,iBAAiB,YAAY;AAC/B,mBAAK,sBAAsB,qBAAqB,OAAO;mBAClD;AACL,mBAAK,sBAAsB,aAAa,OAAO;;UAEnD,GAAG,CAAC;AAEJ,iBAAO,EAAE,OAAO,KAAI;;AAItB,cAAM,KAAK,mBAAkB;AAC7B,eAAO,EAAE,OAAO,KAAI;eACb,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAK;;AAGhB,eAAO;UACL,OAAO,IAAI,iBAAiB,0CAA0C,KAAK;;;AAG7E,cAAM,KAAK,wBAAuB;;IAEtC,CAAC;;;;;;;;;;;EAWK,OAAO,aAA0C;;;AACrD,UAAI;AACF,cAAM,KAAK,eAAc;AAEzB,YAAI;AACJ,YAAI,WAAW,aAAa;AAC1B,gBAAM,EAAE,OAAO,UAAU,QAAO,IAAK;AACrC,cAAI,gBAA+B;AACnC,cAAI,sBAAqC;AACzC,cAAI,KAAK,aAAa,QAAQ;AAC5B,kBAAM,eAAe,qBAAoB;AACzC,kBAAM,aAAa,KAAK,SAAS,GAAG,KAAK,4BAA4B,YAAY;AACjF,4BAAgB,MAAM,sBAAsB,YAAY;AACxD,kCAAsB,iBAAiB,gBAAgB,UAAU;;AAEnE,gBAAM,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,cAAc;YAC7D,SAAS,KAAK;YACd,YAAY,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;YACrB,MAAM;cACJ;cACA;cACA,OAAM,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UAAI,QAAA,OAAA,SAAA,KAAI,CAAA;cACvB,sBAAsB,EAAE,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAY;cAC5D,gBAAgB;cAChB,uBAAuB;;YAEzB,OAAO;WACR;mBACQ,WAAW,aAAa;AACjC,gBAAM,EAAE,OAAO,UAAU,QAAO,IAAK;AACrC,gBAAM,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,cAAc;YAC7D,SAAS,KAAK;YACd,MAAM;cACJ;cACA;cACA,OAAM,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UAAI,QAAA,OAAA,SAAA,KAAI,CAAA;cACvB,UAAS,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAO,QAAA,OAAA,SAAA,KAAI;cAC7B,sBAAsB,EAAE,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAY;;YAE9D,OAAO;WACR;eACI;AACL,gBAAM,IAAI,4BACR,iEAAiE;;AAIrE,cAAM,EAAE,MAAM,MAAK,IAAK;AAExB,YAAI,SAAS,CAAC,MAAM;AAClB,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAY;;AAG5D,cAAM,UAA0B,KAAK;AACrC,cAAM,OAAoB,KAAK;AAE/B,YAAI,KAAK,SAAS;AAChB,gBAAM,KAAK,aAAa,KAAK,OAAO;AACpC,eAAK,sBAAsB,aAAa,OAAO;;AAGjD,eAAO,EAAE,MAAM,EAAE,MAAM,QAAO,GAAI,OAAO,KAAI;eACtC,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;;AAGrD,cAAM;;;;;;;;;;;;EAYJ,mBAAmB,aAA0C;;AACjE,UAAI;AACF,cAAM,KAAK,eAAc;AAEzB,YAAI;AACJ,YAAI,WAAW,aAAa;AAC1B,gBAAM,EAAE,OAAO,UAAU,QAAO,IAAK;AACrC,gBAAM,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,iCAAiC;YAChF,SAAS,KAAK;YACd,MAAM;cACJ;cACA;cACA,sBAAsB,EAAE,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAY;;YAE9D,OAAO;WACR;mBACQ,WAAW,aAAa;AACjC,gBAAM,EAAE,OAAO,UAAU,QAAO,IAAK;AACrC,gBAAM,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,iCAAiC;YAChF,SAAS,KAAK;YACd,MAAM;cACJ;cACA;cACA,sBAAsB,EAAE,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAY;;YAE9D,OAAO;WACR;eACI;AACL,gBAAM,IAAI,4BACR,iEAAiE;;AAGrE,cAAM,EAAE,MAAM,MAAK,IAAK;AACxB,YAAI,SAAS,CAAC;AAAM,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;AACvE,YAAI,KAAK,SAAS;AAChB,gBAAM,KAAK,aAAa,KAAK,OAAO;AACpC,eAAK,sBAAsB,aAAa,KAAK,OAAO;;AAEtD,eAAO,EAAE,MAAM,MAAK;eACb,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;;AAErD,cAAM;;IAEV,CAAC;;;;;EAKK,gBAAgB,aAAuC;;;AAC3D,YAAM,KAAK,eAAc;AAEzB,aAAO,MAAM,KAAK,sBAAsB,YAAY,UAAU;QAC5D,aAAY,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;QACjC,SAAQ,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;QAC7B,cAAa,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;QAClC,sBAAqB,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;OAC3C;;;;;;EAMG,uBAAuB,UAAgB;;AAC3C,YAAM,eAAe,MAAM,aAAa,KAAK,SAAS,GAAG,KAAK,0BAA0B;AACxF,YAAM,EAAE,MAAM,MAAK,IAAK,MAAM,SAC5B,KAAK,OACL,QACA,GAAG,KAAK,6BACR;QACE,SAAS,KAAK;QACd,MAAM;UACJ,WAAW;UACX,eAAe;;QAEjB,OAAO;OACR;AAEH,YAAM,gBAAgB,KAAK,SAAS,GAAG,KAAK,0BAA0B;AACtE,UAAI,SAAS,CAAC;AAAM,eAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;AACvE,UAAI,KAAK,SAAS;AAChB,cAAM,KAAK,aAAa,KAAK,OAAO;AACpC,aAAK,sBAAsB,aAAa,KAAK,OAAO;;AAEtD,aAAO,EAAE,MAAM,MAAK;IACtB,CAAC;;;;;;;;EAQK,kBAAkB,aAAyC;;AAC/D,YAAM,KAAK,eAAc;AAEzB,UAAI;AACF,cAAM,EAAE,SAAS,UAAU,OAAO,MAAK,IAAK;AAE5C,cAAM,MAAM,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,iCAAiC;UACtF,SAAS,KAAK;UACd,MAAM;YACJ;YACA,UAAU;YACV;YACA,sBAAsB,EAAE,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAY;;UAE9D,OAAO;SACR;AAED,cAAM,EAAE,MAAM,MAAK,IAAK;AACxB,YAAI,SAAS,CAAC;AAAM,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;AACvE,YAAI,KAAK,SAAS;AAChB,gBAAM,KAAK,aAAa,KAAK,OAAO;AACpC,eAAK,sBAAsB,aAAa,KAAK,OAAO;;AAEtD,eAAO,EAAE,MAAM,MAAK;eACb,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;;AAErD,cAAM;;IAEV,CAAC;;;;;;;;;;;;;;;;;;EAkBK,cAAc,aAA8C;;;AAChE,UAAI;AACF,cAAM,KAAK,eAAc;AAEzB,YAAI,WAAW,aAAa;AAC1B,gBAAM,EAAE,OAAO,QAAO,IAAK;AAC3B,cAAI,gBAA+B;AACnC,cAAI,sBAAqC;AACzC,cAAI,KAAK,aAAa,QAAQ;AAC5B,kBAAM,eAAe,qBAAoB;AACzC,kBAAM,aAAa,KAAK,SAAS,GAAG,KAAK,4BAA4B,YAAY;AACjF,4BAAgB,MAAM,sBAAsB,YAAY;AACxD,kCAAsB,iBAAiB,gBAAgB,UAAU;;AAEnE,gBAAM,EAAE,MAAK,IAAK,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,WAAW;YACtE,SAAS,KAAK;YACd,MAAM;cACJ;cACA,OAAM,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UAAI,QAAA,OAAA,SAAA,KAAI,CAAA;cACvB,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,sBAAgB,QAAA,OAAA,SAAA,KAAI;cAC1C,sBAAsB,EAAE,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAY;cAC5D,gBAAgB;cAChB,uBAAuB;;YAEzB,YAAY,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;WACtB;AACD,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;;AAErD,YAAI,WAAW,aAAa;AAC1B,gBAAM,EAAE,OAAO,QAAO,IAAK;AAC3B,gBAAM,EAAE,MAAK,IAAK,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,WAAW;YACtE,SAAS,KAAK;YACd,MAAM;cACJ;cACA,OAAM,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,UAAI,QAAA,OAAA,SAAA,KAAI,CAAA;cACvB,cAAa,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,sBAAgB,QAAA,OAAA,SAAA,KAAI;cAC1C,sBAAsB,EAAE,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAY;cAC5D,UAAS,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAO,QAAA,OAAA,SAAA,KAAI;;WAEhC;AACD,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;;AAErD,cAAM,IAAI,4BAA4B,mDAAmD;eAClF,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;;AAGrD,cAAM;;;;;;;EAOJ,UAAU,QAAuB;;;AACrC,UAAI;AACF,cAAM,KAAK,eAAc;AACzB,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,cAAc;UAC/E,SAAS,KAAK;UACd,MAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GACC,MAAM,GAAA,EACT,sBAAsB,EAAE,gBAAe,KAAA,OAAO,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,aAAY,EAAE,CAAA;UAEvE,aAAY,KAAA,OAAO,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;UAC5B,OAAO;SACR;AAED,YAAI,OAAO;AACT,gBAAM;;AAGR,YAAI,CAAC,MAAM;AACT,gBAAM,IAAI,MAAM,0CAA0C;;AAG5D,cAAM,UAA0B,KAAK;AACrC,cAAM,OAAa,KAAK;AAExB,YAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAAc;AACzB,gBAAM,KAAK,aAAa,OAAkB;AAC1C,eAAK,sBAAsB,aAAa,OAAO;;AAGjD,eAAO,EAAE,MAAM,EAAE,MAAM,QAAO,GAAI,OAAO,KAAI;eACtC,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;;AAGrD,cAAM;;;;;;;;;;;;;;;;;;EAkBJ,cAAc,QAAqB;;;AACvC,UAAI;AACF,cAAM,KAAK,eAAc;AAEzB,eAAO,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,WAAW;UAC3D,MAAI,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACE,gBAAgB,SAAS,EAAE,aAAa,OAAO,WAAU,IAAK,IAAK,GACnE,YAAY,SAAS,EAAE,QAAQ,OAAO,OAAM,IAAK,IAAK,GAAA,EAC1D,cAAa,MAAA,KAAA,OAAO,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,gBAAU,QAAA,OAAA,SAAA,KAAI,OAAS,CAAA,KAChD,KAAA,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,gBACjB,EAAE,sBAAsB,EAAE,eAAe,OAAO,QAAQ,aAAY,EAAE,IACtE,IAAK,GAAA,EACT,oBAAoB,KAAI,CAAA;UAE1B,SAAS,KAAK;UACd,OAAO;SACR;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAE5B,cAAM;;;;;;;;EAQJ,aAAU;;AAsBd,YAAM,KAAK;AAEX,UAAI,iBAAiC;AAErC,UAAI,KAAK,gBAAgB;AACvB,cAAM,eAAe,MAAM,aAAa,KAAK,SAAS,KAAK,UAAU;AAErE,YAAI,iBAAiB,MAAM;AACzB,cAAI,KAAK,gBAAgB,YAAY,GAAG;AACtC,6BAAiB;iBACZ;AACL,kBAAM,KAAK,eAAc;;;aAGxB;AACL,yBAAiB,KAAK;;AAGxB,UAAI,CAAC,gBAAgB;AACnB,eAAO,EAAE,MAAM,EAAE,SAAS,KAAI,GAAI,OAAO,KAAI;;AAG/C,YAAM,aAAa,eAAe,aAC9B,eAAe,cAAc,KAAK,IAAG,IAAK,MAC1C;AACJ,UAAI,CAAC,YAAY;AACf,eAAO,EAAE,MAAM,EAAE,SAAS,eAAc,GAAI,OAAO,KAAI;;AAGzD,YAAM,EAAE,SAAS,MAAK,IAAK,MAAM,KAAK,kBAAkB,eAAe,aAAa;AACpF,UAAI,OAAO;AACT,eAAO,EAAE,MAAM,EAAE,SAAS,KAAI,GAAI,MAAK;;AAGzC,aAAO,EAAE,MAAM,EAAE,QAAO,GAAI,OAAO,KAAI;IACzC,CAAC;;;;;;EAMK,QAAQ,KAAY;;;AACxB,UAAI;AACF,YAAI,CAAC,KAAK;AACR,gBAAM,EAAE,MAAM,MAAK,IAAK,MAAM,KAAK,WAAU;AAC7C,cAAI,OAAO;AACT,kBAAM;;AAIR,iBAAM,MAAA,KAAA,KAAK,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAY,QAAA,OAAA,SAAA,KAAI;;AAGtC,eAAO,MAAM,SAAS,KAAK,OAAO,OAAO,GAAG,KAAK,YAAY;UAC3D,SAAS,KAAK;UACd;UACA,OAAO;SACR;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,KAAI,GAAI,MAAK;;AAGtC,cAAM;;;;;;;EAOJ,WACJ,YACA,UAEI,CAAA,GAAE;;AAEN,UAAI;AACF,cAAM,EAAE,MAAM,aAAa,OAAO,aAAY,IAAK,MAAM,KAAK,WAAU;AACxE,YAAI,cAAc;AAChB,gBAAM;;AAER,YAAI,CAAC,YAAY,SAAS;AACxB,gBAAM,IAAI,wBAAuB;;AAEnC,cAAM,UAAmB,YAAY;AACrC,cAAM,EAAE,MAAM,OAAO,UAAS,IAAK,MAAM,SAAS,KAAK,OAAO,OAAO,GAAG,KAAK,YAAY;UACvF,SAAS,KAAK;UACd,YAAY,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;UACrB,MAAM;UACN,KAAK,QAAQ;UACb,OAAO;SACR;AACD,YAAI;AAAW,gBAAM;AACrB,gBAAQ,OAAO,KAAK;AACpB,cAAM,KAAK,aAAa,OAAO;AAC/B,aAAK,sBAAsB,gBAAgB,OAAO;AAElD,eAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,KAAI,GAAI,OAAO,KAAI;eAC3C,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,KAAI,GAAI,MAAK;;AAGtC,cAAM;;IAEV,CAAC;;;;;EAKO,WAAW,KAAW;AAK5B,WAAO,iBAAiB,GAAG;EAC7B;;;;;;EAOM,WAAW,gBAGhB;;AACC,UAAI;AACF,YAAI,CAAC,eAAe,gBAAgB,CAAC,eAAe,eAAe;AACjE,gBAAM,IAAI,wBAAuB;;AAGnC,cAAM,UAAU,KAAK,IAAG,IAAK;AAC7B,YAAIC,aAAY;AAChB,YAAI,aAAa;AACjB,YAAI,UAA0B;AAC9B,cAAM,UAAU,iBAAiB,eAAe,YAAY;AAC5D,YAAI,QAAQ,KAAK;AACf,UAAAA,aAAY,QAAQ;AACpB,uBAAaA,cAAa;;AAG5B,YAAI,YAAY;AACd,gBAAM,EAAE,SAAS,kBAAkB,MAAK,IAAK,MAAM,KAAK,kBACtD,eAAe,aAAa;AAE9B,cAAI,OAAO;AACT,mBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAY;;AAG5D,cAAI,CAAC,kBAAkB;AACrB,mBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,OAAO,KAAI;;AAE3D,oBAAU;eACL;AACL,gBAAM,EAAE,MAAM,MAAK,IAAK,MAAM,KAAK,QAAQ,eAAe,YAAY;AACtE,cAAI,OAAO;AACT,kBAAM;;AAER,oBAAU;YACR,cAAc,eAAe;YAC7B,eAAe,eAAe;YAC9B,MAAM,KAAK;YACX,YAAY;YACZ,YAAYA,aAAY;YACxB,YAAYA;;AAEd,gBAAM,KAAK,aAAa,OAAO;AAC/B,eAAK,sBAAsB,aAAa,OAAO;;AAGjD,eAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,MAAM,QAAO,GAAI,OAAO,KAAI;eACpD,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,SAAS,MAAM,MAAM,KAAI,GAAI,MAAK;;AAGrD,cAAM;;IAEV,CAAC;;;;;;;;EAQK,eAAe,gBAA0C;;;AAC7D,UAAI;AACF,YAAI,CAAC,gBAAgB;AACnB,gBAAM,EAAE,MAAM,OAAAC,OAAK,IAAK,MAAM,KAAK,WAAU;AAC7C,cAAIA,QAAO;AACT,kBAAMA;;AAGR,4BAAiB,KAAA,KAAK,aAAO,QAAA,OAAA,SAAA,KAAI;;AAGnC,YAAI,EAAC,mBAAc,QAAd,mBAAc,SAAA,SAAd,eAAgB,gBAAe;AAClC,gBAAM,IAAI,wBAAuB;;AAGnC,cAAM,EAAE,SAAS,MAAK,IAAK,MAAM,KAAK,kBAAkB,eAAe,aAAa;AACpF,YAAI,OAAO;AACT,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAY;;AAG5D,YAAI,CAAC,SAAS;AACZ,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,OAAO,KAAI;;AAG3D,eAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,MAAM,QAAO,GAAI,OAAO,KAAI;eACpD,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,MAAM,MAAM,SAAS,KAAI,GAAI,MAAK;;AAGrD,cAAM;;;;;;;EAOI,mBAAmB,YAAmB;;AAOlD,UAAI;AACF,YAAI,CAAC,UAAS;AAAI,gBAAM,IAAI,+BAA+B,sBAAsB;AACjF,YAAI,KAAK,aAAa,cAAc,CAAC,KAAK,qBAAoB,GAAI;AAChE,gBAAM,IAAI,+BAA+B,sCAAsC;mBACtE,KAAK,YAAY,UAAU,CAAC,YAAY;AACjD,gBAAM,IAAI,+BAA+B,4BAA4B;;AAEvE,YAAI,YAAY;AACd,gBAAM,WAAW,mBAAmB,MAAM;AAC1C,cAAI,CAAC;AAAU,kBAAM,IAAI,+BAA+B,mBAAmB;AAC3E,gBAAM,EAAE,MAAAC,OAAM,OAAAD,OAAK,IAAK,MAAM,KAAK,uBAAuB,QAAQ;AAClE,cAAIA;AAAO,kBAAMA;AACjB,cAAI,CAACC,MAAK;AAAS,kBAAM,IAAI,+BAA+B,sBAAsB;AAClF,iBAAO,EAAE,MAAM,EAAE,SAASA,MAAK,SAAS,cAAc,KAAI,GAAI,OAAO,KAAI;;AAG3E,cAAM,oBAAoB,mBAAmB,mBAAmB;AAChE,YAAI,mBAAmB;AACrB,gBAAM,aAAa,mBAAmB,YAAY;AAClD,cAAI,CAAC;AAAY,kBAAM,IAAI,+BAA+B,yBAAyB;AACnF,gBAAMD,SAAQ,mBAAmB,OAAO;AACxC,cAAI,CAACA;AAAO,kBAAM,IAAI,+BAA+B,oBAAoB;AAEzE,gBAAM,IAAI,+BAA+B,mBAAmB,EAAE,OAAAA,QAAO,MAAM,WAAU,CAAE;;AAGzF,cAAM,iBAAiB,mBAAmB,gBAAgB;AAC1D,cAAM,yBAAyB,mBAAmB,wBAAwB;AAC1E,cAAM,eAAe,mBAAmB,cAAc;AACtD,YAAI,CAAC;AAAc,gBAAM,IAAI,+BAA+B,2BAA2B;AACvF,cAAM,aAAa,mBAAmB,YAAY;AAClD,YAAI,CAAC;AAAY,gBAAM,IAAI,+BAA+B,yBAAyB;AACnF,cAAM,gBAAgB,mBAAmB,eAAe;AACxD,YAAI,CAAC;AAAe,gBAAM,IAAI,+BAA+B,4BAA4B;AACzF,cAAM,aAAa,mBAAmB,YAAY;AAClD,YAAI,CAAC;AAAY,gBAAM,IAAI,+BAA+B,yBAAyB;AAEnF,cAAM,UAAU,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI;AAC5C,cAAM,aAAa,UAAU,SAAS,UAAU;AAEhD,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,KAAK,QAAQ,YAAY;AACvD,YAAI;AAAO,gBAAM;AACjB,cAAM,OAAa,KAAK;AACxB,cAAM,UAAmB;UACvB;UACA;UACA;UACA,YAAY,SAAS,UAAU;UAC/B;UACA;UACA;UACA;;AAEF,cAAM,eAAe,mBAAmB,MAAM;AAG9C,eAAO,SAAS,OAAO;AAEvB,eAAO,EAAE,MAAM,EAAE,SAAS,aAAY,GAAI,OAAO,KAAI;eAC9C,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,SAAS,MAAM,cAAc,KAAI,GAAI,MAAK;;AAG7D,cAAM;;IAEV,CAAC;;;;;EAKO,uBAAoB;AAC1B,WACE,UAAS,MACR,QAAQ,mBAAmB,cAAc,CAAC,KACzC,QAAQ,mBAAmB,mBAAmB,CAAC;EAErD;;;;EAIc,cAAW;;AACvB,YAAM,wBAAwB,MAAM,aAClC,KAAK,SACL,GAAG,KAAK,0BAA0B;AAEpC,aAAO,UAAS,KAAM,QAAQ,mBAAmB,MAAM,CAAC,KAAK,QAAQ,qBAAqB;IAC5F,CAAC;;;;;;;;;EASK,UAAO;;;AACX,YAAM,EAAE,MAAM,OAAO,aAAY,IAAK,MAAM,KAAK,WAAU;AAC3D,UAAI,cAAc;AAChB,eAAO,EAAE,OAAO,aAAY;;AAE9B,YAAM,eAAc,KAAA,KAAK,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;AAClC,UAAI,aAAa;AACf,cAAM,EAAE,MAAK,IAAK,MAAM,KAAK,MAAM,QAAQ,WAAW;AACtD,YAAI,OAAO;AAGT,cAAI,EAAE,eAAe,KAAK,MAAM,MAAM,WAAW,OAAO,MAAM,WAAW,OAAO;AAC9E,mBAAO,EAAE,MAAK;;;;AAIpB,YAAM,KAAK,eAAc;AACzB,YAAM,gBAAgB,KAAK,SAAS,GAAG,KAAK,0BAA0B;AACtE,WAAK,sBAAsB,cAAc,IAAI;AAC7C,aAAO,EAAE,OAAO,KAAI;;;;;;;EAOtB,kBAAkB,UAAmE;AAGnF,UAAM,KAAa,KAAI;AACvB,UAAM,eAA6B;MACjC;MACA;MACA,aAAa,MAAK;AAChB,aAAK,oBAAoB,OAAO,EAAE;MACpC;;AAGF,SAAK,oBAAoB,IAAI,IAAI,YAAY;AAE7C,SAAK,mBAAmB,EAAE;AAE1B,WAAO,EAAE,MAAM,EAAE,aAAY,EAAE;EACjC;EAEc,mBAAmB,IAAU;;;AACzC,UAAI;AACF,cAAM,EACJ,MAAM,EAAE,QAAO,GACf,MAAK,IACH,MAAM,KAAK,WAAU;AACzB,YAAI;AAAO,gBAAM;AAEjB,SAAA,KAAA,KAAK,oBAAoB,IAAI,EAAE,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,SAAS,mBAAmB,OAAO;eAC9D,KAAP;AACA,SAAA,KAAA,KAAK,oBAAoB,IAAI,EAAE,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,SAAS,mBAAmB,IAAI;AAClE,gBAAQ,MAAM,GAAG;;;;;;;;;;EAUf,sBACJ,OACA,UAGI,CAAA,GAAE;;AAQN,UAAI,gBAA+B;AACnC,UAAI,sBAAqC;AACzC,UAAI,KAAK,aAAa,QAAQ;AAC5B,cAAM,eAAe,qBAAoB;AACzC,cAAM,aAAa,KAAK,SAAS,GAAG,KAAK,4BAA4B,YAAY;AACjF,wBAAgB,MAAM,sBAAsB,YAAY;AACxD,8BAAsB,iBAAiB,gBAAgB,UAAU;;AAEnE,UAAI;AACF,eAAO,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,eAAe;UAC/D,MAAM;YACJ;YACA,gBAAgB;YAChB,uBAAuB;YACvB,sBAAsB,EAAE,eAAe,QAAQ,aAAY;;UAE7D,SAAS,KAAK;UACd,YAAY,QAAQ;SACrB;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM;;IAEV,CAAC;;;;;;EAMa,oBAAoB,cAAoB;;AACpD,UAAI;AACF,cAAM,YAAY,KAAK,IAAG;AAG1B,eAAO,MAAM,UACX,CAAO,YAAWE,YAAA,MAAA,QAAA,QAAA,aAAA;AAChB,gBAAM,MAAM,UAAU,GAAG;AAEzB,iBAAO,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,sCAAsC;YACtF,MAAM,EAAE,eAAe,aAAY;YACnC,SAAS,KAAK;YACd,OAAO;WACR;QACH,CAAC,GACD,CAAC,SAAS,GAAG,WACX,UACA,OAAO,SACP,OAAO,iBAAiB;QAExB,KAAK,IAAG,KAAM,UAAU,KAAK,MAAM,YAAY,0BAA0B;eAEtE,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,EAAE,SAAS,MAAM,MAAM,KAAI,GAAI,MAAK;;AAErD,cAAM;;IAEV,CAAC;;EAEO,gBAAgB,cAAqB;AAC3C,UAAM,iBACJ,OAAO,iBAAiB,YACxB,iBAAiB,QACjB,kBAAkB,gBAClB,mBAAmB,gBACnB,gBAAgB;AAElB,WAAO;EACT;EAEc,sBACZ,UACA,SAKC;;AAED,YAAM,MAAc,MAAM,KAAK,mBAAmB,UAAU;QAC1D,YAAY,QAAQ;QACpB,QAAQ,QAAQ;QAChB,aAAa,QAAQ;OACtB;AAED,UAAI,UAAS,KAAM,CAAC,QAAQ,qBAAqB;AAC/C,eAAO,SAAS,OAAO,GAAG;;AAG5B,aAAO,EAAE,MAAM,EAAE,UAAU,IAAG,GAAI,OAAO,KAAI;IAC/C,CAAC;;;;;;EAMa,qBAAkB;;;AAC9B,UAAI;AACF,cAAM,iBAAiB,MAAM,aAAa,KAAK,SAAS,KAAK,UAAU;AACvE,YAAI,CAAC,KAAK,gBAAgB,cAAc,GAAG;AACzC,cAAI,mBAAmB,MAAM;AAC3B,kBAAM,KAAK,eAAc;;AAG3B;;AAGF,cAAM,UAAU,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI;AAE5C,cAAK,KAAA,eAAe,gBAAU,QAAA,OAAA,SAAA,KAAI,YAAY,UAAU,eAAe;AACrE,cAAI,KAAK,oBAAoB,eAAe,eAAe;AACzD,kBAAM,EAAE,MAAK,IAAK,MAAM,KAAK,kBAAkB,eAAe,aAAa;AAE3E,gBAAI,OAAO;AACT,sBAAQ,IAAI,MAAM,OAAO;AACzB,oBAAM,KAAK,eAAc;;iBAEtB;AACL,kBAAM,KAAK,eAAc;;eAEtB;AACL,cAAI,KAAK,gBAAgB;AACvB,kBAAM,KAAK,aAAa,cAAc;;AAExC,eAAK,sBAAsB,aAAa,cAAc;;eAEjD,KAAP;AACA,gBAAQ,MAAM,GAAG;AACjB;;;;EAIU,kBAAkB,cAAoB;;;AAElD,UAAI,KAAK,oBAAoB;AAC3B,eAAO,KAAK,mBAAmB;;AAGjC,UAAI;AACF,aAAK,qBAAqB,IAAI,SAAQ;AAEtC,YAAI,CAAC,cAAc;AACjB,gBAAM,IAAI,wBAAuB;;AAEnC,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,KAAK,oBAAoB,YAAY;AACnE,YAAI;AAAO,gBAAM;AACjB,YAAI,CAAC,KAAK;AAAS,gBAAM,IAAI,wBAAuB;AAEpD,cAAM,KAAK,aAAa,KAAK,OAAO;AACpC,aAAK,sBAAsB,mBAAmB,KAAK,OAAO;AAE1D,cAAM,SAAS,EAAE,SAAS,KAAK,SAAS,OAAO,KAAI;AAEnD,aAAK,mBAAmB,QAAQ,MAAM;AAEtC,eAAO;eACA,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,gBAAM,SAAS,EAAE,SAAS,MAAM,MAAK;AAErC,WAAA,KAAA,KAAK,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ,MAAM;AAEvC,iBAAO;;AAGT,SAAA,KAAA,KAAK,wBAAkB,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,KAAK;AACrC,cAAM;;AAEN,aAAK,qBAAqB;;;;EAItB,sBAAsB,OAAwB,SAAyB,YAAY,MAAI;AAC7F,QAAI,KAAK,oBAAoB,WAAW;AACtC,WAAK,iBAAiB,YAAY,EAAE,OAAO,QAAO,CAAE;;AAGtD,SAAK,oBAAoB,QAAQ,CAAC,MAAM,EAAE,SAAS,OAAO,OAAO,CAAC;EACpE;;;;;EAMc,aAAa,SAAgB;;AACzC,UAAI,CAAC,KAAK,gBAAgB;AACxB,aAAK,kBAAkB;;AAGzB,UAAI,KAAK,kBAAkB,QAAQ,YAAY;AAC7C,cAAM,KAAK,gBAAgB,OAAO;;IAEtC,CAAC;;EAEO,gBAAgB,gBAAuB;AAC7C,WAAO,aAAa,KAAK,SAAS,KAAK,YAAY,cAAc;EACnE;EAEc,iBAAc;;AAC1B,UAAI,KAAK,gBAAgB;AACvB,cAAM,gBAAgB,KAAK,SAAS,KAAK,UAAU;aAC9C;AACL,aAAK,kBAAkB;;IAE3B,CAAC;;;;;;;;EAQO,mCAAgC;AACtC,UAAM,WAAW,KAAK;AACtB,SAAK,4BAA4B;AAEjC,QAAI;AACF,UAAI,YAAY,UAAS,MAAM,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,sBAAqB;AAC1D,eAAO,oBAAoB,oBAAoB,QAAQ;;aAElD,GAAP;AACA,cAAQ,MAAM,6CAA6C,CAAC;;EAEhE;;;;;EAMc,oBAAiB;;AAC7B,YAAM,KAAK,iBAAgB;AAE3B,YAAM,SAAS,YAAY,MAAM,KAAK,sBAAqB,GAAI,0BAA0B;AACzF,WAAK,oBAAoB;AAEzB,UAAI,UAAU,OAAO,WAAW,YAAY,OAAO,OAAO,UAAU,YAAY;AAO9E,eAAO,MAAK;iBAEH,OAAO,SAAS,eAAe,OAAO,KAAK,eAAe,YAAY;AAI/E,aAAK,WAAW,MAAM;;AAIxB,YAAM,KAAK,sBAAqB;IAClC,CAAC;;;;;;EAMa,mBAAgB;;AAC5B,YAAM,SAAS,KAAK;AACpB,WAAK,oBAAoB;AAEzB,UAAI,QAAQ;AACV,sBAAc,MAAM;;IAExB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;EAwBK,mBAAgB;;AACpB,WAAK,iCAAgC;AACrC,YAAM,KAAK,kBAAiB;IAC9B,CAAC;;;;;;;;;;EAUK,kBAAe;;AACnB,WAAK,iCAAgC;AACrC,YAAM,KAAK,iBAAgB;IAC7B,CAAC;;;;;EAKa,wBAAqB;;AACjC,YAAM,MAAM,KAAK,IAAG;AAEpB,UAAI;AACF,cAAM,EACJ,MAAM,EAAE,QAAO,EAAE,IACf,MAAM,KAAK,WAAU;AAEzB,YAAI,CAAC,WAAW,CAAC,QAAQ,iBAAiB,CAAC,QAAQ,YAAY;AAC7D;;AAIF,cAAM,iBAAiB,KAAK,OACzB,QAAQ,aAAa,MAAO,OAAO,0BAA0B;AAGhE,YAAI,iBAAiB,6BAA6B;AAChD,gBAAM,KAAK,kBAAkB,QAAQ,aAAa;;eAE7C,GAAP;AACA,gBAAQ,MAAM,0EAA0E,CAAC;;IAE7F,CAAC;;;;;;;EAOa,0BAAuB;;AACnC,UAAI,CAAC,UAAS,KAAM,EAAC,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,mBAAkB;AAC7C,YAAI,KAAK,kBAAkB;AAEzB,eAAK,iBAAgB;;AAGvB,eAAO;;AAGT,UAAI;AACF,aAAK,4BAA4B,MAAWA,YAAA,MAAA,QAAA,QAAA,aAAA;AAAC,iBAAA,MAAM,KAAK,qBAAqB,KAAK;QAAC,CAAA;AAEnF,mBAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,iBAAiB,oBAAoB,KAAK,yBAAyB;AAI3E,cAAM,KAAK,qBAAqB,IAAI;eAC7B,OAAP;AACA,gBAAQ,MAAM,2BAA2B,KAAK;;IAElD,CAAC;;;;;EAKa,qBAAqB,WAAkB;;AACnD,UAAI,SAAS,oBAAoB,WAAW;AAC1C,YAAI,CAAC,WAAW;AAEd,gBAAM,KAAK;AACX,gBAAM,KAAK,mBAAkB;;AAG/B,YAAI,KAAK,kBAAkB;AAGzB,eAAK,kBAAiB;;iBAEf,SAAS,oBAAoB,UAAU;AAChD,YAAI,KAAK,kBAAkB;AACzB,eAAK,iBAAgB;;;IAG3B,CAAC;;;;;;;;EAQa,mBACZ,UACA,SAIC;;AAED,YAAM,YAAsB,CAAC,YAAY,mBAAmB,QAAQ,GAAG;AACvE,UAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,YAAY;AACvB,kBAAU,KAAK,eAAe,mBAAmB,QAAQ,UAAU,GAAG;;AAExE,UAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,QAAQ;AACnB,kBAAU,KAAK,UAAU,mBAAmB,QAAQ,MAAM,GAAG;;AAE/D,UAAI,KAAK,aAAa,QAAQ;AAC5B,cAAM,eAAe,qBAAoB;AACzC,cAAM,aAAa,KAAK,SAAS,GAAG,KAAK,4BAA4B,YAAY;AACjF,cAAM,gBAAgB,MAAM,sBAAsB,YAAY;AAC9D,cAAM,sBAAsB,iBAAiB,gBAAgB,UAAU;AACvE,cAAM,aAAa,IAAI,gBAAgB;UACrC,gBAAgB,GAAG,mBAAmB,aAAa;UACnD,uBAAuB,GAAG,mBAAmB,mBAAmB;SACjE;AACD,kBAAU,KAAK,WAAW,SAAQ,CAAE;;AAEtC,UAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAa;AACxB,cAAM,QAAQ,IAAI,gBAAgB,QAAQ,WAAW;AACrD,kBAAU,KAAK,MAAM,SAAQ,CAAE;;AAGjC,aAAO,GAAG,KAAK,iBAAiB,UAAU,KAAK,GAAG;IACpD,CAAC;;EAEa,UAAU,QAAyB;;;AAC/C,UAAI;AACF,cAAM,EAAE,MAAM,aAAa,OAAO,aAAY,IAAK,MAAM,KAAK,WAAU;AACxE,YAAI,cAAc;AAChB,iBAAO,EAAE,MAAM,MAAM,OAAO,aAAY;;AAG1C,eAAO,MAAM,SAAS,KAAK,OAAO,UAAU,GAAG,KAAK,eAAe,OAAO,YAAY;UACpF,SAAS,KAAK;UACd,MAAK,KAAA,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;SAC5B;eACM,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAE5B,cAAM;;;;;;;EAOI,QAAQ,QAAuB;;;AAC3C,UAAI;AACF,cAAM,EAAE,MAAM,aAAa,OAAO,aAAY,IAAK,MAAM,KAAK,WAAU;AACxE,YAAI,cAAc;AAChB,iBAAO,EAAE,MAAM,MAAM,OAAO,aAAY;;AAG1C,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,SAAS,KAAK,OAAO,QAAQ,GAAG,KAAK,eAAe;UAChF,MAAM;YACJ,eAAe,OAAO;YACtB,aAAa,OAAO;YACpB,QAAQ,OAAO;;UAEjB,SAAS,KAAK;UACd,MAAK,KAAA,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;SAC5B;AAED,YAAI,OAAO;AACT,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,aAAI,KAAA,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,SAAS;AACvB,eAAK,KAAK,UAAU,4BAA4B,KAAK,KAAK;;AAG5D,eAAO,EAAE,MAAM,OAAO,KAAI;eACnB,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAE5B,cAAM;;;;;;;EAOI,QAAQ,QAAuB;;;AAC3C,UAAI;AACF,cAAM,EAAE,MAAM,aAAa,OAAO,aAAY,IAAK,MAAM,KAAK,WAAU;AACxE,YAAI,cAAc;AAChB,iBAAO,EAAE,MAAM,MAAM,OAAO,aAAY;;AAG1C,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,SAC5B,KAAK,OACL,QACA,GAAG,KAAK,eAAe,OAAO,mBAC9B;UACE,MAAM,EAAE,MAAM,OAAO,MAAM,cAAc,OAAO,YAAW;UAC3D,SAAS,KAAK;UACd,MAAK,KAAA,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;SAC5B;AAEH,YAAI,OAAO;AACT,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAG5B,cAAM,KAAK,aAAY,OAAA,OAAA,EACrB,YAAY,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI,IAAI,KAAK,WAAU,GACxD,IAAI,CAAA;AAET,aAAK,sBAAsB,0BAA0B,IAAI;AAEzD,eAAO,EAAE,MAAM,MAAK;eACb,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAE5B,cAAM;;;;;;;EAOI,WAAW,QAA0B;;;AACjD,UAAI;AACF,cAAM,EAAE,MAAM,aAAa,OAAO,aAAY,IAAK,MAAM,KAAK,WAAU;AACxE,YAAI,cAAc;AAChB,iBAAO,EAAE,MAAM,MAAM,OAAO,aAAY;;AAG1C,eAAO,MAAM,SACX,KAAK,OACL,QACA,GAAG,KAAK,eAAe,OAAO,sBAC9B;UACE,SAAS,KAAK;UACd,MAAK,KAAA,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;SAC5B;eAEI,OAAP;AACA,YAAI,YAAY,KAAK,GAAG;AACtB,iBAAO,EAAE,MAAM,MAAM,MAAK;;AAE5B,cAAM;;;;;;;EAOI,oBACZ,QAAmC;;AAEnC,YAAM,EAAE,MAAM,eAAe,OAAO,eAAc,IAAK,MAAM,KAAK,WAAW;QAC3E,UAAU,OAAO;OAClB;AACD,UAAI,gBAAgB;AAClB,eAAO,EAAE,MAAM,MAAM,OAAO,eAAc;;AAE5C,aAAO,MAAM,KAAK,QAAQ;QACxB,UAAU,OAAO;QACjB,aAAa,cAAc;QAC3B,MAAM,OAAO;OACd;IACH,CAAC;;;;;EAKa,eAAY;;AACxB,YAAM,EACJ,MAAM,EAAE,KAAI,GACZ,OAAO,UAAS,IACd,MAAM,KAAK,QAAO;AACtB,UAAI,WAAW;AACb,eAAO,EAAE,MAAM,MAAM,OAAO,UAAS;;AAGvC,YAAM,WAAU,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,YAAW,CAAA;AACjC,YAAM,OAAO,QAAQ,OACnB,CAAC,WAAW,OAAO,gBAAgB,UAAU,OAAO,WAAW,UAAU;AAG3E,aAAO;QACL,MAAM;UACJ,KAAK;UACL;;QAEF,OAAO;;IAEX,CAAC;;;;;EAKa,kCAA+B;;;AAC3C,YAAM,EACJ,MAAM,EAAE,QAAO,GACf,OAAO,aAAY,IACjB,MAAM,KAAK,WAAU;AACzB,UAAI,cAAc;AAChB,eAAO,EAAE,MAAM,MAAM,OAAO,aAAY;;AAE1C,UAAI,CAAC,SAAS;AACZ,eAAO;UACL,MAAM,EAAE,cAAc,MAAM,WAAW,MAAM,8BAA8B,CAAA,EAAE;UAC7E,OAAO;;;AAIX,YAAM,UAAU,KAAK,WAAW,QAAQ,YAAY;AAEpD,UAAI,eAAoD;AAExD,UAAI,QAAQ,KAAK;AACf,uBAAe,QAAQ;;AAGzB,UAAI,YAAiD;AAErD,YAAM,mBACJ,MAAA,KAAA,QAAQ,KAAK,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,OAAO,CAAC,WAAmB,OAAO,WAAW,UAAU,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA;AAEpF,UAAI,gBAAgB,SAAS,GAAG;AAC9B,oBAAY;;AAGd,YAAM,+BAA+B,QAAQ,OAAO,CAAA;AAEpD,aAAO,EAAE,MAAM,EAAE,cAAc,WAAW,6BAA4B,GAAI,OAAO,KAAI;;;;;;ACnpDnF,IAAO,qBAAP,cAAkC,aAAY;EAClD,YAAY,SAAkC;AAC5C,UAAM,OAAO;EACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcF,IAAM,yBAAyB;EAC7B,SAASC;;AAGX,IAAM,qBAAqB;EACzB,QAAQ;;AAGV,IAAM,uBAAkD;EACtD,kBAAkB;EAClB,gBAAgB;EAChB,oBAAoB;EACpB,UAAU;;AAGZ,IAAM,2BAAkD,CAAA;AAOxD,IAAqB,iBAArB,MAAmC;;;;;;;;;;;;;EAwCjC,YACY,aACA,aACV,SAA2C;;AAFjC,SAAA,cAAA;AACA,SAAA,cAAA;AAGV,QAAI,CAAC;AAAa,YAAM,IAAI,MAAM,0BAA0B;AAC5D,QAAI,CAAC;AAAa,YAAM,IAAI,MAAM,0BAA0B;AAE5D,UAAM,eAAe,mBAAmB,WAAW;AAEnD,SAAK,cAAc,GAAG,2BAA2B,QAAQ,UAAU,IAAI;AACvE,SAAK,UAAU,GAAG;AAClB,SAAK,aAAa,GAAG;AAErB,UAAM,aAAa,aAAa,MAAM,+BAA+B;AACrE,QAAI,YAAY;AACd,YAAM,WAAW,aAAa,MAAM,GAAG;AACvC,WAAK,eAAe,GAAG,SAAS,CAAC,eAAe,SAAS,CAAC,KAAK,SAAS,CAAC;WACpE;AACL,WAAK,eAAe,GAAG;;AAGzB,UAAM,oBAAoB,MAAM,IAAI,IAAI,KAAK,OAAO,EAAE,SAAS,MAAM,GAAG,EAAE,CAAC;AAC3E,UAAM,WAAW;MACf,IAAI;MACJ,UAAU;MACV,MAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,oBAAoB,GAAA,EAAE,YAAY,kBAAiB,CAAA;MAC9D,QAAQ;;AAGV,UAAM,WAAW,qBAAqB,YAAO,QAAP,YAAO,SAAP,UAAW,CAAA,GAAI,QAAQ;AAE7D,SAAK,cAAa,MAAA,KAAA,SAAS,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,gBAAU,QAAA,OAAA,SAAA,KAAI;AAC/C,SAAK,WAAU,MAAA,KAAA,SAAS,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA;AAE3C,SAAK,OAAO,KAAK,yBACf,KAAA,SAAS,UAAI,QAAA,OAAA,SAAA,KAAI,CAAA,GACjB,KAAK,UACL,KAAA,SAAS,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK;AAExB,SAAK,QAAQ,cAAc,aAAa,KAAK,gBAAgB,KAAK,IAAI,IAAG,KAAA,SAAS,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK;AAE/F,SAAK,WAAW,KAAK,oBAAmB,OAAA,OAAA,EAAG,SAAS,KAAK,QAAO,GAAK,SAAS,QAAQ,CAAA;AACtF,SAAK,OAAO,IAAI,gBAAgB,GAAG,wBAAwB;MACzD,SAAS,KAAK;MACd,SAAQ,KAAA,SAAS,QAAE,QAAA,OAAA,SAAA,SAAA,GAAE;MACrB,OAAO,KAAK;KACb;AAED,SAAK,qBAAoB;EAC3B;;;;EAKA,IAAI,YAAS;AACX,WAAO,IAAI,gBAAgB,KAAK,cAAc;MAC5C,SAAS,KAAK;MACd,aAAa,KAAK;KACnB;EACH;;;;EAKA,IAAI,UAAO;AACT,WAAO,IAAI,cAAsB,KAAK,YAAY,KAAK,SAAS,KAAK,KAAK;EAC5E;EAeA,KAAK,UAAgB;AACnB,WAAO,KAAK,KAAK,KAAK,QAAQ;EAChC;;;;;;;;;;EAWA,IAIE,IACA,OAA0B,CAAA,GAC1B,SAGC;AAUD,WAAO,KAAK,KAAK,IAAI,IAAI,MAAM,OAAO;EACxC;;;;;;;;EASA,QAAQ,MAAc,OAA+B,EAAE,QAAQ,CAAA,EAAE,GAAE;AACjE,WAAO,KAAK,SAAS,QAAQ,MAAM,IAAI;EACzC;;;;EAKA,cAAW;AACT,WAAO,KAAK,SAAS,YAAW;EAClC;;;;;;;EAQA,cAAc,SAAwB;AACpC,WAAO,KAAK,SAAS,cAAc,OAAO;EAC5C;;;;EAKA,oBAAiB;AACf,WAAO,KAAK,SAAS,kBAAiB;EACxC;EAEc,kBAAe;;;AAC3B,YAAM,EAAE,KAAI,IAAK,MAAM,KAAK,KAAK,WAAU;AAE3C,cAAO,MAAA,KAAA,KAAK,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAY,QAAA,OAAA,SAAA,KAAI;;;EAG/B,wBACN,EACE,kBACA,gBACA,oBACA,SACA,YACA,SAAQ,GAEV,SACAC,QAAa;AAEb,UAAM,cAAc;MAClB,eAAe,UAAU,KAAK;MAC9B,QAAQ,GAAG,KAAK;;AAElB,WAAO,IAAI,mBAAmB;MAC5B,KAAK,KAAK;MACV,SAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,WAAW,GAAK,OAAO;MACrC;MACA;MACA;MACA;MACA;MACA;MACA,OAAAA;KACD;EACH;EAEQ,oBAAoB,SAA8B;AACxD,WAAO,IAAI,eAAe,KAAK,aAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GACrC,OAAO,GAAA,EACV,QAAM,OAAA,OAAO,EAAE,QAAQ,KAAK,YAAW,GAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,MAAM,EAAA,CAAA,CAAA;EAEjE;EAEQ,uBAAoB;AAC1B,QAAI,OAAO,KAAK,KAAK,kBAAkB,CAAC,OAAO,YAAW;AACxD,WAAK,oBAAoB,OAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAAc,QAAQ;IACjE,CAAC;AACD,WAAO;EACT;EAEQ,oBACN,OACA,OACA,QAA4B;AAE5B,SACG,UAAU,qBAAqB,UAAU,gBAC1C,KAAK,uBAAuB,OAC5B;AAEA,WAAK,SAAS,QAAQ,UAAK,QAAL,UAAK,SAAL,QAAS,IAAI;AAEnC,WAAK,qBAAqB;eACjB,UAAU,cAAc;AAEjC,WAAK,SAAS,QAAQ,KAAK,WAAW;AACtC,UAAI,UAAU;AAAW,aAAK,KAAK,QAAO;AAC1C,WAAK,qBAAqB;;EAE9B;;;;ACtRK,IAAM,eAAe,CAS1B,aACA,aACA,YACgD;AAChD,SAAO,IAAI,eAAe,aAAa,aAAa,OAAO;AAC7D;",
  "names": ["crossFetch", "res", "fetch", "fetch", "version", "DEFAULT_HEADERS", "version", "SOCKET_STATES", "CHANNEL_STATES", "CHANNEL_EVENTS", "TRANSPORTS", "CONNECTION_STATE", "REALTIME_PRESENCE_LISTEN_EVENTS", "PostgresTypes", "REALTIME_POSTGRES_CHANGES_LISTEN_EVENT", "REALTIME_LISTEN_TYPES", "REALTIME_SUBSCRIBE_STATES", "_a", "_b", "type", "noop", "DEFAULT_HEADERS", "__awaiter", "resolveFetch", "__awaiter", "__awaiter", "fetch", "resolveFetch", "version", "DEFAULT_HEADERS", "version", "fetch", "DEFAULT_HEADERS", "resolveFetch", "fetch", "version", "DEFAULT_HEADERS", "version", "import_cross_fetch", "resolveFetch", "crossFetch", "CrossFetchHeaders", "fetch", "__awaiter", "DEFAULT_DB_OPTIONS", "DEFAULT_AUTH_OPTIONS", "DEFAULT_REALTIME_OPTIONS", "DEFAULT_GLOBAL_OPTIONS", "resolveFetch", "__awaiter", "_getErrorMessage", "handleError", "__awaiter", "_getRequestParams", "_handleRequest", "fetch", "resolveFetch", "__rest", "version", "DEFAULT_HEADERS", "version", "DEFAULT_HEADERS", "resolveFetch", "expiresAt", "error", "data", "__awaiter", "DEFAULT_HEADERS", "fetch"]
}
